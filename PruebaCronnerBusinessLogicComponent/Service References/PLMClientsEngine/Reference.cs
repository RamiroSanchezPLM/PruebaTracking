//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.296
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PruebaCronnerBusinessLogicComponent.PLMClientsEngine {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo))]
    public partial class ClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AddedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompleteNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EntrySourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AddedDate {
            get {
                return this.AddedDateField;
            }
            set {
                if ((this.AddedDateField.Equals(value) != true)) {
                    this.AddedDateField = value;
                    this.RaisePropertyChanged("AddedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Age {
            get {
                return this.AgeField;
            }
            set {
                if ((object.ReferenceEquals(this.AgeField, value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompleteName {
            get {
                return this.CompleteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompleteNameField, value) != true)) {
                    this.CompleteNameField = value;
                    this.RaisePropertyChanged("CompleteName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EntrySourceId {
            get {
                return this.EntrySourceIdField;
            }
            set {
                if ((this.EntrySourceIdField.Equals(value) != true)) {
                    this.EntrySourceIdField = value;
                    this.RaisePropertyChanged("EntrySourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondLastName {
            get {
                return this.SecondLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondLastNameField, value) != true)) {
                    this.SecondLastNameField = value;
                    this.RaisePropertyChanged("SecondLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ClientDetailInfo : PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherSpecialityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo ProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionalLicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> ResidenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResidenceKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo SpecialityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherProfession {
            get {
                return this.OtherProfessionField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherProfessionField, value) != true)) {
                    this.OtherProfessionField = value;
                    this.RaisePropertyChanged("OtherProfession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherSpeciality {
            get {
                return this.OtherSpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherSpecialityField, value) != true)) {
                    this.OtherSpecialityField = value;
                    this.RaisePropertyChanged("OtherSpeciality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo Profession {
            get {
                return this.ProfessionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionField, value) != true)) {
                    this.ProfessionField = value;
                    this.RaisePropertyChanged("Profession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfessionalLicense {
            get {
                return this.ProfessionalLicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionalLicenseField, value) != true)) {
                    this.ProfessionalLicenseField = value;
                    this.RaisePropertyChanged("ProfessionalLicense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> ResidenceId {
            get {
                return this.ResidenceIdField;
            }
            set {
                if ((this.ResidenceIdField.Equals(value) != true)) {
                    this.ResidenceIdField = value;
                    this.RaisePropertyChanged("ResidenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResidenceKey {
            get {
                return this.ResidenceKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ResidenceKeyField, value) != true)) {
                    this.ResidenceKeyField = value;
                    this.RaisePropertyChanged("ResidenceKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo Speciality {
            get {
                return this.SpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialityField, value) != true)) {
                    this.SpecialityField = value;
                    this.RaisePropertyChanged("Speciality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class LicenseClientInfo : PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherSpecialityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionalLicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherProfession {
            get {
                return this.OtherProfessionField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherProfessionField, value) != true)) {
                    this.OtherProfessionField = value;
                    this.RaisePropertyChanged("OtherProfession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherSpeciality {
            get {
                return this.OtherSpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherSpecialityField, value) != true)) {
                    this.OtherSpecialityField = value;
                    this.RaisePropertyChanged("OtherSpeciality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Prefix {
            get {
                return this.PrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.PrefixField, value) != true)) {
                    this.PrefixField = value;
                    this.RaisePropertyChanged("Prefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Profession {
            get {
                return this.ProfessionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionField, value) != true)) {
                    this.ProfessionField = value;
                    this.RaisePropertyChanged("Profession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfessionalLicense {
            get {
                return this.ProfessionalLicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionalLicenseField, value) != true)) {
                    this.ProfessionalLicenseField = value;
                    this.RaisePropertyChanged("ProfessionalLicense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Speciality {
            get {
                return this.SpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialityField, value) != true)) {
                    this.SpecialityField = value;
                    this.RaisePropertyChanged("Speciality");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProfessionInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ProfessionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ProfessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReqProfessionalLicenseField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ProfessionId {
            get {
                return this.ProfessionIdField;
            }
            set {
                if ((this.ProfessionIdField.Equals(value) != true)) {
                    this.ProfessionIdField = value;
                    this.RaisePropertyChanged("ProfessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfessionName {
            get {
                return this.ProfessionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionNameField, value) != true)) {
                    this.ProfessionNameField = value;
                    this.RaisePropertyChanged("ProfessionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReqProfessionalLicense {
            get {
                return this.ReqProfessionalLicenseField;
            }
            set {
                if ((this.ReqProfessionalLicenseField.Equals(value) != true)) {
                    this.ReqProfessionalLicenseField = value;
                    this.RaisePropertyChanged("ReqProfessionalLicense");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialityInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class SpecialityInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SpecialityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialityNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SpecialityId {
            get {
                return this.SpecialityIdField;
            }
            set {
                if ((this.SpecialityIdField.Equals(value) != true)) {
                    this.SpecialityIdField = value;
                    this.RaisePropertyChanged("SpecialityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialityName {
            get {
                return this.SpecialityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialityNameField, value) != true)) {
                    this.SpecialityNameField = value;
                    this.RaisePropertyChanged("SpecialityName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.Professions", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsProfessions : short {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AGRONOMO = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BIOLOGO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DISTRIBUIDOR = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENFERMERO = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INGENIERO_EN_ALIMENTOS = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INGENIERO_QUIMICO = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICO = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICO_VETERINARIO = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ODONTOLOGO = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OTRA = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PARAMEDICO = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PSICOLOGO = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QUIMICO_BIOLOGO_PARASITOLOGO = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QUIMICO_FARMACOBIOLOGO = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TECNICO_LABORATORISTA = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TECNICO_RADIOLOGO = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ASOCIACION = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FARMACIA_VETERINARIA = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVESTIGADOR = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PRODUCTOR = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNIVERSIDAD = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFESIONAL_DE_LA_SALUD = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PACIENTE = 23,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.Specialities", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsSpecialities : short {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ALERGOLOGIA = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANDROLOGIA = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANESTESIOLOGIA = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANGIOLOGIA = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BARIATRIA = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CARDIOLOGIA = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CIRUGIA = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COLOPROCTOLOGIA = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DERMATOLOGIA = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DIABETOLOGIA = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENDOCRINOLOGIA = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENDOSCOPIA = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EPIDEMIOLOGIA = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ESTOMATOLOGIA = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FARMACOLOGIA = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GASTROENTEROLOGIA = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GERONTOLOGIA = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GERIATRIA = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GINECOLOGIA = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HEMATOLOGIA = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INFECTOLOGIA = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INMUNOLOGIA = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_CRITICA = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_DE_REHABILITACION = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_DEL_DEPORTE = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_FAMILIAR = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_GENERAL = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_INTERNA = 59,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_NUCLEAR = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEFROLOGIA = 61,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEONATOLOGIA = 62,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEUMOLOGIA = 63,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEUROLOGIA = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NUTRIOLOGIA = 65,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFTALMOLOGIA = 66,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ONCOLOGIA = 67,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ORTOPEDIA = 68,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OTORRINOLARINGOLOGIA = 69,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PATOLOGIA = 70,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PEDIATRIA = 71,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PSIQUIATRIA = 72,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RADIOLOGIA = 73,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REUMATOLOGIA = 74,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TRAUMATOLOGIA = 75,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UROLOGIA = 76,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_INTENSIVA = 77,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEDICINA_DE_URGENCIAS = 78,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OTRA = 79,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANALISIS_CLINICOS = 80,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANATOMIA_PATOLOGICA = 81,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BACTERIOLOGIA = 82,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ECOGRAFIA = 83,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ETOLOGIA = 84,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GENETICA = 85,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OBSTETRICIA = 86,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ODONTOLOGIA = 87,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PARASITOLOGIA = 88,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REPRODUCCION_ANIMAL = 89,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SALUD_PUBLICA_Y_CONTROL_ALIMENTARIO = 90,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VIROLOGIA = 91,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.EntrySources", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsEntrySources : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Portal_PLM_2010 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONEXIFARMA = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DISPOSITIVO_MOVIL = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLIENTE_SERVIDOR = 29,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.TargetOutputs", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsTargetOutputs : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cliente_Servidor = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Web = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Android = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BlackBerry = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        iOS_iPhone = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        iOS_iPad = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Servidor_Servidor = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Windows_Phone = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class LicenseDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistributionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinalDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InitialDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LicenseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrefixIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrefixNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TargetIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeId {
            get {
                return this.CodeIdField;
            }
            set {
                if ((this.CodeIdField.Equals(value) != true)) {
                    this.CodeIdField = value;
                    this.RaisePropertyChanged("CodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeString {
            get {
                return this.CodeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeStringField, value) != true)) {
                    this.CodeStringField = value;
                    this.RaisePropertyChanged("CodeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((this.DeviceIdField.Equals(value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistributionId {
            get {
                return this.DistributionIdField;
            }
            set {
                if ((this.DistributionIdField.Equals(value) != true)) {
                    this.DistributionIdField = value;
                    this.RaisePropertyChanged("DistributionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinalDate {
            get {
                return this.FinalDateField;
            }
            set {
                if ((this.FinalDateField.Equals(value) != true)) {
                    this.FinalDateField = value;
                    this.RaisePropertyChanged("FinalDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InitialDate {
            get {
                return this.InitialDateField;
            }
            set {
                if ((this.InitialDateField.Equals(value) != true)) {
                    this.InitialDateField = value;
                    this.RaisePropertyChanged("InitialDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LicenseId {
            get {
                return this.LicenseIdField;
            }
            set {
                if ((this.LicenseIdField.Equals(value) != true)) {
                    this.LicenseIdField = value;
                    this.RaisePropertyChanged("LicenseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrefixId {
            get {
                return this.PrefixIdField;
            }
            set {
                if ((this.PrefixIdField.Equals(value) != true)) {
                    this.PrefixIdField = value;
                    this.RaisePropertyChanged("PrefixId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrefixName {
            get {
                return this.PrefixNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PrefixNameField, value) != true)) {
                    this.PrefixNameField = value;
                    this.RaisePropertyChanged("PrefixName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((this.TargetIdField.Equals(value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatorsDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CalculatorsDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorFormulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CalculatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorReferencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SQLSyntaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.VariablesInfo> VariablesListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorDescription {
            get {
                return this.CalculatorDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorDescriptionField, value) != true)) {
                    this.CalculatorDescriptionField = value;
                    this.RaisePropertyChanged("CalculatorDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorFormula {
            get {
                return this.CalculatorFormulaField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorFormulaField, value) != true)) {
                    this.CalculatorFormulaField = value;
                    this.RaisePropertyChanged("CalculatorFormula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CalculatorId {
            get {
                return this.CalculatorIdField;
            }
            set {
                if ((this.CalculatorIdField.Equals(value) != true)) {
                    this.CalculatorIdField = value;
                    this.RaisePropertyChanged("CalculatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorName {
            get {
                return this.CalculatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorNameField, value) != true)) {
                    this.CalculatorNameField = value;
                    this.RaisePropertyChanged("CalculatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorReferences {
            get {
                return this.CalculatorReferencesField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorReferencesField, value) != true)) {
                    this.CalculatorReferencesField = value;
                    this.RaisePropertyChanged("CalculatorReferences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SQLSyntax {
            get {
                return this.SQLSyntaxField;
            }
            set {
                if ((object.ReferenceEquals(this.SQLSyntaxField, value) != true)) {
                    this.SQLSyntaxField = value;
                    this.RaisePropertyChanged("SQLSyntax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.VariablesInfo> VariablesList {
            get {
                return this.VariablesListField;
            }
            set {
                if ((object.ReferenceEquals(this.VariablesListField, value) != true)) {
                    this.VariablesListField = value;
                    this.RaisePropertyChanged("VariablesList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VariablesInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class VariablesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomenclatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VariableIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariableValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nomenclature {
            get {
                return this.NomenclatureField;
            }
            set {
                if ((object.ReferenceEquals(this.NomenclatureField, value) != true)) {
                    this.NomenclatureField = value;
                    this.RaisePropertyChanged("Nomenclature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VariableId {
            get {
                return this.VariableIdField;
            }
            set {
                if ((this.VariableIdField.Equals(value) != true)) {
                    this.VariableIdField = value;
                    this.RaisePropertyChanged("VariableId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariableName {
            get {
                return this.VariableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VariableNameField, value) != true)) {
                    this.VariableNameField = value;
                    this.RaisePropertyChanged("VariableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariableValue {
            get {
                return this.VariableValueField;
            }
            set {
                if ((object.ReferenceEquals(this.VariableValueField, value) != true)) {
                    this.VariableValueField = value;
                    this.RaisePropertyChanged("VariableValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ResultsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FinalResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> LowerRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> UpperRangeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FinalResult {
            get {
                return this.FinalResultField;
            }
            set {
                if ((object.ReferenceEquals(this.FinalResultField, value) != true)) {
                    this.FinalResultField = value;
                    this.RaisePropertyChanged("FinalResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> LowerRange {
            get {
                return this.LowerRangeField;
            }
            set {
                if ((this.LowerRangeField.Equals(value) != true)) {
                    this.LowerRangeField = value;
                    this.RaisePropertyChanged("LowerRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultDescription {
            get {
                return this.ResultDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultDescriptionField, value) != true)) {
                    this.ResultDescriptionField = value;
                    this.RaisePropertyChanged("ResultDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultId {
            get {
                return this.ResultIdField;
            }
            set {
                if ((this.ResultIdField.Equals(value) != true)) {
                    this.ResultIdField = value;
                    this.RaisePropertyChanged("ResultId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> UpperRange {
            get {
                return this.UpperRangeField;
            }
            set {
                if ((this.UpperRangeField.Equals(value) != true)) {
                    this.UpperRangeField = value;
                    this.RaisePropertyChanged("UpperRange");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionnairesInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo))]
    public partial class QuestionnairesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionnaireDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionnaireIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionnaireInstructionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionnaireNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionnaireReferencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebPageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionnaireDescription {
            get {
                return this.QuestionnaireDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionnaireDescriptionField, value) != true)) {
                    this.QuestionnaireDescriptionField = value;
                    this.RaisePropertyChanged("QuestionnaireDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionnaireId {
            get {
                return this.QuestionnaireIdField;
            }
            set {
                if ((this.QuestionnaireIdField.Equals(value) != true)) {
                    this.QuestionnaireIdField = value;
                    this.RaisePropertyChanged("QuestionnaireId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionnaireInstructions {
            get {
                return this.QuestionnaireInstructionsField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionnaireInstructionsField, value) != true)) {
                    this.QuestionnaireInstructionsField = value;
                    this.RaisePropertyChanged("QuestionnaireInstructions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionnaireName {
            get {
                return this.QuestionnaireNameField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionnaireNameField, value) != true)) {
                    this.QuestionnaireNameField = value;
                    this.RaisePropertyChanged("QuestionnaireName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionnaireReferences {
            get {
                return this.QuestionnaireReferencesField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionnaireReferencesField, value) != true)) {
                    this.QuestionnaireReferencesField = value;
                    this.RaisePropertyChanged("QuestionnaireReferences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebPage {
            get {
                return this.WebPageField;
            }
            set {
                if ((object.ReferenceEquals(this.WebPageField, value) != true)) {
                    this.WebPageField = value;
                    this.RaisePropertyChanged("WebPage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionnaireDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class QuestionnaireDetailInfo : PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.OptionsInfo> OptionListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.OptionsInfo> OptionList {
            get {
                return this.OptionListField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionListField, value) != true)) {
                    this.OptionListField = value;
                    this.RaisePropertyChanged("OptionList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OptionsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class OptionsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OptionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte OrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionDescription {
            get {
                return this.OptionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionDescriptionField, value) != true)) {
                    this.OptionDescriptionField = value;
                    this.RaisePropertyChanged("OptionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OptionId {
            get {
                return this.OptionIdField;
            }
            set {
                if ((this.OptionIdField.Equals(value) != true)) {
                    this.OptionIdField = value;
                    this.RaisePropertyChanged("OptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SummariesInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class SummariesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SummaryIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SummaryDescription {
            get {
                return this.SummaryDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryDescriptionField, value) != true)) {
                    this.SummaryDescriptionField = value;
                    this.RaisePropertyChanged("SummaryDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SummaryId {
            get {
                return this.SummaryIdField;
            }
            set {
                if ((this.SummaryIdField.Equals(value) != true)) {
                    this.SummaryIdField = value;
                    this.RaisePropertyChanged("SummaryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.Sessions", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsSessions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ABIERTA = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CERRADA = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyUserConnectionsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CompanyUserConnectionsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateConnectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistributionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserConnectionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeId {
            get {
                return this.CodeIdField;
            }
            set {
                if ((this.CodeIdField.Equals(value) != true)) {
                    this.CodeIdField = value;
                    this.RaisePropertyChanged("CodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyUserId {
            get {
                return this.CompanyUserIdField;
            }
            set {
                if ((this.CompanyUserIdField.Equals(value) != true)) {
                    this.CompanyUserIdField = value;
                    this.RaisePropertyChanged("CompanyUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateConnection {
            get {
                return this.DateConnectionField;
            }
            set {
                if ((this.DateConnectionField.Equals(value) != true)) {
                    this.DateConnectionField = value;
                    this.RaisePropertyChanged("DateConnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistributionId {
            get {
                return this.DistributionIdField;
            }
            set {
                if ((this.DistributionIdField.Equals(value) != true)) {
                    this.DistributionIdField = value;
                    this.RaisePropertyChanged("DistributionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserConnectionId {
            get {
                return this.UserConnectionIdField;
            }
            set {
                if ((this.UserConnectionIdField.Equals(value) != true)) {
                    this.UserConnectionIdField = value;
                    this.RaisePropertyChanged("UserConnectionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PharmacyUserInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class PharmacyUserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeId {
            get {
                return this.CodeIdField;
            }
            set {
                if ((this.CodeIdField.Equals(value) != true)) {
                    this.CodeIdField = value;
                    this.RaisePropertyChanged("CodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeString {
            get {
                return this.CodeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeStringField, value) != true)) {
                    this.CodeStringField = value;
                    this.RaisePropertyChanged("CodeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyUserId {
            get {
                return this.CompanyUserIdField;
            }
            set {
                if ((this.CompanyUserIdField.Equals(value) != true)) {
                    this.CompanyUserIdField = value;
                    this.RaisePropertyChanged("CompanyUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPassword {
            get {
                return this.UserPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPasswordField, value) != true)) {
                    this.UserPasswordField = value;
                    this.RaisePropertyChanged("UserPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebApplicationUsersInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class WebApplicationUsersInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CCTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CCTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EditionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CCTypeId {
            get {
                return this.CCTypeIdField;
            }
            set {
                if ((this.CCTypeIdField.Equals(value) != true)) {
                    this.CCTypeIdField = value;
                    this.RaisePropertyChanged("CCTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CCTypeName {
            get {
                return this.CCTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CCTypeNameField, value) != true)) {
                    this.CCTypeNameField = value;
                    this.RaisePropertyChanged("CCTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeId {
            get {
                return this.CodeIdField;
            }
            set {
                if ((this.CodeIdField.Equals(value) != true)) {
                    this.CodeIdField = value;
                    this.RaisePropertyChanged("CodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeString {
            get {
                return this.CodeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeStringField, value) != true)) {
                    this.CodeStringField = value;
                    this.RaisePropertyChanged("CodeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EditionId {
            get {
                return this.EditionIdField;
            }
            set {
                if ((this.EditionIdField.Equals(value) != true)) {
                    this.EditionIdField = value;
                    this.RaisePropertyChanged("EditionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ContactInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BranchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LadaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuburbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte BranchId {
            get {
                return this.BranchIdField;
            }
            set {
                if ((this.BranchIdField.Equals(value) != true)) {
                    this.BranchIdField = value;
                    this.RaisePropertyChanged("BranchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactEmail {
            get {
                return this.ContactEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactEmailField, value) != true)) {
                    this.ContactEmailField = value;
                    this.RaisePropertyChanged("ContactEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lada {
            get {
                return this.LadaField;
            }
            set {
                if ((object.ReferenceEquals(this.LadaField, value) != true)) {
                    this.LadaField = value;
                    this.RaisePropertyChanged("Lada");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneOne {
            get {
                return this.PhoneOneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneOneField, value) != true)) {
                    this.PhoneOneField = value;
                    this.RaisePropertyChanged("PhoneOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suburb {
            get {
                return this.SuburbField;
            }
            set {
                if ((object.ReferenceEquals(this.SuburbField, value) != true)) {
                    this.SuburbField = value;
                    this.RaisePropertyChanged("Suburb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CountryInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> CountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((this.CountryCodeField.Equals(value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StateInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class StateInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditionInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class EditionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BookIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ISBNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberEditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarCode {
            get {
                return this.BarCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarCodeField, value) != true)) {
                    this.BarCodeField = value;
                    this.RaisePropertyChanged("BarCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookId {
            get {
                return this.BookIdField;
            }
            set {
                if ((this.BookIdField.Equals(value) != true)) {
                    this.BookIdField = value;
                    this.RaisePropertyChanged("BookId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EditionId {
            get {
                return this.EditionIdField;
            }
            set {
                if ((this.EditionIdField.Equals(value) != true)) {
                    this.EditionIdField = value;
                    this.RaisePropertyChanged("EditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISBN {
            get {
                return this.ISBNField;
            }
            set {
                if ((object.ReferenceEquals(this.ISBNField, value) != true)) {
                    this.ISBNField = value;
                    this.RaisePropertyChanged("ISBN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberEdition {
            get {
                return this.NumberEditionField;
            }
            set {
                if ((this.NumberEditionField.Equals(value) != true)) {
                    this.NumberEditionField = value;
                    this.RaisePropertyChanged("NumberEdition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryMobileInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CountryMobileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CSSUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentImagesUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ISBNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileMenuesInfo> MenuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CSSUrl {
            get {
                return this.CSSUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.CSSUrlField, value) != true)) {
                    this.CSSUrlField = value;
                    this.RaisePropertyChanged("CSSUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentImagesUrl {
            get {
                return this.ContentImagesUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentImagesUrlField, value) != true)) {
                    this.ContentImagesUrlField = value;
                    this.RaisePropertyChanged("ContentImagesUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EditionId {
            get {
                return this.EditionIdField;
            }
            set {
                if ((this.EditionIdField.Equals(value) != true)) {
                    this.EditionIdField = value;
                    this.RaisePropertyChanged("EditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISBN {
            get {
                return this.ISBNField;
            }
            set {
                if ((object.ReferenceEquals(this.ISBNField, value) != true)) {
                    this.ISBNField = value;
                    this.RaisePropertyChanged("ISBN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileMenuesInfo> Menues {
            get {
                return this.MenuesField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuesField, value) != true)) {
                    this.MenuesField = value;
                    this.RaisePropertyChanged("Menues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MobileMenuesInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class MobileMenuesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MenuIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MenuNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte OSMobileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EditionId {
            get {
                return this.EditionIdField;
            }
            set {
                if ((this.EditionIdField.Equals(value) != true)) {
                    this.EditionIdField = value;
                    this.RaisePropertyChanged("EditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MenuId {
            get {
                return this.MenuIdField;
            }
            set {
                if ((this.MenuIdField.Equals(value) != true)) {
                    this.MenuIdField = value;
                    this.RaisePropertyChanged("MenuId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName {
            get {
                return this.MenuNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuNameField, value) != true)) {
                    this.MenuNameField = value;
                    this.RaisePropertyChanged("MenuName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte OSMobileId {
            get {
                return this.OSMobileIdField;
            }
            set {
                if ((this.OSMobileIdField.Equals(value) != true)) {
                    this.OSMobileIdField = value;
                    this.RaisePropertyChanged("OSMobileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhysicalActivityDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class PhysicalActivityDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ActivityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ActivityImagesInfo> ActivityImagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ItemDetailInfo> ActivityItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ActivityImagesInfo> ActivityImages {
            get {
                return this.ActivityImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityImagesField, value) != true)) {
                    this.ActivityImagesField = value;
                    this.RaisePropertyChanged("ActivityImages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ItemDetailInfo> ActivityItems {
            get {
                return this.ActivityItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityItemsField, value) != true)) {
                    this.ActivityItemsField = value;
                    this.RaisePropertyChanged("ActivityItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityImagesInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ActivityImagesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ActivityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ItemDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((this.ItemIdField.Equals(value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemName {
            get {
                return this.ItemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemNameField, value) != true)) {
                    this.ItemNameField = value;
                    this.RaisePropertyChanged("ItemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicensesInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class LicensesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CurrentInstallationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LicenseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CurrentInstallation {
            get {
                return this.CurrentInstallationField;
            }
            set {
                if ((this.CurrentInstallationField.Equals(value) != true)) {
                    this.CurrentInstallationField = value;
                    this.RaisePropertyChanged("CurrentInstallation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LicenseId {
            get {
                return this.LicenseIdField;
            }
            set {
                if ((this.LicenseIdField.Equals(value) != true)) {
                    this.LicenseIdField = value;
                    this.RaisePropertyChanged("LicenseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseKey {
            get {
                return this.LicenseKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseKeyField, value) != true)) {
                    this.LicenseKeyField = value;
                    this.RaisePropertyChanged("LicenseKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CodeInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CodeInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AssignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CodeStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrefixIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Assign {
            get {
                return this.AssignField;
            }
            set {
                if ((this.AssignField.Equals(value) != true)) {
                    this.AssignField = value;
                    this.RaisePropertyChanged("Assign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeId {
            get {
                return this.CodeIdField;
            }
            set {
                if ((this.CodeIdField.Equals(value) != true)) {
                    this.CodeIdField = value;
                    this.RaisePropertyChanged("CodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CodeStatusId {
            get {
                return this.CodeStatusIdField;
            }
            set {
                if ((this.CodeStatusIdField.Equals(value) != true)) {
                    this.CodeStatusIdField = value;
                    this.RaisePropertyChanged("CodeStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeString {
            get {
                return this.CodeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeStringField, value) != true)) {
                    this.CodeStringField = value;
                    this.RaisePropertyChanged("CodeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrefixId {
            get {
                return this.PrefixIdField;
            }
            set {
                if ((this.PrefixIdField.Equals(value) != true)) {
                    this.PrefixIdField = value;
                    this.RaisePropertyChanged("PrefixId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidCodeInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ValidCodeInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsCodeStatus CodeStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExistField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsCodeStatus CodeStatusId {
            get {
                return this.CodeStatusIdField;
            }
            set {
                if ((this.CodeStatusIdField.Equals(value) != true)) {
                    this.CodeStatusIdField = value;
                    this.RaisePropertyChanged("CodeStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExist {
            get {
                return this.IsExistField;
            }
            set {
                if ((this.IsExistField.Equals(value) != true)) {
                    this.IsExistField = value;
                    this.RaisePropertyChanged("IsExist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.CodeStatus", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsCodeStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_EXISTE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INACTIVO = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACTIVO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CADUCO = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CANCELADO = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommentsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CommentsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BranchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BusinessUnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CommentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CommentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CommentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistributionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrefixIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TargetIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte BranchId {
            get {
                return this.BranchIdField;
            }
            set {
                if ((this.BranchIdField.Equals(value) != true)) {
                    this.BranchIdField = value;
                    this.RaisePropertyChanged("BranchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte BusinessUnitId {
            get {
                return this.BusinessUnitIdField;
            }
            set {
                if ((this.BusinessUnitIdField.Equals(value) != true)) {
                    this.BusinessUnitIdField = value;
                    this.RaisePropertyChanged("BusinessUnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CommentDate {
            get {
                return this.CommentDateField;
            }
            set {
                if ((this.CommentDateField.Equals(value) != true)) {
                    this.CommentDateField = value;
                    this.RaisePropertyChanged("CommentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CommentId {
            get {
                return this.CommentIdField;
            }
            set {
                if ((this.CommentIdField.Equals(value) != true)) {
                    this.CommentIdField = value;
                    this.RaisePropertyChanged("CommentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CommentTypeId {
            get {
                return this.CommentTypeIdField;
            }
            set {
                if ((this.CommentTypeIdField.Equals(value) != true)) {
                    this.CommentTypeIdField = value;
                    this.RaisePropertyChanged("CommentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistributionId {
            get {
                return this.DistributionIdField;
            }
            set {
                if ((this.DistributionIdField.Equals(value) != true)) {
                    this.DistributionIdField = value;
                    this.RaisePropertyChanged("DistributionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrefixId {
            get {
                return this.PrefixIdField;
            }
            set {
                if ((this.PrefixIdField.Equals(value) != true)) {
                    this.PrefixIdField = value;
                    this.RaisePropertyChanged("PrefixId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SentDate {
            get {
                return this.SentDateField;
            }
            set {
                if ((this.SentDateField.Equals(value) != true)) {
                    this.SentDateField = value;
                    this.RaisePropertyChanged("SentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((this.TargetIdField.Equals(value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommentTypeDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CommentTypeDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BUnitNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BranchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BusinessUnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CommentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistributionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DistributionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrefixIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TargetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BUnitName {
            get {
                return this.BUnitNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BUnitNameField, value) != true)) {
                    this.BUnitNameField = value;
                    this.RaisePropertyChanged("BUnitName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte BranchId {
            get {
                return this.BranchIdField;
            }
            set {
                if ((this.BranchIdField.Equals(value) != true)) {
                    this.BranchIdField = value;
                    this.RaisePropertyChanged("BranchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BranchName {
            get {
                return this.BranchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchNameField, value) != true)) {
                    this.BranchNameField = value;
                    this.RaisePropertyChanged("BranchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte BusinessUnitId {
            get {
                return this.BusinessUnitIdField;
            }
            set {
                if ((this.BusinessUnitIdField.Equals(value) != true)) {
                    this.BusinessUnitIdField = value;
                    this.RaisePropertyChanged("BusinessUnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CommentTypeId {
            get {
                return this.CommentTypeIdField;
            }
            set {
                if ((this.CommentTypeIdField.Equals(value) != true)) {
                    this.CommentTypeIdField = value;
                    this.RaisePropertyChanged("CommentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistributionId {
            get {
                return this.DistributionIdField;
            }
            set {
                if ((this.DistributionIdField.Equals(value) != true)) {
                    this.DistributionIdField = value;
                    this.RaisePropertyChanged("DistributionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DistributionName {
            get {
                return this.DistributionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DistributionNameField, value) != true)) {
                    this.DistributionNameField = value;
                    this.RaisePropertyChanged("DistributionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrefixId {
            get {
                return this.PrefixIdField;
            }
            set {
                if ((this.PrefixIdField.Equals(value) != true)) {
                    this.PrefixIdField = value;
                    this.RaisePropertyChanged("PrefixId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((this.TargetIdField.Equals(value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetName {
            get {
                return this.TargetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetNameField, value) != true)) {
                    this.TargetNameField = value;
                    this.RaisePropertyChanged("TargetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeDescription {
            get {
                return this.TypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeDescriptionField, value) != true)) {
                    this.TypeDescriptionField = value;
                    this.RaisePropertyChanged("TypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.ElectronicToolTypes", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsElectronicToolTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notas_Médicas = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sitios_PLM = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sitios_Externos = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToolsByTargetInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ToolsByTargetInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BannerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BannerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BannerUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PublishedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TargetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToolDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToolOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToolTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BannerId {
            get {
                return this.BannerIdField;
            }
            set {
                if ((this.BannerIdField.Equals(value) != true)) {
                    this.BannerIdField = value;
                    this.RaisePropertyChanged("BannerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BannerName {
            get {
                return this.BannerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BannerNameField, value) != true)) {
                    this.BannerNameField = value;
                    this.RaisePropertyChanged("BannerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BannerUrl {
            get {
                return this.BannerUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BannerUrlField, value) != true)) {
                    this.BannerUrlField = value;
                    this.RaisePropertyChanged("BannerUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PublishedDate {
            get {
                return this.PublishedDateField;
            }
            set {
                if ((this.PublishedDateField.Equals(value) != true)) {
                    this.PublishedDateField = value;
                    this.RaisePropertyChanged("PublishedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((this.TargetIdField.Equals(value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToolDescription {
            get {
                return this.ToolDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolDescriptionField, value) != true)) {
                    this.ToolDescriptionField = value;
                    this.RaisePropertyChanged("ToolDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToolId {
            get {
                return this.ToolIdField;
            }
            set {
                if ((this.ToolIdField.Equals(value) != true)) {
                    this.ToolIdField = value;
                    this.RaisePropertyChanged("ToolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToolOrder {
            get {
                return this.ToolOrderField;
            }
            set {
                if ((this.ToolOrderField.Equals(value) != true)) {
                    this.ToolOrderField = value;
                    this.RaisePropertyChanged("ToolOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToolTitle {
            get {
                return this.ToolTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolTitleField, value) != true)) {
                    this.ToolTitleField = value;
                    this.RaisePropertyChanged("ToolTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BannersByTargetInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class BannersByTargetInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BannerDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BannerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BannerOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TargetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BannerDescription {
            get {
                return this.BannerDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.BannerDescriptionField, value) != true)) {
                    this.BannerDescriptionField = value;
                    this.RaisePropertyChanged("BannerDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BannerId {
            get {
                return this.BannerIdField;
            }
            set {
                if ((this.BannerIdField.Equals(value) != true)) {
                    this.BannerIdField = value;
                    this.RaisePropertyChanged("BannerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BannerOrder {
            get {
                return this.BannerOrderField;
            }
            set {
                if ((this.BannerOrderField.Equals(value) != true)) {
                    this.BannerOrderField = value;
                    this.RaisePropertyChanged("BannerOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((this.TargetIdField.Equals(value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.ElectronicInformationTypes", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsElectronicInformationTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notas_Medicas = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sitios_Web = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abstracts = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Banners = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Atlas = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Articulos_Cientificos = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Refencias_Medicas = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Promociones = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Guias_de_Practica_Clinica = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Videos_Interes = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dietas_Hombres = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dietas_Mujeres = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElectronicInformationByTargetInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ElectronicInformationByTargetInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElectronicDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ElectronicIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElectronicTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HTMLFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte InfoTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PublishedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolutionBaseUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElectronicDescription {
            get {
                return this.ElectronicDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ElectronicDescriptionField, value) != true)) {
                    this.ElectronicDescriptionField = value;
                    this.RaisePropertyChanged("ElectronicDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ElectronicId {
            get {
                return this.ElectronicIdField;
            }
            set {
                if ((this.ElectronicIdField.Equals(value) != true)) {
                    this.ElectronicIdField = value;
                    this.RaisePropertyChanged("ElectronicId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElectronicTitle {
            get {
                return this.ElectronicTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ElectronicTitleField, value) != true)) {
                    this.ElectronicTitleField = value;
                    this.RaisePropertyChanged("ElectronicTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HTMLFileName {
            get {
                return this.HTMLFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HTMLFileNameField, value) != true)) {
                    this.HTMLFileNameField = value;
                    this.RaisePropertyChanged("HTMLFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfDescription {
            get {
                return this.InfDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InfDescriptionField, value) != true)) {
                    this.InfDescriptionField = value;
                    this.RaisePropertyChanged("InfDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte InfoTypeId {
            get {
                return this.InfoTypeIdField;
            }
            set {
                if ((this.InfoTypeIdField.Equals(value) != true)) {
                    this.InfoTypeIdField = value;
                    this.RaisePropertyChanged("InfoTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PublishedDate {
            get {
                return this.PublishedDateField;
            }
            set {
                if ((this.PublishedDateField.Equals(value) != true)) {
                    this.PublishedDateField = value;
                    this.RaisePropertyChanged("PublishedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolutionBaseUrl {
            get {
                return this.ResolutionBaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolutionBaseUrlField, value) != true)) {
                    this.ResolutionBaseUrlField = value;
                    this.RaisePropertyChanged("ResolutionBaseUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.Sections", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsSections : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INDICES = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MENUS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOVEDADES = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPCIONES = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RESULTADOS = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VINCULOS_DE_INTERES = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BANNERS = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOTICIAS = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PLMONLINE = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EDITORIAL = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SERVICIOS = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ATLAS = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ARTICULOS_CIENTIFICOS = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ESQUEMAS = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FARMACIAS = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REPRESENTANTES = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REFERENCIAS_MEDICAS = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BUSCADOR = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CALCULADORAS = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROGRAMAS = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONFIGURACION = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EVENTOS = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BUSCADOR_REGIONAL = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GUIAS_CLINICAS = 24,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalogs.EventTypes", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    public enum CatalogsEventTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Congresos = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventsDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class EventsDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AddressIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> EventDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinalDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InitialDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LadaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneTwoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuburbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AddressId {
            get {
                return this.AddressIdField;
            }
            set {
                if ((this.AddressIdField.Equals(value) != true)) {
                    this.AddressIdField = value;
                    this.RaisePropertyChanged("AddressId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> EventDistance {
            get {
                return this.EventDistanceField;
            }
            set {
                if ((this.EventDistanceField.Equals(value) != true)) {
                    this.EventDistanceField = value;
                    this.RaisePropertyChanged("EventDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ext {
            get {
                return this.ExtField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtField, value) != true)) {
                    this.ExtField = value;
                    this.RaisePropertyChanged("Ext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinalDate {
            get {
                return this.FinalDateField;
            }
            set {
                if ((this.FinalDateField.Equals(value) != true)) {
                    this.FinalDateField = value;
                    this.RaisePropertyChanged("FinalDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InitialDate {
            get {
                return this.InitialDateField;
            }
            set {
                if ((this.InitialDateField.Equals(value) != true)) {
                    this.InitialDateField = value;
                    this.RaisePropertyChanged("InitialDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalNumber {
            get {
                return this.InternalNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalNumberField, value) != true)) {
                    this.InternalNumberField = value;
                    this.RaisePropertyChanged("InternalNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lada {
            get {
                return this.LadaField;
            }
            set {
                if ((object.ReferenceEquals(this.LadaField, value) != true)) {
                    this.LadaField = value;
                    this.RaisePropertyChanged("Lada");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Organizer {
            get {
                return this.OrganizerField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerField, value) != true)) {
                    this.OrganizerField = value;
                    this.RaisePropertyChanged("Organizer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneOne {
            get {
                return this.PhoneOneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneOneField, value) != true)) {
                    this.PhoneOneField = value;
                    this.RaisePropertyChanged("PhoneOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneTwo {
            get {
                return this.PhoneTwoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneTwoField, value) != true)) {
                    this.PhoneTwoField = value;
                    this.RaisePropertyChanged("PhoneTwo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfessionName {
            get {
                return this.ProfessionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionNameField, value) != true)) {
                    this.ProfessionNameField = value;
                    this.RaisePropertyChanged("ProfessionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Site {
            get {
                return this.SiteField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteField, value) != true)) {
                    this.SiteField = value;
                    this.RaisePropertyChanged("Site");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialityName {
            get {
                return this.SpecialityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialityNameField, value) != true)) {
                    this.SpecialityNameField = value;
                    this.RaisePropertyChanged("SpecialityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suburb {
            get {
                return this.SuburbField;
            }
            set {
                if ((object.ReferenceEquals(this.SuburbField, value) != true)) {
                    this.SuburbField = value;
                    this.RaisePropertyChanged("Suburb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((this.TypeIdField.Equals(value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebPage {
            get {
                return this.WebPageField;
            }
            set {
                if ((object.ReferenceEquals(this.WebPageField, value) != true)) {
                    this.WebPageField = value;
                    this.RaisePropertyChanged("WebPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventCategoryDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class EventCategoryDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> EventsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> Events {
            get {
                return this.EventsField;
            }
            set {
                if ((object.ReferenceEquals(this.EventsField, value) != true)) {
                    this.EventsField = value;
                    this.RaisePropertyChanged("Events");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MedicalCalculatorsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class MedicalCalculatorsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorFormulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CalculatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculatorReferencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SQLSyntaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebPageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorDescription {
            get {
                return this.CalculatorDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorDescriptionField, value) != true)) {
                    this.CalculatorDescriptionField = value;
                    this.RaisePropertyChanged("CalculatorDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorFormula {
            get {
                return this.CalculatorFormulaField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorFormulaField, value) != true)) {
                    this.CalculatorFormulaField = value;
                    this.RaisePropertyChanged("CalculatorFormula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CalculatorId {
            get {
                return this.CalculatorIdField;
            }
            set {
                if ((this.CalculatorIdField.Equals(value) != true)) {
                    this.CalculatorIdField = value;
                    this.RaisePropertyChanged("CalculatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorName {
            get {
                return this.CalculatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorNameField, value) != true)) {
                    this.CalculatorNameField = value;
                    this.RaisePropertyChanged("CalculatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatorReferences {
            get {
                return this.CalculatorReferencesField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatorReferencesField, value) != true)) {
                    this.CalculatorReferencesField = value;
                    this.RaisePropertyChanged("CalculatorReferences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SQLSyntax {
            get {
                return this.SQLSyntaxField;
            }
            set {
                if ((object.ReferenceEquals(this.SQLSyntaxField, value) != true)) {
                    this.SQLSyntaxField = value;
                    this.RaisePropertyChanged("SQLSyntax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebPage {
            get {
                return this.WebPageField;
            }
            set {
                if ((object.ReferenceEquals(this.WebPageField, value) != true)) {
                    this.WebPageField = value;
                    this.RaisePropertyChanged("WebPage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AgentsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class AgentsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneTwoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AgentId {
            get {
                return this.AgentIdField;
            }
            set {
                if ((this.AgentIdField.Equals(value) != true)) {
                    this.AgentIdField = value;
                    this.RaisePropertyChanged("AgentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneOne {
            get {
                return this.PhoneOneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneOneField, value) != true)) {
                    this.PhoneOneField = value;
                    this.RaisePropertyChanged("PhoneOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneTwo {
            get {
                return this.PhoneTwoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneTwoField, value) != true)) {
                    this.PhoneTwoField = value;
                    this.RaisePropertyChanged("PhoneTwo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondLastName {
            get {
                return this.SecondLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondLastNameField, value) != true)) {
                    this.SecondLastNameField = value;
                    this.RaisePropertyChanged("SecondLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((this.TypeIdField.Equals(value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AgentDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class AgentDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> PharmacyListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneTwoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> PrivateHospitalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> PublicHospitalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AgentId {
            get {
                return this.AgentIdField;
            }
            set {
                if ((this.AgentIdField.Equals(value) != true)) {
                    this.AgentIdField = value;
                    this.RaisePropertyChanged("AgentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> PharmacyList {
            get {
                return this.PharmacyListField;
            }
            set {
                if ((object.ReferenceEquals(this.PharmacyListField, value) != true)) {
                    this.PharmacyListField = value;
                    this.RaisePropertyChanged("PharmacyList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneOne {
            get {
                return this.PhoneOneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneOneField, value) != true)) {
                    this.PhoneOneField = value;
                    this.RaisePropertyChanged("PhoneOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneTwo {
            get {
                return this.PhoneTwoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneTwoField, value) != true)) {
                    this.PhoneTwoField = value;
                    this.RaisePropertyChanged("PhoneTwo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> PrivateHospitals {
            get {
                return this.PrivateHospitalsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateHospitalsField, value) != true)) {
                    this.PrivateHospitalsField = value;
                    this.RaisePropertyChanged("PrivateHospitals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> PublicHospitals {
            get {
                return this.PublicHospitalsField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicHospitalsField, value) != true)) {
                    this.PublicHospitalsField = value;
                    this.RaisePropertyChanged("PublicHospitals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondLastName {
            get {
                return this.SecondLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondLastNameField, value) != true)) {
                    this.SecondLastNameField = value;
                    this.RaisePropertyChanged("SecondLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((this.TypeIdField.Equals(value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BranchDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class BranchDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AddressIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttentionSchedulesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BranchActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> BranchDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BranchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DisplayPharmaciesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HomeServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LadaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogoDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneTwoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuburbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AddressId {
            get {
                return this.AddressIdField;
            }
            set {
                if ((this.AddressIdField.Equals(value) != true)) {
                    this.AddressIdField = value;
                    this.RaisePropertyChanged("AddressId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttentionSchedules {
            get {
                return this.AttentionSchedulesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttentionSchedulesField, value) != true)) {
                    this.AttentionSchedulesField = value;
                    this.RaisePropertyChanged("AttentionSchedules");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BranchActive {
            get {
                return this.BranchActiveField;
            }
            set {
                if ((this.BranchActiveField.Equals(value) != true)) {
                    this.BranchActiveField = value;
                    this.RaisePropertyChanged("BranchActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BranchDistance {
            get {
                return this.BranchDistanceField;
            }
            set {
                if ((this.BranchDistanceField.Equals(value) != true)) {
                    this.BranchDistanceField = value;
                    this.RaisePropertyChanged("BranchDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BranchId {
            get {
                return this.BranchIdField;
            }
            set {
                if ((this.BranchIdField.Equals(value) != true)) {
                    this.BranchIdField = value;
                    this.RaisePropertyChanged("BranchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BranchKey {
            get {
                return this.BranchKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchKeyField, value) != true)) {
                    this.BranchKeyField = value;
                    this.RaisePropertyChanged("BranchKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BranchName {
            get {
                return this.BranchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchNameField, value) != true)) {
                    this.BranchNameField = value;
                    this.RaisePropertyChanged("BranchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DisplayPharmacies {
            get {
                return this.DisplayPharmaciesField;
            }
            set {
                if ((this.DisplayPharmaciesField.Equals(value) != true)) {
                    this.DisplayPharmaciesField = value;
                    this.RaisePropertyChanged("DisplayPharmacies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ext {
            get {
                return this.ExtField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtField, value) != true)) {
                    this.ExtField = value;
                    this.RaisePropertyChanged("Ext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HomeService {
            get {
                return this.HomeServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.HomeServiceField, value) != true)) {
                    this.HomeServiceField = value;
                    this.RaisePropertyChanged("HomeService");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalNumber {
            get {
                return this.InternalNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalNumberField, value) != true)) {
                    this.InternalNumberField = value;
                    this.RaisePropertyChanged("InternalNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lada {
            get {
                return this.LadaField;
            }
            set {
                if ((object.ReferenceEquals(this.LadaField, value) != true)) {
                    this.LadaField = value;
                    this.RaisePropertyChanged("Lada");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logo {
            get {
                return this.LogoField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoField, value) != true)) {
                    this.LogoField = value;
                    this.RaisePropertyChanged("Logo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogoDetail {
            get {
                return this.LogoDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoDetailField, value) != true)) {
                    this.LogoDetailField = value;
                    this.RaisePropertyChanged("LogoDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneOne {
            get {
                return this.PhoneOneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneOneField, value) != true)) {
                    this.PhoneOneField = value;
                    this.RaisePropertyChanged("PhoneOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneTwo {
            get {
                return this.PhoneTwoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneTwoField, value) != true)) {
                    this.PhoneTwoField = value;
                    this.RaisePropertyChanged("PhoneTwo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suburb {
            get {
                return this.SuburbField;
            }
            set {
                if ((object.ReferenceEquals(this.SuburbField, value) != true)) {
                    this.SuburbField = value;
                    this.RaisePropertyChanged("Suburb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebPage {
            get {
                return this.WebPageField;
            }
            set {
                if ((object.ReferenceEquals(this.WebPageField, value) != true)) {
                    this.WebPageField = value;
                    this.RaisePropertyChanged("WebPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyClientsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class CompanyClientsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CCTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CCTypeId {
            get {
                return this.CCTypeIdField;
            }
            set {
                if ((this.CCTypeIdField.Equals(value) != true)) {
                    this.CCTypeIdField = value;
                    this.RaisePropertyChanged("CCTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PharmacyProductsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class PharmacyProductsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActiveSubstancesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndicationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LaboratoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PharmaceuticalFormsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PresentationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PresentationContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActiveSubstances {
            get {
                return this.ActiveSubstancesField;
            }
            set {
                if ((object.ReferenceEquals(this.ActiveSubstancesField, value) != true)) {
                    this.ActiveSubstancesField = value;
                    this.RaisePropertyChanged("ActiveSubstances");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Available {
            get {
                return this.AvailableField;
            }
            set {
                if ((this.AvailableField.Equals(value) != true)) {
                    this.AvailableField = value;
                    this.RaisePropertyChanged("Available");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseUrl {
            get {
                return this.BaseUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseUrlField, value) != true)) {
                    this.BaseUrlField = value;
                    this.RaisePropertyChanged("BaseUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyClientId {
            get {
                return this.CompanyClientIdField;
            }
            set {
                if ((this.CompanyClientIdField.Equals(value) != true)) {
                    this.CompanyClientIdField = value;
                    this.RaisePropertyChanged("CompanyClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indications {
            get {
                return this.IndicationsField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicationsField, value) != true)) {
                    this.IndicationsField = value;
                    this.RaisePropertyChanged("Indications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Laboratory {
            get {
                return this.LaboratoryField;
            }
            set {
                if ((object.ReferenceEquals(this.LaboratoryField, value) != true)) {
                    this.LaboratoryField = value;
                    this.RaisePropertyChanged("Laboratory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logo {
            get {
                return this.LogoField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoField, value) != true)) {
                    this.LogoField = value;
                    this.RaisePropertyChanged("Logo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PharmaceuticalForms {
            get {
                return this.PharmaceuticalFormsField;
            }
            set {
                if ((object.ReferenceEquals(this.PharmaceuticalFormsField, value) != true)) {
                    this.PharmaceuticalFormsField = value;
                    this.RaisePropertyChanged("PharmaceuticalForms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Presentation {
            get {
                return this.PresentationField;
            }
            set {
                if ((object.ReferenceEquals(this.PresentationField, value) != true)) {
                    this.PresentationField = value;
                    this.RaisePropertyChanged("Presentation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PresentationContent {
            get {
                return this.PresentationContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PresentationContentField, value) != true)) {
                    this.PresentationContentField = value;
                    this.RaisePropertyChanged("PresentationContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((this.ProductIdField.Equals(value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MobileClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class MobileClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AddedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompleteNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EntrySourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions ProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionalLicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateShortNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AddedDate {
            get {
                return this.AddedDateField;
            }
            set {
                if ((this.AddedDateField.Equals(value) != true)) {
                    this.AddedDateField = value;
                    this.RaisePropertyChanged("AddedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompleteName {
            get {
                return this.CompleteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompleteNameField, value) != true)) {
                    this.CompleteNameField = value;
                    this.RaisePropertyChanged("CompleteName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EntrySourceId {
            get {
                return this.EntrySourceIdField;
            }
            set {
                if ((this.EntrySourceIdField.Equals(value) != true)) {
                    this.EntrySourceIdField = value;
                    this.RaisePropertyChanged("EntrySourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherProfession {
            get {
                return this.OtherProfessionField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherProfessionField, value) != true)) {
                    this.OtherProfessionField = value;
                    this.RaisePropertyChanged("OtherProfession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions Profession {
            get {
                return this.ProfessionField;
            }
            set {
                if ((this.ProfessionField.Equals(value) != true)) {
                    this.ProfessionField = value;
                    this.RaisePropertyChanged("Profession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfessionalLicense {
            get {
                return this.ProfessionalLicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionalLicenseField, value) != true)) {
                    this.ProfessionalLicenseField = value;
                    this.RaisePropertyChanged("ProfessionalLicense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondLastName {
            get {
                return this.SecondLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondLastNameField, value) != true)) {
                    this.SecondLastNameField = value;
                    this.RaisePropertyChanged("SecondLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateShortName {
            get {
                return this.StateShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateShortNameField, value) != true)) {
                    this.StateShortNameField = value;
                    this.RaisePropertyChanged("StateShortName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProfessionClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ProfessionClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherProfessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ProfessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessionalLicenseField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherProfession {
            get {
                return this.OtherProfessionField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherProfessionField, value) != true)) {
                    this.OtherProfessionField = value;
                    this.RaisePropertyChanged("OtherProfession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ProfessionId {
            get {
                return this.ProfessionIdField;
            }
            set {
                if ((this.ProfessionIdField.Equals(value) != true)) {
                    this.ProfessionIdField = value;
                    this.RaisePropertyChanged("ProfessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfessionalLicense {
            get {
                return this.ProfessionalLicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessionalLicenseField, value) != true)) {
                    this.ProfessionalLicenseField = value;
                    this.RaisePropertyChanged("ProfessionalLicense");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialityClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class SpecialityClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherSpecialityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SpecialityIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherSpeciality {
            get {
                return this.OtherSpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherSpecialityField, value) != true)) {
                    this.OtherSpecialityField = value;
                    this.RaisePropertyChanged("OtherSpeciality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SpecialityId {
            get {
                return this.SpecialityIdField;
            }
            set {
                if ((this.SpecialityIdField.Equals(value) != true)) {
                    this.SpecialityIdField = value;
                    this.RaisePropertyChanged("SpecialityId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class WebClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeId {
            get {
                return this.CodeIdField;
            }
            set {
                if ((this.CodeIdField.Equals(value) != true)) {
                    this.CodeIdField = value;
                    this.RaisePropertyChanged("CodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeString {
            get {
                return this.CodeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeStringField, value) != true)) {
                    this.CodeStringField = value;
                    this.RaisePropertyChanged("CodeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResidenceLevelsInfo", Namespace="http://schemas.datacontract.org/2004/07/PLMClientsBusinessEntities")]
    [System.SerializableAttribute()]
    public partial class ResidenceLevelsInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> ResidenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResidenceKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResidenceNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> ResidenceId {
            get {
                return this.ResidenceIdField;
            }
            set {
                if ((this.ResidenceIdField.Equals(value) != true)) {
                    this.ResidenceIdField = value;
                    this.RaisePropertyChanged("ResidenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResidenceKey {
            get {
                return this.ResidenceKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ResidenceKeyField, value) != true)) {
                    this.ResidenceKeyField = value;
                    this.RaisePropertyChanged("ResidenceKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResidenceName {
            get {
                return this.ResidenceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResidenceNameField, value) != true)) {
                    this.ResidenceNameField = value;
                    this.RaisePropertyChanged("ResidenceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PLMClientsEngine.IPLMClients")]
    public interface IPLMClients {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/uploadDownloadClient", ReplyAction="http://tempuri.org/IPLMClients/uploadDownloadClientResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo uploadDownloadClient(string license, string hwidentifier);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/uploadDownloadClient", ReplyAction="http://tempuri.org/IPLMClients/uploadDownloadClientResponse")]
        System.IAsyncResult BeginuploadDownloadClient(string license, string hwidentifier, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo EnduploadDownloadClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveMobileClient", ReplyAction="http://tempuri.org/IPLMClients/saveMobileClientResponse")]
        string saveMobileClient(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveMobileClient", ReplyAction="http://tempuri.org/IPLMClients/saveMobileClientResponse")]
        System.IAsyncResult BeginsaveMobileClient(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndsaveMobileClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/updateMobileClient", ReplyAction="http://tempuri.org/IPLMClients/updateMobileClientResponse")]
        void updateMobileClient(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string residenceKey, string country, string state, string IMEI);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/updateMobileClient", ReplyAction="http://tempuri.org/IPLMClients/updateMobileClientResponse")]
        System.IAsyncResult BeginupdateMobileClient(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndupdateMobileClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveMobileClientByLicense", ReplyAction="http://tempuri.org/IPLMClients/saveMobileClientByLicenseResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo saveMobileClientByLicense(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveMobileClientByLicense", ReplyAction="http://tempuri.org/IPLMClients/saveMobileClientByLicenseResponse")]
        System.IAsyncResult BeginsaveMobileClientByLicense(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo EndsaveMobileClientByLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveMobileClientByAgeRange", ReplyAction="http://tempuri.org/IPLMClients/saveMobileClientByAgeRangeResponse")]
        string saveMobileClientByAgeRange(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    string age);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveMobileClientByAgeRange", ReplyAction="http://tempuri.org/IPLMClients/saveMobileClientByAgeRangeResponse")]
        System.IAsyncResult BeginsaveMobileClientByAgeRange(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    string age, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndsaveMobileClientByAgeRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/updateMobileClientByAgeRange", ReplyAction="http://tempuri.org/IPLMClients/updateMobileClientByAgeRangeResponse")]
        void updateMobileClientByAgeRange(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    string age);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/updateMobileClientByAgeRange", ReplyAction="http://tempuri.org/IPLMClients/updateMobileClientByAgeRangeResponse")]
        System.IAsyncResult BeginupdateMobileClientByAgeRange(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    string age, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndupdateMobileClientByAgeRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/savePharmacyUser", ReplyAction="http://tempuri.org/IPLMClients/savePharmacyUserResponse")]
        string savePharmacyUser(string codePrefix, string firstName, string lastName, string userName, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/savePharmacyUser", ReplyAction="http://tempuri.org/IPLMClients/savePharmacyUserResponse")]
        System.IAsyncResult BeginsavePharmacyUser(string codePrefix, string firstName, string lastName, string userName, string userPassword, System.AsyncCallback callback, object asyncState);
        
        string EndsavePharmacyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveWebClient", ReplyAction="http://tempuri.org/IPLMClients/saveWebClientResponse")]
        string saveWebClient(
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    string code, 
                    int professionId, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveWebClient", ReplyAction="http://tempuri.org/IPLMClients/saveWebClientResponse")]
        System.IAsyncResult BeginsaveWebClient(
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    string code, 
                    int professionId, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndsaveWebClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/updateWebClient", ReplyAction="http://tempuri.org/IPLMClients/updateWebClientResponse")]
        void updateWebClient(
                    int clientId, 
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    int profession, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/updateWebClient", ReplyAction="http://tempuri.org/IPLMClients/updateWebClientResponse")]
        System.IAsyncResult BeginupdateWebClient(
                    int clientId, 
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    int profession, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndupdateWebClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCalculatorDetail", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorDetailResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo getCalculatorDetail(int calculatorId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCalculatorDetail", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorDetailResponse")]
        System.IAsyncResult BegingetCalculatorDetail(int calculatorId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo EndgetCalculatorDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getResultByCalculator", ReplyAction="http://tempuri.org/IPLMClients/getResultByCalculatorResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo getResultByCalculator(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getResultByCalculator", ReplyAction="http://tempuri.org/IPLMClients/getResultByCalculatorResponse")]
        System.IAsyncResult BegingetResultByCalculator(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo EndgetResultByCalculator(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getQuestionnairesByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnairesByPrefixResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> getQuestionnairesByPrefix(string prefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getQuestionnairesByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnairesByPrefixResponse")]
        System.IAsyncResult BegingetQuestionnairesByPrefix(string prefix, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> EndgetQuestionnairesByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getQuestionnairesBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnairesBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> getQuestionnairesBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getQuestionnairesBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnairesBySpecialityResponse")]
        System.IAsyncResult BegingetQuestionnairesBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> EndgetQuestionnairesBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getQuestionnairesByPrefixBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnairesByPrefixBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> getQuestionnairesByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getQuestionnairesByPrefixBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnairesByPrefixBySpecialityResponse")]
        System.IAsyncResult BegingetQuestionnairesByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> EndgetQuestionnairesByPrefixBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getQuestionnaireDetail", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnaireDetailResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo getQuestionnaireDetail(int questionnaireId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getQuestionnaireDetail", ReplyAction="http://tempuri.org/IPLMClients/getQuestionnaireDetailResponse")]
        System.IAsyncResult BegingetQuestionnaireDetail(int questionnaireId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo EndgetQuestionnaireDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getSummariesByOption", ReplyAction="http://tempuri.org/IPLMClients/getSummariesByOptionResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo> getSummariesByOption(int questionnaireId, int optionId, byte order);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getSummariesByOption", ReplyAction="http://tempuri.org/IPLMClients/getSummariesByOptionResponse")]
        System.IAsyncResult BegingetSummariesByOption(int questionnaireId, int optionId, byte order, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo> EndgetSummariesByOption(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/addPharmacyUserConnection", ReplyAction="http://tempuri.org/IPLMClients/addPharmacyUserConnectionResponse")]
        int addPharmacyUserConnection(string code, string ip, System.DateTime dateConnection, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/addPharmacyUserConnection", ReplyAction="http://tempuri.org/IPLMClients/addPharmacyUserConnectionResponse")]
        System.IAsyncResult BeginaddPharmacyUserConnection(string code, string ip, System.DateTime dateConnection, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session, System.AsyncCallback callback, object asyncState);
        
        int EndaddPharmacyUserConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/addUserConnection", ReplyAction="http://tempuri.org/IPLMClients/addUserConnectionResponse")]
        int addUserConnection(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/addUserConnection", ReplyAction="http://tempuri.org/IPLMClients/addUserConnectionResponse")]
        System.IAsyncResult BeginaddUserConnection(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo, System.AsyncCallback callback, object asyncState);
        
        int EndaddUserConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getUserConnection", ReplyAction="http://tempuri.org/IPLMClients/getUserConnectionResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo getUserConnection(int userConnectionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getUserConnection", ReplyAction="http://tempuri.org/IPLMClients/getUserConnectionResponse")]
        System.IAsyncResult BegingetUserConnection(int userConnectionId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo EndgetUserConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getPharmacyUser", ReplyAction="http://tempuri.org/IPLMClients/getPharmacyUserResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo getPharmacyUser(string userName, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getPharmacyUser", ReplyAction="http://tempuri.org/IPLMClients/getPharmacyUserResponse")]
        System.IAsyncResult BegingetPharmacyUser(string userName, string userPassword, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo EndgetPharmacyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/checkSession", ReplyAction="http://tempuri.org/IPLMClients/checkSessionResponse")]
        bool checkSession(string code, int sessionTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/checkSession", ReplyAction="http://tempuri.org/IPLMClients/checkSessionResponse")]
        System.IAsyncResult BegincheckSession(string code, int sessionTime, System.AsyncCallback callback, object asyncState);
        
        bool EndcheckSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getPharmacyUserByCode", ReplyAction="http://tempuri.org/IPLMClients/getPharmacyUserByCodeResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo getPharmacyUserByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getPharmacyUserByCode", ReplyAction="http://tempuri.org/IPLMClients/getPharmacyUserByCodeResponse")]
        System.IAsyncResult BegingetPharmacyUserByCode(string code, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo EndgetPharmacyUserByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getWebApplicationUserByCode", ReplyAction="http://tempuri.org/IPLMClients/getWebApplicationUserByCodeResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo getWebApplicationUserByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getWebApplicationUserByCode", ReplyAction="http://tempuri.org/IPLMClients/getWebApplicationUserByCodeResponse")]
        System.IAsyncResult BegingetWebApplicationUserByCode(string code, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo EndgetWebApplicationUserByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getContact", ReplyAction="http://tempuri.org/IPLMClients/getContactResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo getContact(string country);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getContact", ReplyAction="http://tempuri.org/IPLMClients/getContactResponse")]
        System.IAsyncResult BegingetContact(string country, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo EndgetContact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getTerms", ReplyAction="http://tempuri.org/IPLMClients/getTermsResponse")]
        string getTerms();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getTerms", ReplyAction="http://tempuri.org/IPLMClients/getTermsResponse")]
        System.IAsyncResult BegingetTerms(System.AsyncCallback callback, object asyncState);
        
        string EndgetTerms(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCountries", ReplyAction="http://tempuri.org/IPLMClients/getCountriesResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo> getCountries();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCountries", ReplyAction="http://tempuri.org/IPLMClients/getCountriesResponse")]
        System.IAsyncResult BegingetCountries(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo> EndgetCountries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCountry", ReplyAction="http://tempuri.org/IPLMClients/getCountryResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo getCountry(int countryId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCountry", ReplyAction="http://tempuri.org/IPLMClients/getCountryResponse")]
        System.IAsyncResult BegingetCountry(int countryId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo EndgetCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getStateByCountry", ReplyAction="http://tempuri.org/IPLMClients/getStateByCountryResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> getStateByCountry(byte countryId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getStateByCountry", ReplyAction="http://tempuri.org/IPLMClients/getStateByCountryResponse")]
        System.IAsyncResult BegingetStateByCountry(byte countryId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> EndgetStateByCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getState", ReplyAction="http://tempuri.org/IPLMClients/getStateResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo getState(int stateId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getState", ReplyAction="http://tempuri.org/IPLMClients/getStateResponse")]
        System.IAsyncResult BegingetState(int stateId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo EndgetState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getEditionByCode", ReplyAction="http://tempuri.org/IPLMClients/getEditionByCodeResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo getEditionByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getEditionByCode", ReplyAction="http://tempuri.org/IPLMClients/getEditionByCodeResponse")]
        System.IAsyncResult BegingetEditionByCode(string code, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo EndgetEditionByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCountriesByTarget", ReplyAction="http://tempuri.org/IPLMClients/getCountriesByTargetResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo> getCountriesByTarget(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCountriesByTarget", ReplyAction="http://tempuri.org/IPLMClients/getCountriesByTargetResponse")]
        System.IAsyncResult BegingetCountriesByTarget(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo> EndgetCountriesByTarget(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getPhysicalActivitiesByCalculatorResult", ReplyAction="http://tempuri.org/IPLMClients/getPhysicalActivitiesByCalculatorResultResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo> getPhysicalActivitiesByCalculatorResult(int calculatorId, int resultId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getPhysicalActivitiesByCalculatorResult", ReplyAction="http://tempuri.org/IPLMClients/getPhysicalActivitiesByCalculatorResultResponse")]
        System.IAsyncResult BegingetPhysicalActivitiesByCalculatorResult(int calculatorId, int resultId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo> EndgetPhysicalActivitiesByCalculatorResult(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveClientInfo", ReplyAction="http://tempuri.org/IPLMClients/saveClientInfoResponse")]
        string saveClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveClientInfo", ReplyAction="http://tempuri.org/IPLMClients/saveClientInfoResponse")]
        System.IAsyncResult BeginsaveClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses, System.AsyncCallback callback, object asyncState);
        
        string EndsaveClientInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/updateClientInfo", ReplyAction="http://tempuri.org/IPLMClients/updateClientInfoResponse")]
        void updateClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/updateClientInfo", ReplyAction="http://tempuri.org/IPLMClients/updateClientInfoResponse")]
        System.IAsyncResult BeginupdateClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses, System.AsyncCallback callback, object asyncState);
        
        void EndupdateClientInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveClient", ReplyAction="http://tempuri.org/IPLMClients/saveClientResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo saveClient(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string hwIdentifier, string licenseKey, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveClient", ReplyAction="http://tempuri.org/IPLMClients/saveClientResponse")]
        System.IAsyncResult BeginsaveClient(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo EndsaveClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/updateClient", ReplyAction="http://tempuri.org/IPLMClients/updateClientResponse")]
        void updateClient(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/updateClient", ReplyAction="http://tempuri.org/IPLMClients/updateClientResponse")]
        System.IAsyncResult BeginupdateClient(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state, System.AsyncCallback callback, object asyncState);
        
        void EndupdateClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/saveDownloadClient", ReplyAction="http://tempuri.org/IPLMClients/saveDownloadClientResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo saveDownloadClient(string firstName, string lastName, string slastName, string state, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string codePrefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/saveDownloadClient", ReplyAction="http://tempuri.org/IPLMClients/saveDownloadClientResponse")]
        System.IAsyncResult BeginsaveDownloadClient(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string state, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string country, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    string codePrefix, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo EndsaveDownloadClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCodeByIMEI", ReplyAction="http://tempuri.org/IPLMClients/getCodeByIMEIResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByIMEI(string IMEI);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCodeByIMEI", ReplyAction="http://tempuri.org/IPLMClients/getCodeByIMEIResponse")]
        System.IAsyncResult BegingetCodeByIMEI(string IMEI, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByIMEI(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCodeByIMEIByISBN", ReplyAction="http://tempuri.org/IPLMClients/getCodeByIMEIByISBNResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByIMEIByISBN(string IMEI, string ISBN);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCodeByIMEIByISBN", ReplyAction="http://tempuri.org/IPLMClients/getCodeByIMEIByISBNResponse")]
        System.IAsyncResult BegingetCodeByIMEIByISBN(string IMEI, string ISBN, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByIMEIByISBN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCodeByIMEIByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCodeByIMEIByPrefixResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByIMEIByPrefix(string IMEI, string prefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCodeByIMEIByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCodeByIMEIByPrefixResponse")]
        System.IAsyncResult BegingetCodeByIMEIByPrefix(string IMEI, string prefix, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByIMEIByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/validCode", ReplyAction="http://tempuri.org/IPLMClients/validCodeResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo validCode(string codeString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/validCode", ReplyAction="http://tempuri.org/IPLMClients/validCodeResponse")]
        System.IAsyncResult BeginvalidCode(string codeString, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo EndvalidCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/activateCode", ReplyAction="http://tempuri.org/IPLMClients/activateCodeResponse")]
        void activateCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/activateCode", ReplyAction="http://tempuri.org/IPLMClients/activateCodeResponse")]
        System.IAsyncResult BeginactivateCode(string code, System.AsyncCallback callback, object asyncState);
        
        void EndactivateCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/checkClientCode", ReplyAction="http://tempuri.org/IPLMClients/checkClientCodeResponse")]
        bool checkClientCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/checkClientCode", ReplyAction="http://tempuri.org/IPLMClients/checkClientCodeResponse")]
        System.IAsyncResult BegincheckClientCode(string code, System.AsyncCallback callback, object asyncState);
        
        bool EndcheckClientCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCodeByEmailByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCodeByEmailByPrefixResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByEmailByPrefix(string email, string prefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCodeByEmailByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCodeByEmailByPrefixResponse")]
        System.IAsyncResult BegingetCodeByEmailByPrefix(string email, string prefix, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByEmailByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/insertComment", ReplyAction="http://tempuri.org/IPLMClients/insertCommentResponse")]
        int insertComment(byte commentTypeId, byte branchId, byte businessUnitId, int distributionId, int prefixId, byte targetId, string content);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/insertComment", ReplyAction="http://tempuri.org/IPLMClients/insertCommentResponse")]
        System.IAsyncResult BegininsertComment(byte commentTypeId, byte branchId, byte businessUnitId, int distributionId, int prefixId, byte targetId, string content, System.AsyncCallback callback, object asyncState);
        
        int EndinsertComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/updateComment", ReplyAction="http://tempuri.org/IPLMClients/updateCommentResponse")]
        void updateComment(int commentId, System.Nullable<System.DateTime> sentDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/updateComment", ReplyAction="http://tempuri.org/IPLMClients/updateCommentResponse")]
        System.IAsyncResult BeginupdateComment(int commentId, System.Nullable<System.DateTime> sentDate, System.AsyncCallback callback, object asyncState);
        
        void EndupdateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getComment", ReplyAction="http://tempuri.org/IPLMClients/getCommentResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo getComment(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getComment", ReplyAction="http://tempuri.org/IPLMClients/getCommentResponse")]
        System.IAsyncResult BegingetComment(int commentId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo EndgetComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCommentTypesByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCommentTypesByPrefixResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo> getCommentTypesByPrefix(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string prefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCommentTypesByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCommentTypesByPrefixResponse")]
        System.IAsyncResult BegingetCommentTypesByPrefix(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string prefix, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo> EndgetCommentTypesByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getToolsByCode", ReplyAction="http://tempuri.org/IPLMClients/getToolsByCodeResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo> getToolsByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getToolsByCode", ReplyAction="http://tempuri.org/IPLMClients/getToolsByCodeResponse")]
        System.IAsyncResult BegingetToolsByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo> EndgetToolsByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getBannersByCode", ReplyAction="http://tempuri.org/IPLMClients/getBannersByCodeResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo> getBannersByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getBannersByCode", ReplyAction="http://tempuri.org/IPLMClients/getBannersByCodeResponse")]
        System.IAsyncResult BegingetBannersByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo> EndgetBannersByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getInformationByType", ReplyAction="http://tempuri.org/IPLMClients/getInformationByTypeResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByType(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType, string country);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getInformationByType", ReplyAction="http://tempuri.org/IPLMClients/getInformationByTypeResponse")]
        System.IAsyncResult BegingetInformationByType(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType, string country, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getInformationByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefix(string prefix, string country);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getInformationByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixResponse")]
        System.IAsyncResult BegingetInformationByPrefix(string prefix, string country, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getInformationByPrefixByTarget", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixByTargetResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefixByTarget(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, string country);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getInformationByPrefixByTarget", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixByTargetResponse")]
        System.IAsyncResult BegingetInformationByPrefixByTarget(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, string country, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefixByTarget(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getInformationByPrefixByType", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixByTypeResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefixByType(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getInformationByPrefixByType", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixByTypeResponse")]
        System.IAsyncResult BegingetInformationByPrefixByType(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefixByType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getInformationBySection", ReplyAction="http://tempuri.org/IPLMClients/getInformationBySectionResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationBySection(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section, string resolutionKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getInformationBySection", ReplyAction="http://tempuri.org/IPLMClients/getInformationBySectionResponse")]
        System.IAsyncResult BegingetInformationBySection(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section, string resolutionKey, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationBySection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getInformationByPrefixByTypeBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixByTypeBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefixByTypeBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, int specialityId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getInformationByPrefixByTypeBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getInformationByPrefixByTypeBySpecialityResponse")]
        System.IAsyncResult BegingetInformationByPrefixByTypeBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, int specialityId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefixByTypeBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getEventsByTypeBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getEventsByTypeBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> getEventsByTypeBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getEventsByTypeBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getEventsByTypeBySpecialityResponse")]
        System.IAsyncResult BegingetEventsByTypeBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> EndgetEventsByTypeBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getEventCategoriesByState", ReplyAction="http://tempuri.org/IPLMClients/getEventCategoriesByStateResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo> getEventCategoriesByState(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getEventCategoriesByState", ReplyAction="http://tempuri.org/IPLMClients/getEventCategoriesByStateResponse")]
        System.IAsyncResult BegingetEventCategoriesByState(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, string latitude, string longitude, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo> EndgetEventCategoriesByState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getOtherEventStates", ReplyAction="http://tempuri.org/IPLMClients/getOtherEventStatesResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> getOtherEventStates(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getOtherEventStates", ReplyAction="http://tempuri.org/IPLMClients/getOtherEventStatesResponse")]
        System.IAsyncResult BegingetOtherEventStates(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> EndgetOtherEventStates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getLicense", ReplyAction="http://tempuri.org/IPLMClients/getLicenseResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo getLicense(int licenseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getLicense", ReplyAction="http://tempuri.org/IPLMClients/getLicenseResponse")]
        System.IAsyncResult BegingetLicense(int licenseId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo EndgetLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getLicenseByKey", ReplyAction="http://tempuri.org/IPLMClients/getLicenseByKeyResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo getLicenseByKey(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getLicenseByKey", ReplyAction="http://tempuri.org/IPLMClients/getLicenseByKeyResponse")]
        System.IAsyncResult BegingetLicenseByKey(string licenseKey, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo EndgetLicenseByKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getUrlVersion", ReplyAction="http://tempuri.org/IPLMClients/getUrlVersionResponse")]
        string getUrlVersion(string codeString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getUrlVersion", ReplyAction="http://tempuri.org/IPLMClients/getUrlVersionResponse")]
        System.IAsyncResult BegingetUrlVersion(string codeString, System.AsyncCallback callback, object asyncState);
        
        string EndgetUrlVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCalculatorsByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorsByPrefixResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> getCalculatorsByPrefix(string prefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCalculatorsByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorsByPrefixResponse")]
        System.IAsyncResult BegingetCalculatorsByPrefix(string prefix, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> EndgetCalculatorsByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCalculatorsBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorsBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> getCalculatorsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCalculatorsBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorsBySpecialityResponse")]
        System.IAsyncResult BegingetCalculatorsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> EndgetCalculatorsBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCalculatorsByPrefixBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorsByPrefixBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> getCalculatorsByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCalculatorsByPrefixBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getCalculatorsByPrefixBySpecialityResponse")]
        System.IAsyncResult BegingetCalculatorsByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> EndgetCalculatorsByPrefixBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getAgent", ReplyAction="http://tempuri.org/IPLMClients/getAgentResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo getAgent(int agentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getAgent", ReplyAction="http://tempuri.org/IPLMClients/getAgentResponse")]
        System.IAsyncResult BegingetAgent(int agentId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo EndgetAgent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getAgentsByBranch", ReplyAction="http://tempuri.org/IPLMClients/getAgentsByBranchResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo> getAgentsByBranch(int branchId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getAgentsByBranch", ReplyAction="http://tempuri.org/IPLMClients/getAgentsByBranchResponse")]
        System.IAsyncResult BegingetAgentsByBranch(int branchId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo> EndgetAgentsByBranch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getAgentByZone", ReplyAction="http://tempuri.org/IPLMClients/getAgentByZoneResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo getAgentByZone(byte zoneId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getAgentByZone", ReplyAction="http://tempuri.org/IPLMClients/getAgentByZoneResponse")]
        System.IAsyncResult BegingetAgentByZone(byte zoneId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo EndgetAgentByZone(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getAgentDetailByZone", ReplyAction="http://tempuri.org/IPLMClients/getAgentDetailByZoneResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo getAgentDetailByZone(byte zoneId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getAgentDetailByZone", ReplyAction="http://tempuri.org/IPLMClients/getAgentDetailByZoneResponse")]
        System.IAsyncResult BegingetAgentDetailByZone(byte zoneId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo EndgetAgentDetailByZone(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCompanyClientsByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCompanyClientsByPrefixResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo> getCompanyClientsByPrefix(string codePrefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCompanyClientsByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCompanyClientsByPrefixResponse")]
        System.IAsyncResult BegingetCompanyClientsByPrefix(string codePrefix, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo> EndgetCompanyClientsByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCloseBranches", ReplyAction="http://tempuri.org/IPLMClients/getCloseBranchesResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> getCloseBranches(string clientLatitude, string clientLongitude);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCloseBranches", ReplyAction="http://tempuri.org/IPLMClients/getCloseBranchesResponse")]
        System.IAsyncResult BegingetCloseBranches(string clientLatitude, string clientLongitude, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> EndgetCloseBranches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCloseBranchesByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCloseBranchesByPrefixResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> getCloseBranchesByPrefix(string codePrefix, string clientLatitude, string clientLongitude);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCloseBranchesByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCloseBranchesByPrefixResponse")]
        System.IAsyncResult BegingetCloseBranchesByPrefix(string codePrefix, string clientLatitude, string clientLongitude, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> EndgetCloseBranchesByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getBranchesByPrefixByText", ReplyAction="http://tempuri.org/IPLMClients/getBranchesByPrefixByTextResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> getBranchesByPrefixByText(string codePrefix, System.Nullable<int> stateId, string companyClients, string searchText);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getBranchesByPrefixByText", ReplyAction="http://tempuri.org/IPLMClients/getBranchesByPrefixByTextResponse")]
        System.IAsyncResult BegingetBranchesByPrefixByText(string codePrefix, System.Nullable<int> stateId, string companyClients, string searchText, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> EndgetBranchesByPrefixByText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getBranch", ReplyAction="http://tempuri.org/IPLMClients/getBranchResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo getBranch(int branchId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getBranch", ReplyAction="http://tempuri.org/IPLMClients/getBranchResponse")]
        System.IAsyncResult BegingetBranch(int branchId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo EndgetBranch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getProductsByCompanyByText", ReplyAction="http://tempuri.org/IPLMClients/getProductsByCompanyByTextResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> getProductsByCompanyByText(int companyClientId, string textSearch);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getProductsByCompanyByText", ReplyAction="http://tempuri.org/IPLMClients/getProductsByCompanyByTextResponse")]
        System.IAsyncResult BegingetProductsByCompanyByText(int companyClientId, string textSearch, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> EndgetProductsByCompanyByText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getProductsByBranch", ReplyAction="http://tempuri.org/IPLMClients/getProductsByBranchResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> getProductsByBranch(int branchId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getProductsByBranch", ReplyAction="http://tempuri.org/IPLMClients/getProductsByBranchResponse")]
        System.IAsyncResult BegingetProductsByBranch(int branchId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> EndgetProductsByBranch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClient", ReplyAction="http://tempuri.org/IPLMClients/getClientResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo getClient(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClient", ReplyAction="http://tempuri.org/IPLMClients/getClientResponse")]
        System.IAsyncResult BegingetClient(int clientId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo EndgetClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientByCompleteName", ReplyAction="http://tempuri.org/IPLMClients/getClientByCompleteNameResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo getClientByCompleteName(string completeName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientByCompleteName", ReplyAction="http://tempuri.org/IPLMClients/getClientByCompleteNameResponse")]
        System.IAsyncResult BegingetClientByCompleteName(string completeName, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo EndgetClientByCompleteName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientByCode", ReplyAction="http://tempuri.org/IPLMClients/getClientByCodeResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo getClientByCode(string codeString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientByCode", ReplyAction="http://tempuri.org/IPLMClients/getClientByCodeResponse")]
        System.IAsyncResult BegingetClientByCode(string codeString, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo EndgetClientByCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientByEmail", ReplyAction="http://tempuri.org/IPLMClients/getClientByEmailResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo getClientByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientByEmail", ReplyAction="http://tempuri.org/IPLMClients/getClientByEmailResponse")]
        System.IAsyncResult BegingetClientByEmail(string email, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo EndgetClientByEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientByIMEI", ReplyAction="http://tempuri.org/IPLMClients/getClientByIMEIResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo getClientByIMEI(string IMEI);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientByIMEI", ReplyAction="http://tempuri.org/IPLMClients/getClientByIMEIResponse")]
        System.IAsyncResult BegingetClientByIMEI(string IMEI, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo EndgetClientByIMEI(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientByIMEIByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getClientByIMEIByPrefixResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo getClientByIMEIByPrefix(string IMEI, string prefix);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientByIMEIByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getClientByIMEIByPrefixResponse")]
        System.IAsyncResult BegingetClientByIMEIByPrefix(string IMEI, string prefix, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo EndgetClientByIMEIByPrefix(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getProfessions", ReplyAction="http://tempuri.org/IPLMClients/getProfessionsResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo> getProfessions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getProfessions", ReplyAction="http://tempuri.org/IPLMClients/getProfessionsResponse")]
        System.IAsyncResult BegingetProfessions(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo> EndgetProfessions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getProfession", ReplyAction="http://tempuri.org/IPLMClients/getProfessionResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo getProfession(int professionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getProfession", ReplyAction="http://tempuri.org/IPLMClients/getProfessionResponse")]
        System.IAsyncResult BegingetProfession(int professionId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo EndgetProfession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getSpecialities", ReplyAction="http://tempuri.org/IPLMClients/getSpecialitiesResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo> getSpecialities(short professionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getSpecialities", ReplyAction="http://tempuri.org/IPLMClients/getSpecialitiesResponse")]
        System.IAsyncResult BegingetSpecialities(short professionId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo> EndgetSpecialities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getProfessionByClient", ReplyAction="http://tempuri.org/IPLMClients/getProfessionByClientResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo getProfessionByClient(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getProfessionByClient", ReplyAction="http://tempuri.org/IPLMClients/getProfessionByClientResponse")]
        System.IAsyncResult BegingetProfessionByClient(int clientId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo EndgetProfessionByClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getSpecialityByClient", ReplyAction="http://tempuri.org/IPLMClients/getSpecialityByClientResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo getSpecialityByClient(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getSpecialityByClient", ReplyAction="http://tempuri.org/IPLMClients/getSpecialityByClientResponse")]
        System.IAsyncResult BegingetSpecialityByClient(int clientId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo EndgetSpecialityByClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientByEmailByPassword", ReplyAction="http://tempuri.org/IPLMClients/getClientByEmailByPasswordResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo getClientByEmailByPassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientByEmailByPassword", ReplyAction="http://tempuri.org/IPLMClients/getClientByEmailByPasswordResponse")]
        System.IAsyncResult BegingetClientByEmailByPassword(string email, string password, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo EndgetClientByEmailByPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getResidenceLevelsBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getResidenceLevelsBySpecialityResponse")]
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo> getResidenceLevelsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getResidenceLevelsBySpeciality", ReplyAction="http://tempuri.org/IPLMClients/getResidenceLevelsBySpecialityResponse")]
        System.IAsyncResult BegingetResidenceLevelsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo> EndgetResidenceLevelsBySpeciality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getClientDetailByEmail", ReplyAction="http://tempuri.org/IPLMClients/getClientDetailByEmailResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo getClientDetailByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getClientDetailByEmail", ReplyAction="http://tempuri.org/IPLMClients/getClientDetailByEmailResponse")]
        System.IAsyncResult BegingetClientDetailByEmail(string email, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo EndgetClientDetailByEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCode", ReplyAction="http://tempuri.org/IPLMClients/getCodeResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCode(int codeId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCode", ReplyAction="http://tempuri.org/IPLMClients/getCodeResponse")]
        System.IAsyncResult BegingetCode(int codeId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCodeByCodeString", ReplyAction="http://tempuri.org/IPLMClients/getCodeByCodeStringResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByCodeString(string codeString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCodeByCodeString", ReplyAction="http://tempuri.org/IPLMClients/getCodeByCodeStringResponse")]
        System.IAsyncResult BegingetCodeByCodeString(string codeString, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByCodeString(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPLMClients/getCodeByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCodeByPrefixResponse")]
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByPrefix(int prefixId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPLMClients/getCodeByPrefix", ReplyAction="http://tempuri.org/IPLMClients/getCodeByPrefixResponse")]
        System.IAsyncResult BegingetCodeByPrefix(int prefixId, System.AsyncCallback callback, object asyncState);
        
        PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByPrefix(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPLMClientsChannel : PruebaCronnerBusinessLogicComponent.PLMClientsEngine.IPLMClients, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class uploadDownloadClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public uploadDownloadClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveMobileClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveMobileClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveMobileClientByLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveMobileClientByLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveMobileClientByAgeRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveMobileClientByAgeRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class savePharmacyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public savePharmacyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveWebClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveWebClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCalculatorDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCalculatorDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getResultByCalculatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getResultByCalculatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getQuestionnairesByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getQuestionnairesByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getQuestionnairesBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getQuestionnairesBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getQuestionnairesByPrefixBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getQuestionnairesByPrefixBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getQuestionnaireDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getQuestionnaireDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSummariesByOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSummariesByOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class addPharmacyUserConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addPharmacyUserConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class addUserConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addUserConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUserConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUserConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPharmacyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPharmacyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class checkSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public checkSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPharmacyUserByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPharmacyUserByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getWebApplicationUserByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getWebApplicationUserByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTermsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTermsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getStateByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getStateByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getEditionByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getEditionByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCountriesByTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCountriesByTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPhysicalActivitiesByCalculatorResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPhysicalActivitiesByCalculatorResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveClientInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveClientInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveDownloadClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveDownloadClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeByIMEICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeByIMEICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeByIMEIByISBNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeByIMEIByISBNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeByIMEIByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeByIMEIByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class validCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public validCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class checkClientCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public checkClientCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeByEmailByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeByEmailByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class insertCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public insertCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCommentTypesByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCommentTypesByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getToolsByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getToolsByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getBannersByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getBannersByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInformationByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInformationByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInformationByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInformationByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInformationByPrefixByTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInformationByPrefixByTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInformationByPrefixByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInformationByPrefixByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInformationBySectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInformationBySectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInformationByPrefixByTypeBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInformationByPrefixByTypeBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getEventsByTypeBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getEventsByTypeBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getEventCategoriesByStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getEventCategoriesByStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getOtherEventStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getOtherEventStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLicenseByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLicenseByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUrlVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUrlVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCalculatorsByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCalculatorsByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCalculatorsBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCalculatorsBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCalculatorsByPrefixBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCalculatorsByPrefixBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAgentsByBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAgentsByBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAgentByZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAgentByZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAgentDetailByZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAgentDetailByZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCompanyClientsByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCompanyClientsByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCloseBranchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCloseBranchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCloseBranchesByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCloseBranchesByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getBranchesByPrefixByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getBranchesByPrefixByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProductsByCompanyByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProductsByCompanyByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProductsByBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProductsByBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientByCompleteNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientByCompleteNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientByIMEICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientByIMEICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientByIMEIByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientByIMEIByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProfessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProfessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProfessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProfessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSpecialitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSpecialitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProfessionByClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProfessionByClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSpecialityByClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSpecialityByClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientByEmailByPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientByEmailByPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getResidenceLevelsBySpecialityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getResidenceLevelsBySpecialityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientDetailByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientDetailByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeByCodeStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeByCodeStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCodeByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCodeByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PLMClientsClient : System.ServiceModel.ClientBase<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.IPLMClients>, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.IPLMClients {
        
        private BeginOperationDelegate onBeginuploadDownloadClientDelegate;
        
        private EndOperationDelegate onEnduploadDownloadClientDelegate;
        
        private System.Threading.SendOrPostCallback onuploadDownloadClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveMobileClientDelegate;
        
        private EndOperationDelegate onEndsaveMobileClientDelegate;
        
        private System.Threading.SendOrPostCallback onsaveMobileClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateMobileClientDelegate;
        
        private EndOperationDelegate onEndupdateMobileClientDelegate;
        
        private System.Threading.SendOrPostCallback onupdateMobileClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveMobileClientByLicenseDelegate;
        
        private EndOperationDelegate onEndsaveMobileClientByLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onsaveMobileClientByLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveMobileClientByAgeRangeDelegate;
        
        private EndOperationDelegate onEndsaveMobileClientByAgeRangeDelegate;
        
        private System.Threading.SendOrPostCallback onsaveMobileClientByAgeRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateMobileClientByAgeRangeDelegate;
        
        private EndOperationDelegate onEndupdateMobileClientByAgeRangeDelegate;
        
        private System.Threading.SendOrPostCallback onupdateMobileClientByAgeRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginsavePharmacyUserDelegate;
        
        private EndOperationDelegate onEndsavePharmacyUserDelegate;
        
        private System.Threading.SendOrPostCallback onsavePharmacyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveWebClientDelegate;
        
        private EndOperationDelegate onEndsaveWebClientDelegate;
        
        private System.Threading.SendOrPostCallback onsaveWebClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateWebClientDelegate;
        
        private EndOperationDelegate onEndupdateWebClientDelegate;
        
        private System.Threading.SendOrPostCallback onupdateWebClientCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCalculatorDetailDelegate;
        
        private EndOperationDelegate onEndgetCalculatorDetailDelegate;
        
        private System.Threading.SendOrPostCallback ongetCalculatorDetailCompletedDelegate;
        
        private BeginOperationDelegate onBegingetResultByCalculatorDelegate;
        
        private EndOperationDelegate onEndgetResultByCalculatorDelegate;
        
        private System.Threading.SendOrPostCallback ongetResultByCalculatorCompletedDelegate;
        
        private BeginOperationDelegate onBegingetQuestionnairesByPrefixDelegate;
        
        private EndOperationDelegate onEndgetQuestionnairesByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetQuestionnairesByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetQuestionnairesBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetQuestionnairesBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetQuestionnairesBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetQuestionnairesByPrefixBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetQuestionnairesByPrefixBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetQuestionnairesByPrefixBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetQuestionnaireDetailDelegate;
        
        private EndOperationDelegate onEndgetQuestionnaireDetailDelegate;
        
        private System.Threading.SendOrPostCallback ongetQuestionnaireDetailCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSummariesByOptionDelegate;
        
        private EndOperationDelegate onEndgetSummariesByOptionDelegate;
        
        private System.Threading.SendOrPostCallback ongetSummariesByOptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddPharmacyUserConnectionDelegate;
        
        private EndOperationDelegate onEndaddPharmacyUserConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onaddPharmacyUserConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddUserConnectionDelegate;
        
        private EndOperationDelegate onEndaddUserConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onaddUserConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserConnectionDelegate;
        
        private EndOperationDelegate onEndgetUserConnectionDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPharmacyUserDelegate;
        
        private EndOperationDelegate onEndgetPharmacyUserDelegate;
        
        private System.Threading.SendOrPostCallback ongetPharmacyUserCompletedDelegate;
        
        private BeginOperationDelegate onBegincheckSessionDelegate;
        
        private EndOperationDelegate onEndcheckSessionDelegate;
        
        private System.Threading.SendOrPostCallback oncheckSessionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPharmacyUserByCodeDelegate;
        
        private EndOperationDelegate onEndgetPharmacyUserByCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetPharmacyUserByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetWebApplicationUserByCodeDelegate;
        
        private EndOperationDelegate onEndgetWebApplicationUserByCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetWebApplicationUserByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetContactDelegate;
        
        private EndOperationDelegate onEndgetContactDelegate;
        
        private System.Threading.SendOrPostCallback ongetContactCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTermsDelegate;
        
        private EndOperationDelegate onEndgetTermsDelegate;
        
        private System.Threading.SendOrPostCallback ongetTermsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCountriesDelegate;
        
        private EndOperationDelegate onEndgetCountriesDelegate;
        
        private System.Threading.SendOrPostCallback ongetCountriesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCountryDelegate;
        
        private EndOperationDelegate onEndgetCountryDelegate;
        
        private System.Threading.SendOrPostCallback ongetCountryCompletedDelegate;
        
        private BeginOperationDelegate onBegingetStateByCountryDelegate;
        
        private EndOperationDelegate onEndgetStateByCountryDelegate;
        
        private System.Threading.SendOrPostCallback ongetStateByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBegingetStateDelegate;
        
        private EndOperationDelegate onEndgetStateDelegate;
        
        private System.Threading.SendOrPostCallback ongetStateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetEditionByCodeDelegate;
        
        private EndOperationDelegate onEndgetEditionByCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetEditionByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCountriesByTargetDelegate;
        
        private EndOperationDelegate onEndgetCountriesByTargetDelegate;
        
        private System.Threading.SendOrPostCallback ongetCountriesByTargetCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPhysicalActivitiesByCalculatorResultDelegate;
        
        private EndOperationDelegate onEndgetPhysicalActivitiesByCalculatorResultDelegate;
        
        private System.Threading.SendOrPostCallback ongetPhysicalActivitiesByCalculatorResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveClientInfoDelegate;
        
        private EndOperationDelegate onEndsaveClientInfoDelegate;
        
        private System.Threading.SendOrPostCallback onsaveClientInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateClientInfoDelegate;
        
        private EndOperationDelegate onEndupdateClientInfoDelegate;
        
        private System.Threading.SendOrPostCallback onupdateClientInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveClientDelegate;
        
        private EndOperationDelegate onEndsaveClientDelegate;
        
        private System.Threading.SendOrPostCallback onsaveClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateClientDelegate;
        
        private EndOperationDelegate onEndupdateClientDelegate;
        
        private System.Threading.SendOrPostCallback onupdateClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveDownloadClientDelegate;
        
        private EndOperationDelegate onEndsaveDownloadClientDelegate;
        
        private System.Threading.SendOrPostCallback onsaveDownloadClientCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeByIMEIDelegate;
        
        private EndOperationDelegate onEndgetCodeByIMEIDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeByIMEICompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeByIMEIByISBNDelegate;
        
        private EndOperationDelegate onEndgetCodeByIMEIByISBNDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeByIMEIByISBNCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeByIMEIByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCodeByIMEIByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeByIMEIByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBeginvalidCodeDelegate;
        
        private EndOperationDelegate onEndvalidCodeDelegate;
        
        private System.Threading.SendOrPostCallback onvalidCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginactivateCodeDelegate;
        
        private EndOperationDelegate onEndactivateCodeDelegate;
        
        private System.Threading.SendOrPostCallback onactivateCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegincheckClientCodeDelegate;
        
        private EndOperationDelegate onEndcheckClientCodeDelegate;
        
        private System.Threading.SendOrPostCallback oncheckClientCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeByEmailByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCodeByEmailByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeByEmailByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegininsertCommentDelegate;
        
        private EndOperationDelegate onEndinsertCommentDelegate;
        
        private System.Threading.SendOrPostCallback oninsertCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateCommentDelegate;
        
        private EndOperationDelegate onEndupdateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onupdateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCommentDelegate;
        
        private EndOperationDelegate onEndgetCommentDelegate;
        
        private System.Threading.SendOrPostCallback ongetCommentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCommentTypesByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCommentTypesByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCommentTypesByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetToolsByCodeDelegate;
        
        private EndOperationDelegate onEndgetToolsByCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetToolsByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetBannersByCodeDelegate;
        
        private EndOperationDelegate onEndgetBannersByCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetBannersByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInformationByTypeDelegate;
        
        private EndOperationDelegate onEndgetInformationByTypeDelegate;
        
        private System.Threading.SendOrPostCallback ongetInformationByTypeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInformationByPrefixDelegate;
        
        private EndOperationDelegate onEndgetInformationByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetInformationByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInformationByPrefixByTargetDelegate;
        
        private EndOperationDelegate onEndgetInformationByPrefixByTargetDelegate;
        
        private System.Threading.SendOrPostCallback ongetInformationByPrefixByTargetCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInformationByPrefixByTypeDelegate;
        
        private EndOperationDelegate onEndgetInformationByPrefixByTypeDelegate;
        
        private System.Threading.SendOrPostCallback ongetInformationByPrefixByTypeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInformationBySectionDelegate;
        
        private EndOperationDelegate onEndgetInformationBySectionDelegate;
        
        private System.Threading.SendOrPostCallback ongetInformationBySectionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInformationByPrefixByTypeBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetInformationByPrefixByTypeBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetInformationByPrefixByTypeBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetEventsByTypeBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetEventsByTypeBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetEventsByTypeBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetEventCategoriesByStateDelegate;
        
        private EndOperationDelegate onEndgetEventCategoriesByStateDelegate;
        
        private System.Threading.SendOrPostCallback ongetEventCategoriesByStateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetOtherEventStatesDelegate;
        
        private EndOperationDelegate onEndgetOtherEventStatesDelegate;
        
        private System.Threading.SendOrPostCallback ongetOtherEventStatesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLicenseDelegate;
        
        private EndOperationDelegate onEndgetLicenseDelegate;
        
        private System.Threading.SendOrPostCallback ongetLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLicenseByKeyDelegate;
        
        private EndOperationDelegate onEndgetLicenseByKeyDelegate;
        
        private System.Threading.SendOrPostCallback ongetLicenseByKeyCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUrlVersionDelegate;
        
        private EndOperationDelegate onEndgetUrlVersionDelegate;
        
        private System.Threading.SendOrPostCallback ongetUrlVersionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCalculatorsByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCalculatorsByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCalculatorsByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCalculatorsBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetCalculatorsBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetCalculatorsBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCalculatorsByPrefixBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetCalculatorsByPrefixBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetCalculatorsByPrefixBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAgentDelegate;
        
        private EndOperationDelegate onEndgetAgentDelegate;
        
        private System.Threading.SendOrPostCallback ongetAgentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAgentsByBranchDelegate;
        
        private EndOperationDelegate onEndgetAgentsByBranchDelegate;
        
        private System.Threading.SendOrPostCallback ongetAgentsByBranchCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAgentByZoneDelegate;
        
        private EndOperationDelegate onEndgetAgentByZoneDelegate;
        
        private System.Threading.SendOrPostCallback ongetAgentByZoneCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAgentDetailByZoneDelegate;
        
        private EndOperationDelegate onEndgetAgentDetailByZoneDelegate;
        
        private System.Threading.SendOrPostCallback ongetAgentDetailByZoneCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCompanyClientsByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCompanyClientsByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCompanyClientsByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCloseBranchesDelegate;
        
        private EndOperationDelegate onEndgetCloseBranchesDelegate;
        
        private System.Threading.SendOrPostCallback ongetCloseBranchesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCloseBranchesByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCloseBranchesByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCloseBranchesByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetBranchesByPrefixByTextDelegate;
        
        private EndOperationDelegate onEndgetBranchesByPrefixByTextDelegate;
        
        private System.Threading.SendOrPostCallback ongetBranchesByPrefixByTextCompletedDelegate;
        
        private BeginOperationDelegate onBegingetBranchDelegate;
        
        private EndOperationDelegate onEndgetBranchDelegate;
        
        private System.Threading.SendOrPostCallback ongetBranchCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProductsByCompanyByTextDelegate;
        
        private EndOperationDelegate onEndgetProductsByCompanyByTextDelegate;
        
        private System.Threading.SendOrPostCallback ongetProductsByCompanyByTextCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProductsByBranchDelegate;
        
        private EndOperationDelegate onEndgetProductsByBranchDelegate;
        
        private System.Threading.SendOrPostCallback ongetProductsByBranchCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientDelegate;
        
        private EndOperationDelegate onEndgetClientDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientByCompleteNameDelegate;
        
        private EndOperationDelegate onEndgetClientByCompleteNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientByCompleteNameCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientByCodeDelegate;
        
        private EndOperationDelegate onEndgetClientByCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientByCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientByEmailDelegate;
        
        private EndOperationDelegate onEndgetClientByEmailDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientByEmailCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientByIMEIDelegate;
        
        private EndOperationDelegate onEndgetClientByIMEIDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientByIMEICompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientByIMEIByPrefixDelegate;
        
        private EndOperationDelegate onEndgetClientByIMEIByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientByIMEIByPrefixCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProfessionsDelegate;
        
        private EndOperationDelegate onEndgetProfessionsDelegate;
        
        private System.Threading.SendOrPostCallback ongetProfessionsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProfessionDelegate;
        
        private EndOperationDelegate onEndgetProfessionDelegate;
        
        private System.Threading.SendOrPostCallback ongetProfessionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSpecialitiesDelegate;
        
        private EndOperationDelegate onEndgetSpecialitiesDelegate;
        
        private System.Threading.SendOrPostCallback ongetSpecialitiesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProfessionByClientDelegate;
        
        private EndOperationDelegate onEndgetProfessionByClientDelegate;
        
        private System.Threading.SendOrPostCallback ongetProfessionByClientCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSpecialityByClientDelegate;
        
        private EndOperationDelegate onEndgetSpecialityByClientDelegate;
        
        private System.Threading.SendOrPostCallback ongetSpecialityByClientCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientByEmailByPasswordDelegate;
        
        private EndOperationDelegate onEndgetClientByEmailByPasswordDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientByEmailByPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBegingetResidenceLevelsBySpecialityDelegate;
        
        private EndOperationDelegate onEndgetResidenceLevelsBySpecialityDelegate;
        
        private System.Threading.SendOrPostCallback ongetResidenceLevelsBySpecialityCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientDetailByEmailDelegate;
        
        private EndOperationDelegate onEndgetClientDetailByEmailDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientDetailByEmailCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeDelegate;
        
        private EndOperationDelegate onEndgetCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeByCodeStringDelegate;
        
        private EndOperationDelegate onEndgetCodeByCodeStringDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeByCodeStringCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCodeByPrefixDelegate;
        
        private EndOperationDelegate onEndgetCodeByPrefixDelegate;
        
        private System.Threading.SendOrPostCallback ongetCodeByPrefixCompletedDelegate;
        
        public PLMClientsClient() {
        }
        
        public PLMClientsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PLMClientsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PLMClientsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PLMClientsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<uploadDownloadClientCompletedEventArgs> uploadDownloadClientCompleted;
        
        public event System.EventHandler<saveMobileClientCompletedEventArgs> saveMobileClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateMobileClientCompleted;
        
        public event System.EventHandler<saveMobileClientByLicenseCompletedEventArgs> saveMobileClientByLicenseCompleted;
        
        public event System.EventHandler<saveMobileClientByAgeRangeCompletedEventArgs> saveMobileClientByAgeRangeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateMobileClientByAgeRangeCompleted;
        
        public event System.EventHandler<savePharmacyUserCompletedEventArgs> savePharmacyUserCompleted;
        
        public event System.EventHandler<saveWebClientCompletedEventArgs> saveWebClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateWebClientCompleted;
        
        public event System.EventHandler<getCalculatorDetailCompletedEventArgs> getCalculatorDetailCompleted;
        
        public event System.EventHandler<getResultByCalculatorCompletedEventArgs> getResultByCalculatorCompleted;
        
        public event System.EventHandler<getQuestionnairesByPrefixCompletedEventArgs> getQuestionnairesByPrefixCompleted;
        
        public event System.EventHandler<getQuestionnairesBySpecialityCompletedEventArgs> getQuestionnairesBySpecialityCompleted;
        
        public event System.EventHandler<getQuestionnairesByPrefixBySpecialityCompletedEventArgs> getQuestionnairesByPrefixBySpecialityCompleted;
        
        public event System.EventHandler<getQuestionnaireDetailCompletedEventArgs> getQuestionnaireDetailCompleted;
        
        public event System.EventHandler<getSummariesByOptionCompletedEventArgs> getSummariesByOptionCompleted;
        
        public event System.EventHandler<addPharmacyUserConnectionCompletedEventArgs> addPharmacyUserConnectionCompleted;
        
        public event System.EventHandler<addUserConnectionCompletedEventArgs> addUserConnectionCompleted;
        
        public event System.EventHandler<getUserConnectionCompletedEventArgs> getUserConnectionCompleted;
        
        public event System.EventHandler<getPharmacyUserCompletedEventArgs> getPharmacyUserCompleted;
        
        public event System.EventHandler<checkSessionCompletedEventArgs> checkSessionCompleted;
        
        public event System.EventHandler<getPharmacyUserByCodeCompletedEventArgs> getPharmacyUserByCodeCompleted;
        
        public event System.EventHandler<getWebApplicationUserByCodeCompletedEventArgs> getWebApplicationUserByCodeCompleted;
        
        public event System.EventHandler<getContactCompletedEventArgs> getContactCompleted;
        
        public event System.EventHandler<getTermsCompletedEventArgs> getTermsCompleted;
        
        public event System.EventHandler<getCountriesCompletedEventArgs> getCountriesCompleted;
        
        public event System.EventHandler<getCountryCompletedEventArgs> getCountryCompleted;
        
        public event System.EventHandler<getStateByCountryCompletedEventArgs> getStateByCountryCompleted;
        
        public event System.EventHandler<getStateCompletedEventArgs> getStateCompleted;
        
        public event System.EventHandler<getEditionByCodeCompletedEventArgs> getEditionByCodeCompleted;
        
        public event System.EventHandler<getCountriesByTargetCompletedEventArgs> getCountriesByTargetCompleted;
        
        public event System.EventHandler<getPhysicalActivitiesByCalculatorResultCompletedEventArgs> getPhysicalActivitiesByCalculatorResultCompleted;
        
        public event System.EventHandler<saveClientInfoCompletedEventArgs> saveClientInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateClientInfoCompleted;
        
        public event System.EventHandler<saveClientCompletedEventArgs> saveClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateClientCompleted;
        
        public event System.EventHandler<saveDownloadClientCompletedEventArgs> saveDownloadClientCompleted;
        
        public event System.EventHandler<getCodeByIMEICompletedEventArgs> getCodeByIMEICompleted;
        
        public event System.EventHandler<getCodeByIMEIByISBNCompletedEventArgs> getCodeByIMEIByISBNCompleted;
        
        public event System.EventHandler<getCodeByIMEIByPrefixCompletedEventArgs> getCodeByIMEIByPrefixCompleted;
        
        public event System.EventHandler<validCodeCompletedEventArgs> validCodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> activateCodeCompleted;
        
        public event System.EventHandler<checkClientCodeCompletedEventArgs> checkClientCodeCompleted;
        
        public event System.EventHandler<getCodeByEmailByPrefixCompletedEventArgs> getCodeByEmailByPrefixCompleted;
        
        public event System.EventHandler<insertCommentCompletedEventArgs> insertCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateCommentCompleted;
        
        public event System.EventHandler<getCommentCompletedEventArgs> getCommentCompleted;
        
        public event System.EventHandler<getCommentTypesByPrefixCompletedEventArgs> getCommentTypesByPrefixCompleted;
        
        public event System.EventHandler<getToolsByCodeCompletedEventArgs> getToolsByCodeCompleted;
        
        public event System.EventHandler<getBannersByCodeCompletedEventArgs> getBannersByCodeCompleted;
        
        public event System.EventHandler<getInformationByTypeCompletedEventArgs> getInformationByTypeCompleted;
        
        public event System.EventHandler<getInformationByPrefixCompletedEventArgs> getInformationByPrefixCompleted;
        
        public event System.EventHandler<getInformationByPrefixByTargetCompletedEventArgs> getInformationByPrefixByTargetCompleted;
        
        public event System.EventHandler<getInformationByPrefixByTypeCompletedEventArgs> getInformationByPrefixByTypeCompleted;
        
        public event System.EventHandler<getInformationBySectionCompletedEventArgs> getInformationBySectionCompleted;
        
        public event System.EventHandler<getInformationByPrefixByTypeBySpecialityCompletedEventArgs> getInformationByPrefixByTypeBySpecialityCompleted;
        
        public event System.EventHandler<getEventsByTypeBySpecialityCompletedEventArgs> getEventsByTypeBySpecialityCompleted;
        
        public event System.EventHandler<getEventCategoriesByStateCompletedEventArgs> getEventCategoriesByStateCompleted;
        
        public event System.EventHandler<getOtherEventStatesCompletedEventArgs> getOtherEventStatesCompleted;
        
        public event System.EventHandler<getLicenseCompletedEventArgs> getLicenseCompleted;
        
        public event System.EventHandler<getLicenseByKeyCompletedEventArgs> getLicenseByKeyCompleted;
        
        public event System.EventHandler<getUrlVersionCompletedEventArgs> getUrlVersionCompleted;
        
        public event System.EventHandler<getCalculatorsByPrefixCompletedEventArgs> getCalculatorsByPrefixCompleted;
        
        public event System.EventHandler<getCalculatorsBySpecialityCompletedEventArgs> getCalculatorsBySpecialityCompleted;
        
        public event System.EventHandler<getCalculatorsByPrefixBySpecialityCompletedEventArgs> getCalculatorsByPrefixBySpecialityCompleted;
        
        public event System.EventHandler<getAgentCompletedEventArgs> getAgentCompleted;
        
        public event System.EventHandler<getAgentsByBranchCompletedEventArgs> getAgentsByBranchCompleted;
        
        public event System.EventHandler<getAgentByZoneCompletedEventArgs> getAgentByZoneCompleted;
        
        public event System.EventHandler<getAgentDetailByZoneCompletedEventArgs> getAgentDetailByZoneCompleted;
        
        public event System.EventHandler<getCompanyClientsByPrefixCompletedEventArgs> getCompanyClientsByPrefixCompleted;
        
        public event System.EventHandler<getCloseBranchesCompletedEventArgs> getCloseBranchesCompleted;
        
        public event System.EventHandler<getCloseBranchesByPrefixCompletedEventArgs> getCloseBranchesByPrefixCompleted;
        
        public event System.EventHandler<getBranchesByPrefixByTextCompletedEventArgs> getBranchesByPrefixByTextCompleted;
        
        public event System.EventHandler<getBranchCompletedEventArgs> getBranchCompleted;
        
        public event System.EventHandler<getProductsByCompanyByTextCompletedEventArgs> getProductsByCompanyByTextCompleted;
        
        public event System.EventHandler<getProductsByBranchCompletedEventArgs> getProductsByBranchCompleted;
        
        public event System.EventHandler<getClientCompletedEventArgs> getClientCompleted;
        
        public event System.EventHandler<getClientByCompleteNameCompletedEventArgs> getClientByCompleteNameCompleted;
        
        public event System.EventHandler<getClientByCodeCompletedEventArgs> getClientByCodeCompleted;
        
        public event System.EventHandler<getClientByEmailCompletedEventArgs> getClientByEmailCompleted;
        
        public event System.EventHandler<getClientByIMEICompletedEventArgs> getClientByIMEICompleted;
        
        public event System.EventHandler<getClientByIMEIByPrefixCompletedEventArgs> getClientByIMEIByPrefixCompleted;
        
        public event System.EventHandler<getProfessionsCompletedEventArgs> getProfessionsCompleted;
        
        public event System.EventHandler<getProfessionCompletedEventArgs> getProfessionCompleted;
        
        public event System.EventHandler<getSpecialitiesCompletedEventArgs> getSpecialitiesCompleted;
        
        public event System.EventHandler<getProfessionByClientCompletedEventArgs> getProfessionByClientCompleted;
        
        public event System.EventHandler<getSpecialityByClientCompletedEventArgs> getSpecialityByClientCompleted;
        
        public event System.EventHandler<getClientByEmailByPasswordCompletedEventArgs> getClientByEmailByPasswordCompleted;
        
        public event System.EventHandler<getResidenceLevelsBySpecialityCompletedEventArgs> getResidenceLevelsBySpecialityCompleted;
        
        public event System.EventHandler<getClientDetailByEmailCompletedEventArgs> getClientDetailByEmailCompleted;
        
        public event System.EventHandler<getCodeCompletedEventArgs> getCodeCompleted;
        
        public event System.EventHandler<getCodeByCodeStringCompletedEventArgs> getCodeByCodeStringCompleted;
        
        public event System.EventHandler<getCodeByPrefixCompletedEventArgs> getCodeByPrefixCompleted;
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo uploadDownloadClient(string license, string hwidentifier) {
            return base.Channel.uploadDownloadClient(license, hwidentifier);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginuploadDownloadClient(string license, string hwidentifier, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuploadDownloadClient(license, hwidentifier, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo EnduploadDownloadClient(System.IAsyncResult result) {
            return base.Channel.EnduploadDownloadClient(result);
        }
        
        private System.IAsyncResult OnBeginuploadDownloadClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string license = ((string)(inValues[0]));
            string hwidentifier = ((string)(inValues[1]));
            return this.BeginuploadDownloadClient(license, hwidentifier, callback, asyncState);
        }
        
        private object[] OnEnduploadDownloadClient(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseClientInfo retVal = this.EnduploadDownloadClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnuploadDownloadClientCompleted(object state) {
            if ((this.uploadDownloadClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.uploadDownloadClientCompleted(this, new uploadDownloadClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void uploadDownloadClientAsync(string license, string hwidentifier) {
            this.uploadDownloadClientAsync(license, hwidentifier, null);
        }
        
        public void uploadDownloadClientAsync(string license, string hwidentifier, object userState) {
            if ((this.onBeginuploadDownloadClientDelegate == null)) {
                this.onBeginuploadDownloadClientDelegate = new BeginOperationDelegate(this.OnBeginuploadDownloadClient);
            }
            if ((this.onEnduploadDownloadClientDelegate == null)) {
                this.onEnduploadDownloadClientDelegate = new EndOperationDelegate(this.OnEnduploadDownloadClient);
            }
            if ((this.onuploadDownloadClientCompletedDelegate == null)) {
                this.onuploadDownloadClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuploadDownloadClientCompleted);
            }
            base.InvokeAsync(this.onBeginuploadDownloadClientDelegate, new object[] {
                        license,
                        hwidentifier}, this.onEnduploadDownloadClientDelegate, this.onuploadDownloadClientCompletedDelegate, userState);
        }
        
        public string saveMobileClient(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI) {
            return base.Channel.saveMobileClient(codePrefix, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveMobileClient(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveMobileClient(codePrefix, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndsaveMobileClient(System.IAsyncResult result) {
            return base.Channel.EndsaveMobileClient(result);
        }
        
        private System.IAsyncResult OnBeginsaveMobileClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codePrefix = ((string)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string slastName = ((string)(inValues[3]));
            string email = ((string)(inValues[4]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[5]));
            string otherProfession = ((string)(inValues[6]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[7]));
            string specialityName = ((string)(inValues[8]));
            string professionalLicense = ((string)(inValues[9]));
            string residenceKey = ((string)(inValues[10]));
            string country = ((string)(inValues[11]));
            string state = ((string)(inValues[12]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[13]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[14]));
            string IMEI = ((string)(inValues[15]));
            return this.BeginsaveMobileClient(codePrefix, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, callback, asyncState);
        }
        
        private object[] OnEndsaveMobileClient(System.IAsyncResult result) {
            string retVal = this.EndsaveMobileClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveMobileClientCompleted(object state) {
            if ((this.saveMobileClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveMobileClientCompleted(this, new saveMobileClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveMobileClientAsync(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI) {
            this.saveMobileClientAsync(codePrefix, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, null);
        }
        
        public void saveMobileClientAsync(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    object userState) {
            if ((this.onBeginsaveMobileClientDelegate == null)) {
                this.onBeginsaveMobileClientDelegate = new BeginOperationDelegate(this.OnBeginsaveMobileClient);
            }
            if ((this.onEndsaveMobileClientDelegate == null)) {
                this.onEndsaveMobileClientDelegate = new EndOperationDelegate(this.OnEndsaveMobileClient);
            }
            if ((this.onsaveMobileClientCompletedDelegate == null)) {
                this.onsaveMobileClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveMobileClientCompleted);
            }
            base.InvokeAsync(this.onBeginsaveMobileClientDelegate, new object[] {
                        codePrefix,
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        residenceKey,
                        country,
                        state,
                        source,
                        targetOutput,
                        IMEI}, this.onEndsaveMobileClientDelegate, this.onsaveMobileClientCompletedDelegate, userState);
        }
        
        public void updateMobileClient(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string residenceKey, string country, string state, string IMEI) {
            base.Channel.updateMobileClient(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateMobileClient(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginupdateMobileClient(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateMobileClient(System.IAsyncResult result) {
            base.Channel.EndupdateMobileClient(result);
        }
        
        private System.IAsyncResult OnBeginupdateMobileClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string slastName = ((string)(inValues[3]));
            string email = ((string)(inValues[4]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[5]));
            string otherProfession = ((string)(inValues[6]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[7]));
            string specialityName = ((string)(inValues[8]));
            string professionalLicense = ((string)(inValues[9]));
            string residenceKey = ((string)(inValues[10]));
            string country = ((string)(inValues[11]));
            string state = ((string)(inValues[12]));
            string IMEI = ((string)(inValues[13]));
            return this.BeginupdateMobileClient(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, callback, asyncState);
        }
        
        private object[] OnEndupdateMobileClient(System.IAsyncResult result) {
            this.EndupdateMobileClient(result);
            return null;
        }
        
        private void OnupdateMobileClientCompleted(object state) {
            if ((this.updateMobileClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateMobileClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateMobileClientAsync(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string residenceKey, string country, string state, string IMEI) {
            this.updateMobileClientAsync(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, null);
        }
        
        public void updateMobileClientAsync(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string residenceKey, string country, string state, string IMEI, object userState) {
            if ((this.onBeginupdateMobileClientDelegate == null)) {
                this.onBeginupdateMobileClientDelegate = new BeginOperationDelegate(this.OnBeginupdateMobileClient);
            }
            if ((this.onEndupdateMobileClientDelegate == null)) {
                this.onEndupdateMobileClientDelegate = new EndOperationDelegate(this.OnEndupdateMobileClient);
            }
            if ((this.onupdateMobileClientCompletedDelegate == null)) {
                this.onupdateMobileClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateMobileClientCompleted);
            }
            base.InvokeAsync(this.onBeginupdateMobileClientDelegate, new object[] {
                        codeString,
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        residenceKey,
                        country,
                        state,
                        IMEI}, this.onEndupdateMobileClientDelegate, this.onupdateMobileClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo saveMobileClientByLicense(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target) {
            return base.Channel.saveMobileClientByLicense(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, hwIdentifier, licenseKey, target);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveMobileClientByLicense(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveMobileClientByLicense(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, hwIdentifier, licenseKey, target, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo EndsaveMobileClientByLicense(System.IAsyncResult result) {
            return base.Channel.EndsaveMobileClientByLicense(result);
        }
        
        private System.IAsyncResult OnBeginsaveMobileClientByLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string slastName = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[4]));
            string otherProfession = ((string)(inValues[5]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[6]));
            string specialityName = ((string)(inValues[7]));
            string professionalLicense = ((string)(inValues[8]));
            string residenceKey = ((string)(inValues[9]));
            string country = ((string)(inValues[10]));
            string state = ((string)(inValues[11]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[12]));
            string hwIdentifier = ((string)(inValues[13]));
            string licenseKey = ((string)(inValues[14]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[15]));
            return this.BeginsaveMobileClientByLicense(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, hwIdentifier, licenseKey, target, callback, asyncState);
        }
        
        private object[] OnEndsaveMobileClientByLicense(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo retVal = this.EndsaveMobileClientByLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveMobileClientByLicenseCompleted(object state) {
            if ((this.saveMobileClientByLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveMobileClientByLicenseCompleted(this, new saveMobileClientByLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveMobileClientByLicenseAsync(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target) {
            this.saveMobileClientByLicenseAsync(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, hwIdentifier, licenseKey, target, null);
        }
        
        public void saveMobileClientByLicenseAsync(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    object userState) {
            if ((this.onBeginsaveMobileClientByLicenseDelegate == null)) {
                this.onBeginsaveMobileClientByLicenseDelegate = new BeginOperationDelegate(this.OnBeginsaveMobileClientByLicense);
            }
            if ((this.onEndsaveMobileClientByLicenseDelegate == null)) {
                this.onEndsaveMobileClientByLicenseDelegate = new EndOperationDelegate(this.OnEndsaveMobileClientByLicense);
            }
            if ((this.onsaveMobileClientByLicenseCompletedDelegate == null)) {
                this.onsaveMobileClientByLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveMobileClientByLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginsaveMobileClientByLicenseDelegate, new object[] {
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        residenceKey,
                        country,
                        state,
                        source,
                        hwIdentifier,
                        licenseKey,
                        target}, this.onEndsaveMobileClientByLicenseDelegate, this.onsaveMobileClientByLicenseCompletedDelegate, userState);
        }
        
        public string saveMobileClientByAgeRange(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    string age) {
            return base.Channel.saveMobileClientByAgeRange(codePrefix, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, age);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveMobileClientByAgeRange(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    string age, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveMobileClientByAgeRange(codePrefix, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, age, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndsaveMobileClientByAgeRange(System.IAsyncResult result) {
            return base.Channel.EndsaveMobileClientByAgeRange(result);
        }
        
        private System.IAsyncResult OnBeginsaveMobileClientByAgeRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codePrefix = ((string)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string slastName = ((string)(inValues[3]));
            char gender = ((char)(inValues[4]));
            string email = ((string)(inValues[5]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[6]));
            string otherProfession = ((string)(inValues[7]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[8]));
            string specialityName = ((string)(inValues[9]));
            string professionalLicense = ((string)(inValues[10]));
            string residenceKey = ((string)(inValues[11]));
            string country = ((string)(inValues[12]));
            string state = ((string)(inValues[13]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[14]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[15]));
            string IMEI = ((string)(inValues[16]));
            string age = ((string)(inValues[17]));
            return this.BeginsaveMobileClientByAgeRange(codePrefix, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, age, callback, asyncState);
        }
        
        private object[] OnEndsaveMobileClientByAgeRange(System.IAsyncResult result) {
            string retVal = this.EndsaveMobileClientByAgeRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveMobileClientByAgeRangeCompleted(object state) {
            if ((this.saveMobileClientByAgeRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveMobileClientByAgeRangeCompleted(this, new saveMobileClientByAgeRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveMobileClientByAgeRangeAsync(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    string age) {
            this.saveMobileClientByAgeRangeAsync(codePrefix, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, source, targetOutput, IMEI, age, null);
        }
        
        public void saveMobileClientByAgeRangeAsync(
                    string codePrefix, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetOutput, 
                    string IMEI, 
                    string age, 
                    object userState) {
            if ((this.onBeginsaveMobileClientByAgeRangeDelegate == null)) {
                this.onBeginsaveMobileClientByAgeRangeDelegate = new BeginOperationDelegate(this.OnBeginsaveMobileClientByAgeRange);
            }
            if ((this.onEndsaveMobileClientByAgeRangeDelegate == null)) {
                this.onEndsaveMobileClientByAgeRangeDelegate = new EndOperationDelegate(this.OnEndsaveMobileClientByAgeRange);
            }
            if ((this.onsaveMobileClientByAgeRangeCompletedDelegate == null)) {
                this.onsaveMobileClientByAgeRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveMobileClientByAgeRangeCompleted);
            }
            base.InvokeAsync(this.onBeginsaveMobileClientByAgeRangeDelegate, new object[] {
                        codePrefix,
                        firstName,
                        lastName,
                        slastName,
                        gender,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        residenceKey,
                        country,
                        state,
                        source,
                        targetOutput,
                        IMEI,
                        age}, this.onEndsaveMobileClientByAgeRangeDelegate, this.onsaveMobileClientByAgeRangeCompletedDelegate, userState);
        }
        
        public void updateMobileClientByAgeRange(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    string age) {
            base.Channel.updateMobileClientByAgeRange(codeString, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, age);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateMobileClientByAgeRange(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    string age, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginupdateMobileClientByAgeRange(codeString, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, age, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateMobileClientByAgeRange(System.IAsyncResult result) {
            base.Channel.EndupdateMobileClientByAgeRange(result);
        }
        
        private System.IAsyncResult OnBeginupdateMobileClientByAgeRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string slastName = ((string)(inValues[3]));
            char gender = ((char)(inValues[4]));
            string email = ((string)(inValues[5]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[6]));
            string otherProfession = ((string)(inValues[7]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[8]));
            string specialityName = ((string)(inValues[9]));
            string professionalLicense = ((string)(inValues[10]));
            string residenceKey = ((string)(inValues[11]));
            string country = ((string)(inValues[12]));
            string state = ((string)(inValues[13]));
            string IMEI = ((string)(inValues[14]));
            string age = ((string)(inValues[15]));
            return this.BeginupdateMobileClientByAgeRange(codeString, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, age, callback, asyncState);
        }
        
        private object[] OnEndupdateMobileClientByAgeRange(System.IAsyncResult result) {
            this.EndupdateMobileClientByAgeRange(result);
            return null;
        }
        
        private void OnupdateMobileClientByAgeRangeCompleted(object state) {
            if ((this.updateMobileClientByAgeRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateMobileClientByAgeRangeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateMobileClientByAgeRangeAsync(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    string age) {
            this.updateMobileClientByAgeRangeAsync(codeString, firstName, lastName, slastName, gender, email, profession, otherProfession, speciality, specialityName, professionalLicense, residenceKey, country, state, IMEI, age, null);
        }
        
        public void updateMobileClientByAgeRangeAsync(
                    string codeString, 
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    char gender, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string residenceKey, 
                    string country, 
                    string state, 
                    string IMEI, 
                    string age, 
                    object userState) {
            if ((this.onBeginupdateMobileClientByAgeRangeDelegate == null)) {
                this.onBeginupdateMobileClientByAgeRangeDelegate = new BeginOperationDelegate(this.OnBeginupdateMobileClientByAgeRange);
            }
            if ((this.onEndupdateMobileClientByAgeRangeDelegate == null)) {
                this.onEndupdateMobileClientByAgeRangeDelegate = new EndOperationDelegate(this.OnEndupdateMobileClientByAgeRange);
            }
            if ((this.onupdateMobileClientByAgeRangeCompletedDelegate == null)) {
                this.onupdateMobileClientByAgeRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateMobileClientByAgeRangeCompleted);
            }
            base.InvokeAsync(this.onBeginupdateMobileClientByAgeRangeDelegate, new object[] {
                        codeString,
                        firstName,
                        lastName,
                        slastName,
                        gender,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        residenceKey,
                        country,
                        state,
                        IMEI,
                        age}, this.onEndupdateMobileClientByAgeRangeDelegate, this.onupdateMobileClientByAgeRangeCompletedDelegate, userState);
        }
        
        public string savePharmacyUser(string codePrefix, string firstName, string lastName, string userName, string userPassword) {
            return base.Channel.savePharmacyUser(codePrefix, firstName, lastName, userName, userPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsavePharmacyUser(string codePrefix, string firstName, string lastName, string userName, string userPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsavePharmacyUser(codePrefix, firstName, lastName, userName, userPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndsavePharmacyUser(System.IAsyncResult result) {
            return base.Channel.EndsavePharmacyUser(result);
        }
        
        private System.IAsyncResult OnBeginsavePharmacyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codePrefix = ((string)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string userName = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            return this.BeginsavePharmacyUser(codePrefix, firstName, lastName, userName, userPassword, callback, asyncState);
        }
        
        private object[] OnEndsavePharmacyUser(System.IAsyncResult result) {
            string retVal = this.EndsavePharmacyUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsavePharmacyUserCompleted(object state) {
            if ((this.savePharmacyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.savePharmacyUserCompleted(this, new savePharmacyUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void savePharmacyUserAsync(string codePrefix, string firstName, string lastName, string userName, string userPassword) {
            this.savePharmacyUserAsync(codePrefix, firstName, lastName, userName, userPassword, null);
        }
        
        public void savePharmacyUserAsync(string codePrefix, string firstName, string lastName, string userName, string userPassword, object userState) {
            if ((this.onBeginsavePharmacyUserDelegate == null)) {
                this.onBeginsavePharmacyUserDelegate = new BeginOperationDelegate(this.OnBeginsavePharmacyUser);
            }
            if ((this.onEndsavePharmacyUserDelegate == null)) {
                this.onEndsavePharmacyUserDelegate = new EndOperationDelegate(this.OnEndsavePharmacyUser);
            }
            if ((this.onsavePharmacyUserCompletedDelegate == null)) {
                this.onsavePharmacyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsavePharmacyUserCompleted);
            }
            base.InvokeAsync(this.onBeginsavePharmacyUserDelegate, new object[] {
                        codePrefix,
                        firstName,
                        lastName,
                        userName,
                        userPassword}, this.onEndsavePharmacyUserDelegate, this.onsavePharmacyUserCompletedDelegate, userState);
        }
        
        public string saveWebClient(
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    string code, 
                    int professionId, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality) {
            return base.Channel.saveWebClient(firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, code, professionId, otherProfession, professionalLicense, specialityId, otherSpeciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveWebClient(
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    string code, 
                    int professionId, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveWebClient(firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, code, professionId, otherProfession, professionalLicense, specialityId, otherSpeciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndsaveWebClient(System.IAsyncResult result) {
            return base.Channel.EndsaveWebClient(result);
        }
        
        private System.IAsyncResult OnBeginsaveWebClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string sLastName = ((string)(inValues[2]));
            string gender = ((string)(inValues[3]));
            string birthday = ((string)(inValues[4]));
            string email = ((string)(inValues[5]));
            string password = ((string)(inValues[6]));
            string country = ((string)(inValues[7]));
            string state = ((string)(inValues[8]));
            int entrySource = ((int)(inValues[9]));
            string code = ((string)(inValues[10]));
            int professionId = ((int)(inValues[11]));
            string otherProfession = ((string)(inValues[12]));
            string professionalLicense = ((string)(inValues[13]));
            int specialityId = ((int)(inValues[14]));
            string otherSpeciality = ((string)(inValues[15]));
            return this.BeginsaveWebClient(firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, code, professionId, otherProfession, professionalLicense, specialityId, otherSpeciality, callback, asyncState);
        }
        
        private object[] OnEndsaveWebClient(System.IAsyncResult result) {
            string retVal = this.EndsaveWebClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveWebClientCompleted(object state) {
            if ((this.saveWebClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveWebClientCompleted(this, new saveWebClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveWebClientAsync(
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    string code, 
                    int professionId, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality) {
            this.saveWebClientAsync(firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, code, professionId, otherProfession, professionalLicense, specialityId, otherSpeciality, null);
        }
        
        public void saveWebClientAsync(
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    string code, 
                    int professionId, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality, 
                    object userState) {
            if ((this.onBeginsaveWebClientDelegate == null)) {
                this.onBeginsaveWebClientDelegate = new BeginOperationDelegate(this.OnBeginsaveWebClient);
            }
            if ((this.onEndsaveWebClientDelegate == null)) {
                this.onEndsaveWebClientDelegate = new EndOperationDelegate(this.OnEndsaveWebClient);
            }
            if ((this.onsaveWebClientCompletedDelegate == null)) {
                this.onsaveWebClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveWebClientCompleted);
            }
            base.InvokeAsync(this.onBeginsaveWebClientDelegate, new object[] {
                        firstName,
                        lastName,
                        sLastName,
                        gender,
                        birthday,
                        email,
                        password,
                        country,
                        state,
                        entrySource,
                        code,
                        professionId,
                        otherProfession,
                        professionalLicense,
                        specialityId,
                        otherSpeciality}, this.onEndsaveWebClientDelegate, this.onsaveWebClientCompletedDelegate, userState);
        }
        
        public void updateWebClient(
                    int clientId, 
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    int profession, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality) {
            base.Channel.updateWebClient(clientId, firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, profession, otherProfession, professionalLicense, specialityId, otherSpeciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateWebClient(
                    int clientId, 
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    int profession, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginupdateWebClient(clientId, firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, profession, otherProfession, professionalLicense, specialityId, otherSpeciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateWebClient(System.IAsyncResult result) {
            base.Channel.EndupdateWebClient(result);
        }
        
        private System.IAsyncResult OnBeginupdateWebClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientId = ((int)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string sLastName = ((string)(inValues[3]));
            string gender = ((string)(inValues[4]));
            string birthday = ((string)(inValues[5]));
            string email = ((string)(inValues[6]));
            string password = ((string)(inValues[7]));
            string country = ((string)(inValues[8]));
            string state = ((string)(inValues[9]));
            int entrySource = ((int)(inValues[10]));
            int profession = ((int)(inValues[11]));
            string otherProfession = ((string)(inValues[12]));
            string professionalLicense = ((string)(inValues[13]));
            int specialityId = ((int)(inValues[14]));
            string otherSpeciality = ((string)(inValues[15]));
            return this.BeginupdateWebClient(clientId, firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, profession, otherProfession, professionalLicense, specialityId, otherSpeciality, callback, asyncState);
        }
        
        private object[] OnEndupdateWebClient(System.IAsyncResult result) {
            this.EndupdateWebClient(result);
            return null;
        }
        
        private void OnupdateWebClientCompleted(object state) {
            if ((this.updateWebClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateWebClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateWebClientAsync(
                    int clientId, 
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    int profession, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality) {
            this.updateWebClientAsync(clientId, firstName, lastName, sLastName, gender, birthday, email, password, country, state, entrySource, profession, otherProfession, professionalLicense, specialityId, otherSpeciality, null);
        }
        
        public void updateWebClientAsync(
                    int clientId, 
                    string firstName, 
                    string lastName, 
                    string sLastName, 
                    string gender, 
                    string birthday, 
                    string email, 
                    string password, 
                    string country, 
                    string state, 
                    int entrySource, 
                    int profession, 
                    string otherProfession, 
                    string professionalLicense, 
                    int specialityId, 
                    string otherSpeciality, 
                    object userState) {
            if ((this.onBeginupdateWebClientDelegate == null)) {
                this.onBeginupdateWebClientDelegate = new BeginOperationDelegate(this.OnBeginupdateWebClient);
            }
            if ((this.onEndupdateWebClientDelegate == null)) {
                this.onEndupdateWebClientDelegate = new EndOperationDelegate(this.OnEndupdateWebClient);
            }
            if ((this.onupdateWebClientCompletedDelegate == null)) {
                this.onupdateWebClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateWebClientCompleted);
            }
            base.InvokeAsync(this.onBeginupdateWebClientDelegate, new object[] {
                        clientId,
                        firstName,
                        lastName,
                        sLastName,
                        gender,
                        birthday,
                        email,
                        password,
                        country,
                        state,
                        entrySource,
                        profession,
                        otherProfession,
                        professionalLicense,
                        specialityId,
                        otherSpeciality}, this.onEndupdateWebClientDelegate, this.onupdateWebClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo getCalculatorDetail(int calculatorId) {
            return base.Channel.getCalculatorDetail(calculatorId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCalculatorDetail(int calculatorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCalculatorDetail(calculatorId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo EndgetCalculatorDetail(System.IAsyncResult result) {
            return base.Channel.EndgetCalculatorDetail(result);
        }
        
        private System.IAsyncResult OnBegingetCalculatorDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int calculatorId = ((int)(inValues[0]));
            return this.BegingetCalculatorDetail(calculatorId, callback, asyncState);
        }
        
        private object[] OnEndgetCalculatorDetail(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo retVal = this.EndgetCalculatorDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCalculatorDetailCompleted(object state) {
            if ((this.getCalculatorDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCalculatorDetailCompleted(this, new getCalculatorDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCalculatorDetailAsync(int calculatorId) {
            this.getCalculatorDetailAsync(calculatorId, null);
        }
        
        public void getCalculatorDetailAsync(int calculatorId, object userState) {
            if ((this.onBegingetCalculatorDetailDelegate == null)) {
                this.onBegingetCalculatorDetailDelegate = new BeginOperationDelegate(this.OnBegingetCalculatorDetail);
            }
            if ((this.onEndgetCalculatorDetailDelegate == null)) {
                this.onEndgetCalculatorDetailDelegate = new EndOperationDelegate(this.OnEndgetCalculatorDetail);
            }
            if ((this.ongetCalculatorDetailCompletedDelegate == null)) {
                this.ongetCalculatorDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCalculatorDetailCompleted);
            }
            base.InvokeAsync(this.onBegingetCalculatorDetailDelegate, new object[] {
                        calculatorId}, this.onEndgetCalculatorDetailDelegate, this.ongetCalculatorDetailCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo getResultByCalculator(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo) {
            return base.Channel.getResultByCalculator(calculatorInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetResultByCalculator(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetResultByCalculator(calculatorInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo EndgetResultByCalculator(System.IAsyncResult result) {
            return base.Channel.EndgetResultByCalculator(result);
        }
        
        private System.IAsyncResult OnBegingetResultByCalculator(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo)(inValues[0]));
            return this.BegingetResultByCalculator(calculatorInfo, callback, asyncState);
        }
        
        private object[] OnEndgetResultByCalculator(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResultsInfo retVal = this.EndgetResultByCalculator(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetResultByCalculatorCompleted(object state) {
            if ((this.getResultByCalculatorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getResultByCalculatorCompleted(this, new getResultByCalculatorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getResultByCalculatorAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo) {
            this.getResultByCalculatorAsync(calculatorInfo, null);
        }
        
        public void getResultByCalculatorAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CalculatorsDetailInfo calculatorInfo, object userState) {
            if ((this.onBegingetResultByCalculatorDelegate == null)) {
                this.onBegingetResultByCalculatorDelegate = new BeginOperationDelegate(this.OnBegingetResultByCalculator);
            }
            if ((this.onEndgetResultByCalculatorDelegate == null)) {
                this.onEndgetResultByCalculatorDelegate = new EndOperationDelegate(this.OnEndgetResultByCalculator);
            }
            if ((this.ongetResultByCalculatorCompletedDelegate == null)) {
                this.ongetResultByCalculatorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetResultByCalculatorCompleted);
            }
            base.InvokeAsync(this.onBegingetResultByCalculatorDelegate, new object[] {
                        calculatorInfo}, this.onEndgetResultByCalculatorDelegate, this.ongetResultByCalculatorCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> getQuestionnairesByPrefix(string prefix) {
            return base.Channel.getQuestionnairesByPrefix(prefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetQuestionnairesByPrefix(string prefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetQuestionnairesByPrefix(prefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> EndgetQuestionnairesByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetQuestionnairesByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetQuestionnairesByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            return this.BegingetQuestionnairesByPrefix(prefix, callback, asyncState);
        }
        
        private object[] OnEndgetQuestionnairesByPrefix(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> retVal = this.EndgetQuestionnairesByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetQuestionnairesByPrefixCompleted(object state) {
            if ((this.getQuestionnairesByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getQuestionnairesByPrefixCompleted(this, new getQuestionnairesByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getQuestionnairesByPrefixAsync(string prefix) {
            this.getQuestionnairesByPrefixAsync(prefix, null);
        }
        
        public void getQuestionnairesByPrefixAsync(string prefix, object userState) {
            if ((this.onBegingetQuestionnairesByPrefixDelegate == null)) {
                this.onBegingetQuestionnairesByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetQuestionnairesByPrefix);
            }
            if ((this.onEndgetQuestionnairesByPrefixDelegate == null)) {
                this.onEndgetQuestionnairesByPrefixDelegate = new EndOperationDelegate(this.OnEndgetQuestionnairesByPrefix);
            }
            if ((this.ongetQuestionnairesByPrefixCompletedDelegate == null)) {
                this.ongetQuestionnairesByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetQuestionnairesByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetQuestionnairesByPrefixDelegate, new object[] {
                        prefix}, this.onEndgetQuestionnairesByPrefixDelegate, this.ongetQuestionnairesByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> getQuestionnairesBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            return base.Channel.getQuestionnairesBySpeciality(speciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetQuestionnairesBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetQuestionnairesBySpeciality(speciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> EndgetQuestionnairesBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetQuestionnairesBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetQuestionnairesBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities)(inValues[0]));
            return this.BegingetQuestionnairesBySpeciality(speciality, callback, asyncState);
        }
        
        private object[] OnEndgetQuestionnairesBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> retVal = this.EndgetQuestionnairesBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetQuestionnairesBySpecialityCompleted(object state) {
            if ((this.getQuestionnairesBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getQuestionnairesBySpecialityCompleted(this, new getQuestionnairesBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getQuestionnairesBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            this.getQuestionnairesBySpecialityAsync(speciality, null);
        }
        
        public void getQuestionnairesBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, object userState) {
            if ((this.onBegingetQuestionnairesBySpecialityDelegate == null)) {
                this.onBegingetQuestionnairesBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetQuestionnairesBySpeciality);
            }
            if ((this.onEndgetQuestionnairesBySpecialityDelegate == null)) {
                this.onEndgetQuestionnairesBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetQuestionnairesBySpeciality);
            }
            if ((this.ongetQuestionnairesBySpecialityCompletedDelegate == null)) {
                this.ongetQuestionnairesBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetQuestionnairesBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetQuestionnairesBySpecialityDelegate, new object[] {
                        speciality}, this.onEndgetQuestionnairesBySpecialityDelegate, this.ongetQuestionnairesBySpecialityCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> getQuestionnairesByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            return base.Channel.getQuestionnairesByPrefixBySpeciality(prefix, speciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetQuestionnairesByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetQuestionnairesByPrefixBySpeciality(prefix, speciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> EndgetQuestionnairesByPrefixBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetQuestionnairesByPrefixBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetQuestionnairesByPrefixBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities)(inValues[1]));
            return this.BegingetQuestionnairesByPrefixBySpeciality(prefix, speciality, callback, asyncState);
        }
        
        private object[] OnEndgetQuestionnairesByPrefixBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnairesInfo> retVal = this.EndgetQuestionnairesByPrefixBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetQuestionnairesByPrefixBySpecialityCompleted(object state) {
            if ((this.getQuestionnairesByPrefixBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getQuestionnairesByPrefixBySpecialityCompleted(this, new getQuestionnairesByPrefixBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getQuestionnairesByPrefixBySpecialityAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            this.getQuestionnairesByPrefixBySpecialityAsync(prefix, speciality, null);
        }
        
        public void getQuestionnairesByPrefixBySpecialityAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, object userState) {
            if ((this.onBegingetQuestionnairesByPrefixBySpecialityDelegate == null)) {
                this.onBegingetQuestionnairesByPrefixBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetQuestionnairesByPrefixBySpeciality);
            }
            if ((this.onEndgetQuestionnairesByPrefixBySpecialityDelegate == null)) {
                this.onEndgetQuestionnairesByPrefixBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetQuestionnairesByPrefixBySpeciality);
            }
            if ((this.ongetQuestionnairesByPrefixBySpecialityCompletedDelegate == null)) {
                this.ongetQuestionnairesByPrefixBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetQuestionnairesByPrefixBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetQuestionnairesByPrefixBySpecialityDelegate, new object[] {
                        prefix,
                        speciality}, this.onEndgetQuestionnairesByPrefixBySpecialityDelegate, this.ongetQuestionnairesByPrefixBySpecialityCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo getQuestionnaireDetail(int questionnaireId) {
            return base.Channel.getQuestionnaireDetail(questionnaireId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetQuestionnaireDetail(int questionnaireId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetQuestionnaireDetail(questionnaireId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo EndgetQuestionnaireDetail(System.IAsyncResult result) {
            return base.Channel.EndgetQuestionnaireDetail(result);
        }
        
        private System.IAsyncResult OnBegingetQuestionnaireDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int questionnaireId = ((int)(inValues[0]));
            return this.BegingetQuestionnaireDetail(questionnaireId, callback, asyncState);
        }
        
        private object[] OnEndgetQuestionnaireDetail(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.QuestionnaireDetailInfo retVal = this.EndgetQuestionnaireDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetQuestionnaireDetailCompleted(object state) {
            if ((this.getQuestionnaireDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getQuestionnaireDetailCompleted(this, new getQuestionnaireDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getQuestionnaireDetailAsync(int questionnaireId) {
            this.getQuestionnaireDetailAsync(questionnaireId, null);
        }
        
        public void getQuestionnaireDetailAsync(int questionnaireId, object userState) {
            if ((this.onBegingetQuestionnaireDetailDelegate == null)) {
                this.onBegingetQuestionnaireDetailDelegate = new BeginOperationDelegate(this.OnBegingetQuestionnaireDetail);
            }
            if ((this.onEndgetQuestionnaireDetailDelegate == null)) {
                this.onEndgetQuestionnaireDetailDelegate = new EndOperationDelegate(this.OnEndgetQuestionnaireDetail);
            }
            if ((this.ongetQuestionnaireDetailCompletedDelegate == null)) {
                this.ongetQuestionnaireDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetQuestionnaireDetailCompleted);
            }
            base.InvokeAsync(this.onBegingetQuestionnaireDetailDelegate, new object[] {
                        questionnaireId}, this.onEndgetQuestionnaireDetailDelegate, this.ongetQuestionnaireDetailCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo> getSummariesByOption(int questionnaireId, int optionId, byte order) {
            return base.Channel.getSummariesByOption(questionnaireId, optionId, order);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSummariesByOption(int questionnaireId, int optionId, byte order, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSummariesByOption(questionnaireId, optionId, order, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo> EndgetSummariesByOption(System.IAsyncResult result) {
            return base.Channel.EndgetSummariesByOption(result);
        }
        
        private System.IAsyncResult OnBegingetSummariesByOption(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int questionnaireId = ((int)(inValues[0]));
            int optionId = ((int)(inValues[1]));
            byte order = ((byte)(inValues[2]));
            return this.BegingetSummariesByOption(questionnaireId, optionId, order, callback, asyncState);
        }
        
        private object[] OnEndgetSummariesByOption(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SummariesInfo> retVal = this.EndgetSummariesByOption(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSummariesByOptionCompleted(object state) {
            if ((this.getSummariesByOptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSummariesByOptionCompleted(this, new getSummariesByOptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSummariesByOptionAsync(int questionnaireId, int optionId, byte order) {
            this.getSummariesByOptionAsync(questionnaireId, optionId, order, null);
        }
        
        public void getSummariesByOptionAsync(int questionnaireId, int optionId, byte order, object userState) {
            if ((this.onBegingetSummariesByOptionDelegate == null)) {
                this.onBegingetSummariesByOptionDelegate = new BeginOperationDelegate(this.OnBegingetSummariesByOption);
            }
            if ((this.onEndgetSummariesByOptionDelegate == null)) {
                this.onEndgetSummariesByOptionDelegate = new EndOperationDelegate(this.OnEndgetSummariesByOption);
            }
            if ((this.ongetSummariesByOptionCompletedDelegate == null)) {
                this.ongetSummariesByOptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSummariesByOptionCompleted);
            }
            base.InvokeAsync(this.onBegingetSummariesByOptionDelegate, new object[] {
                        questionnaireId,
                        optionId,
                        order}, this.onEndgetSummariesByOptionDelegate, this.ongetSummariesByOptionCompletedDelegate, userState);
        }
        
        public int addPharmacyUserConnection(string code, string ip, System.DateTime dateConnection, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session) {
            return base.Channel.addPharmacyUserConnection(code, ip, dateConnection, session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddPharmacyUserConnection(string code, string ip, System.DateTime dateConnection, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddPharmacyUserConnection(code, ip, dateConnection, session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndaddPharmacyUserConnection(System.IAsyncResult result) {
            return base.Channel.EndaddPharmacyUserConnection(result);
        }
        
        private System.IAsyncResult OnBeginaddPharmacyUserConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            string ip = ((string)(inValues[1]));
            System.DateTime dateConnection = ((System.DateTime)(inValues[2]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions)(inValues[3]));
            return this.BeginaddPharmacyUserConnection(code, ip, dateConnection, session, callback, asyncState);
        }
        
        private object[] OnEndaddPharmacyUserConnection(System.IAsyncResult result) {
            int retVal = this.EndaddPharmacyUserConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddPharmacyUserConnectionCompleted(object state) {
            if ((this.addPharmacyUserConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addPharmacyUserConnectionCompleted(this, new addPharmacyUserConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addPharmacyUserConnectionAsync(string code, string ip, System.DateTime dateConnection, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session) {
            this.addPharmacyUserConnectionAsync(code, ip, dateConnection, session, null);
        }
        
        public void addPharmacyUserConnectionAsync(string code, string ip, System.DateTime dateConnection, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSessions session, object userState) {
            if ((this.onBeginaddPharmacyUserConnectionDelegate == null)) {
                this.onBeginaddPharmacyUserConnectionDelegate = new BeginOperationDelegate(this.OnBeginaddPharmacyUserConnection);
            }
            if ((this.onEndaddPharmacyUserConnectionDelegate == null)) {
                this.onEndaddPharmacyUserConnectionDelegate = new EndOperationDelegate(this.OnEndaddPharmacyUserConnection);
            }
            if ((this.onaddPharmacyUserConnectionCompletedDelegate == null)) {
                this.onaddPharmacyUserConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddPharmacyUserConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginaddPharmacyUserConnectionDelegate, new object[] {
                        code,
                        ip,
                        dateConnection,
                        session}, this.onEndaddPharmacyUserConnectionDelegate, this.onaddPharmacyUserConnectionCompletedDelegate, userState);
        }
        
        public int addUserConnection(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo) {
            return base.Channel.addUserConnection(connectionInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddUserConnection(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddUserConnection(connectionInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndaddUserConnection(System.IAsyncResult result) {
            return base.Channel.EndaddUserConnection(result);
        }
        
        private System.IAsyncResult OnBeginaddUserConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo)(inValues[0]));
            return this.BeginaddUserConnection(connectionInfo, callback, asyncState);
        }
        
        private object[] OnEndaddUserConnection(System.IAsyncResult result) {
            int retVal = this.EndaddUserConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddUserConnectionCompleted(object state) {
            if ((this.addUserConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addUserConnectionCompleted(this, new addUserConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addUserConnectionAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo) {
            this.addUserConnectionAsync(connectionInfo, null);
        }
        
        public void addUserConnectionAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo connectionInfo, object userState) {
            if ((this.onBeginaddUserConnectionDelegate == null)) {
                this.onBeginaddUserConnectionDelegate = new BeginOperationDelegate(this.OnBeginaddUserConnection);
            }
            if ((this.onEndaddUserConnectionDelegate == null)) {
                this.onEndaddUserConnectionDelegate = new EndOperationDelegate(this.OnEndaddUserConnection);
            }
            if ((this.onaddUserConnectionCompletedDelegate == null)) {
                this.onaddUserConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddUserConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginaddUserConnectionDelegate, new object[] {
                        connectionInfo}, this.onEndaddUserConnectionDelegate, this.onaddUserConnectionCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo getUserConnection(int userConnectionId) {
            return base.Channel.getUserConnection(userConnectionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUserConnection(int userConnectionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUserConnection(userConnectionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo EndgetUserConnection(System.IAsyncResult result) {
            return base.Channel.EndgetUserConnection(result);
        }
        
        private System.IAsyncResult OnBegingetUserConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userConnectionId = ((int)(inValues[0]));
            return this.BegingetUserConnection(userConnectionId, callback, asyncState);
        }
        
        private object[] OnEndgetUserConnection(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyUserConnectionsInfo retVal = this.EndgetUserConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetUserConnectionCompleted(object state) {
            if ((this.getUserConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserConnectionCompleted(this, new getUserConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserConnectionAsync(int userConnectionId) {
            this.getUserConnectionAsync(userConnectionId, null);
        }
        
        public void getUserConnectionAsync(int userConnectionId, object userState) {
            if ((this.onBegingetUserConnectionDelegate == null)) {
                this.onBegingetUserConnectionDelegate = new BeginOperationDelegate(this.OnBegingetUserConnection);
            }
            if ((this.onEndgetUserConnectionDelegate == null)) {
                this.onEndgetUserConnectionDelegate = new EndOperationDelegate(this.OnEndgetUserConnection);
            }
            if ((this.ongetUserConnectionCompletedDelegate == null)) {
                this.ongetUserConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserConnectionCompleted);
            }
            base.InvokeAsync(this.onBegingetUserConnectionDelegate, new object[] {
                        userConnectionId}, this.onEndgetUserConnectionDelegate, this.ongetUserConnectionCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo getPharmacyUser(string userName, string userPassword) {
            return base.Channel.getPharmacyUser(userName, userPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetPharmacyUser(string userName, string userPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPharmacyUser(userName, userPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo EndgetPharmacyUser(System.IAsyncResult result) {
            return base.Channel.EndgetPharmacyUser(result);
        }
        
        private System.IAsyncResult OnBegingetPharmacyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string userPassword = ((string)(inValues[1]));
            return this.BegingetPharmacyUser(userName, userPassword, callback, asyncState);
        }
        
        private object[] OnEndgetPharmacyUser(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo retVal = this.EndgetPharmacyUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPharmacyUserCompleted(object state) {
            if ((this.getPharmacyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPharmacyUserCompleted(this, new getPharmacyUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPharmacyUserAsync(string userName, string userPassword) {
            this.getPharmacyUserAsync(userName, userPassword, null);
        }
        
        public void getPharmacyUserAsync(string userName, string userPassword, object userState) {
            if ((this.onBegingetPharmacyUserDelegate == null)) {
                this.onBegingetPharmacyUserDelegate = new BeginOperationDelegate(this.OnBegingetPharmacyUser);
            }
            if ((this.onEndgetPharmacyUserDelegate == null)) {
                this.onEndgetPharmacyUserDelegate = new EndOperationDelegate(this.OnEndgetPharmacyUser);
            }
            if ((this.ongetPharmacyUserCompletedDelegate == null)) {
                this.ongetPharmacyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPharmacyUserCompleted);
            }
            base.InvokeAsync(this.onBegingetPharmacyUserDelegate, new object[] {
                        userName,
                        userPassword}, this.onEndgetPharmacyUserDelegate, this.ongetPharmacyUserCompletedDelegate, userState);
        }
        
        public bool checkSession(string code, int sessionTime) {
            return base.Channel.checkSession(code, sessionTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincheckSession(string code, int sessionTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincheckSession(code, sessionTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndcheckSession(System.IAsyncResult result) {
            return base.Channel.EndcheckSession(result);
        }
        
        private System.IAsyncResult OnBegincheckSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            int sessionTime = ((int)(inValues[1]));
            return this.BegincheckSession(code, sessionTime, callback, asyncState);
        }
        
        private object[] OnEndcheckSession(System.IAsyncResult result) {
            bool retVal = this.EndcheckSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OncheckSessionCompleted(object state) {
            if ((this.checkSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.checkSessionCompleted(this, new checkSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void checkSessionAsync(string code, int sessionTime) {
            this.checkSessionAsync(code, sessionTime, null);
        }
        
        public void checkSessionAsync(string code, int sessionTime, object userState) {
            if ((this.onBegincheckSessionDelegate == null)) {
                this.onBegincheckSessionDelegate = new BeginOperationDelegate(this.OnBegincheckSession);
            }
            if ((this.onEndcheckSessionDelegate == null)) {
                this.onEndcheckSessionDelegate = new EndOperationDelegate(this.OnEndcheckSession);
            }
            if ((this.oncheckSessionCompletedDelegate == null)) {
                this.oncheckSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncheckSessionCompleted);
            }
            base.InvokeAsync(this.onBegincheckSessionDelegate, new object[] {
                        code,
                        sessionTime}, this.onEndcheckSessionDelegate, this.oncheckSessionCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo getPharmacyUserByCode(string code) {
            return base.Channel.getPharmacyUserByCode(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetPharmacyUserByCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPharmacyUserByCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo EndgetPharmacyUserByCode(System.IAsyncResult result) {
            return base.Channel.EndgetPharmacyUserByCode(result);
        }
        
        private System.IAsyncResult OnBegingetPharmacyUserByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BegingetPharmacyUserByCode(code, callback, asyncState);
        }
        
        private object[] OnEndgetPharmacyUserByCode(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyUserInfo retVal = this.EndgetPharmacyUserByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPharmacyUserByCodeCompleted(object state) {
            if ((this.getPharmacyUserByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPharmacyUserByCodeCompleted(this, new getPharmacyUserByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPharmacyUserByCodeAsync(string code) {
            this.getPharmacyUserByCodeAsync(code, null);
        }
        
        public void getPharmacyUserByCodeAsync(string code, object userState) {
            if ((this.onBegingetPharmacyUserByCodeDelegate == null)) {
                this.onBegingetPharmacyUserByCodeDelegate = new BeginOperationDelegate(this.OnBegingetPharmacyUserByCode);
            }
            if ((this.onEndgetPharmacyUserByCodeDelegate == null)) {
                this.onEndgetPharmacyUserByCodeDelegate = new EndOperationDelegate(this.OnEndgetPharmacyUserByCode);
            }
            if ((this.ongetPharmacyUserByCodeCompletedDelegate == null)) {
                this.ongetPharmacyUserByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPharmacyUserByCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetPharmacyUserByCodeDelegate, new object[] {
                        code}, this.onEndgetPharmacyUserByCodeDelegate, this.ongetPharmacyUserByCodeCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo getWebApplicationUserByCode(string code) {
            return base.Channel.getWebApplicationUserByCode(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetWebApplicationUserByCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetWebApplicationUserByCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo EndgetWebApplicationUserByCode(System.IAsyncResult result) {
            return base.Channel.EndgetWebApplicationUserByCode(result);
        }
        
        private System.IAsyncResult OnBegingetWebApplicationUserByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BegingetWebApplicationUserByCode(code, callback, asyncState);
        }
        
        private object[] OnEndgetWebApplicationUserByCode(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebApplicationUsersInfo retVal = this.EndgetWebApplicationUserByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetWebApplicationUserByCodeCompleted(object state) {
            if ((this.getWebApplicationUserByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getWebApplicationUserByCodeCompleted(this, new getWebApplicationUserByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getWebApplicationUserByCodeAsync(string code) {
            this.getWebApplicationUserByCodeAsync(code, null);
        }
        
        public void getWebApplicationUserByCodeAsync(string code, object userState) {
            if ((this.onBegingetWebApplicationUserByCodeDelegate == null)) {
                this.onBegingetWebApplicationUserByCodeDelegate = new BeginOperationDelegate(this.OnBegingetWebApplicationUserByCode);
            }
            if ((this.onEndgetWebApplicationUserByCodeDelegate == null)) {
                this.onEndgetWebApplicationUserByCodeDelegate = new EndOperationDelegate(this.OnEndgetWebApplicationUserByCode);
            }
            if ((this.ongetWebApplicationUserByCodeCompletedDelegate == null)) {
                this.ongetWebApplicationUserByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetWebApplicationUserByCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetWebApplicationUserByCodeDelegate, new object[] {
                        code}, this.onEndgetWebApplicationUserByCodeDelegate, this.ongetWebApplicationUserByCodeCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo getContact(string country) {
            return base.Channel.getContact(country);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetContact(string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetContact(country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo EndgetContact(System.IAsyncResult result) {
            return base.Channel.EndgetContact(result);
        }
        
        private System.IAsyncResult OnBegingetContact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string country = ((string)(inValues[0]));
            return this.BegingetContact(country, callback, asyncState);
        }
        
        private object[] OnEndgetContact(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ContactInfo retVal = this.EndgetContact(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetContactCompleted(object state) {
            if ((this.getContactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getContactCompleted(this, new getContactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getContactAsync(string country) {
            this.getContactAsync(country, null);
        }
        
        public void getContactAsync(string country, object userState) {
            if ((this.onBegingetContactDelegate == null)) {
                this.onBegingetContactDelegate = new BeginOperationDelegate(this.OnBegingetContact);
            }
            if ((this.onEndgetContactDelegate == null)) {
                this.onEndgetContactDelegate = new EndOperationDelegate(this.OnEndgetContact);
            }
            if ((this.ongetContactCompletedDelegate == null)) {
                this.ongetContactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetContactCompleted);
            }
            base.InvokeAsync(this.onBegingetContactDelegate, new object[] {
                        country}, this.onEndgetContactDelegate, this.ongetContactCompletedDelegate, userState);
        }
        
        public string getTerms() {
            return base.Channel.getTerms();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetTerms(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTerms(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetTerms(System.IAsyncResult result) {
            return base.Channel.EndgetTerms(result);
        }
        
        private System.IAsyncResult OnBegingetTerms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetTerms(callback, asyncState);
        }
        
        private object[] OnEndgetTerms(System.IAsyncResult result) {
            string retVal = this.EndgetTerms(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTermsCompleted(object state) {
            if ((this.getTermsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTermsCompleted(this, new getTermsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTermsAsync() {
            this.getTermsAsync(null);
        }
        
        public void getTermsAsync(object userState) {
            if ((this.onBegingetTermsDelegate == null)) {
                this.onBegingetTermsDelegate = new BeginOperationDelegate(this.OnBegingetTerms);
            }
            if ((this.onEndgetTermsDelegate == null)) {
                this.onEndgetTermsDelegate = new EndOperationDelegate(this.OnEndgetTerms);
            }
            if ((this.ongetTermsCompletedDelegate == null)) {
                this.ongetTermsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTermsCompleted);
            }
            base.InvokeAsync(this.onBegingetTermsDelegate, null, this.onEndgetTermsDelegate, this.ongetTermsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo> getCountries() {
            return base.Channel.getCountries();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCountries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCountries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo> EndgetCountries(System.IAsyncResult result) {
            return base.Channel.EndgetCountries(result);
        }
        
        private System.IAsyncResult OnBegingetCountries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetCountries(callback, asyncState);
        }
        
        private object[] OnEndgetCountries(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo> retVal = this.EndgetCountries(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCountriesCompleted(object state) {
            if ((this.getCountriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCountriesCompleted(this, new getCountriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCountriesAsync() {
            this.getCountriesAsync(null);
        }
        
        public void getCountriesAsync(object userState) {
            if ((this.onBegingetCountriesDelegate == null)) {
                this.onBegingetCountriesDelegate = new BeginOperationDelegate(this.OnBegingetCountries);
            }
            if ((this.onEndgetCountriesDelegate == null)) {
                this.onEndgetCountriesDelegate = new EndOperationDelegate(this.OnEndgetCountries);
            }
            if ((this.ongetCountriesCompletedDelegate == null)) {
                this.ongetCountriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCountriesCompleted);
            }
            base.InvokeAsync(this.onBegingetCountriesDelegate, null, this.onEndgetCountriesDelegate, this.ongetCountriesCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo getCountry(int countryId) {
            return base.Channel.getCountry(countryId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCountry(int countryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCountry(countryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo EndgetCountry(System.IAsyncResult result) {
            return base.Channel.EndgetCountry(result);
        }
        
        private System.IAsyncResult OnBegingetCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int countryId = ((int)(inValues[0]));
            return this.BegingetCountry(countryId, callback, asyncState);
        }
        
        private object[] OnEndgetCountry(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryInfo retVal = this.EndgetCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCountryCompleted(object state) {
            if ((this.getCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCountryCompleted(this, new getCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCountryAsync(int countryId) {
            this.getCountryAsync(countryId, null);
        }
        
        public void getCountryAsync(int countryId, object userState) {
            if ((this.onBegingetCountryDelegate == null)) {
                this.onBegingetCountryDelegate = new BeginOperationDelegate(this.OnBegingetCountry);
            }
            if ((this.onEndgetCountryDelegate == null)) {
                this.onEndgetCountryDelegate = new EndOperationDelegate(this.OnEndgetCountry);
            }
            if ((this.ongetCountryCompletedDelegate == null)) {
                this.ongetCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCountryCompleted);
            }
            base.InvokeAsync(this.onBegingetCountryDelegate, new object[] {
                        countryId}, this.onEndgetCountryDelegate, this.ongetCountryCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> getStateByCountry(byte countryId) {
            return base.Channel.getStateByCountry(countryId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetStateByCountry(byte countryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetStateByCountry(countryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> EndgetStateByCountry(System.IAsyncResult result) {
            return base.Channel.EndgetStateByCountry(result);
        }
        
        private System.IAsyncResult OnBegingetStateByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte countryId = ((byte)(inValues[0]));
            return this.BegingetStateByCountry(countryId, callback, asyncState);
        }
        
        private object[] OnEndgetStateByCountry(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> retVal = this.EndgetStateByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetStateByCountryCompleted(object state) {
            if ((this.getStateByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getStateByCountryCompleted(this, new getStateByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getStateByCountryAsync(byte countryId) {
            this.getStateByCountryAsync(countryId, null);
        }
        
        public void getStateByCountryAsync(byte countryId, object userState) {
            if ((this.onBegingetStateByCountryDelegate == null)) {
                this.onBegingetStateByCountryDelegate = new BeginOperationDelegate(this.OnBegingetStateByCountry);
            }
            if ((this.onEndgetStateByCountryDelegate == null)) {
                this.onEndgetStateByCountryDelegate = new EndOperationDelegate(this.OnEndgetStateByCountry);
            }
            if ((this.ongetStateByCountryCompletedDelegate == null)) {
                this.ongetStateByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetStateByCountryCompleted);
            }
            base.InvokeAsync(this.onBegingetStateByCountryDelegate, new object[] {
                        countryId}, this.onEndgetStateByCountryDelegate, this.ongetStateByCountryCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo getState(int stateId) {
            return base.Channel.getState(stateId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetState(int stateId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetState(stateId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo EndgetState(System.IAsyncResult result) {
            return base.Channel.EndgetState(result);
        }
        
        private System.IAsyncResult OnBegingetState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int stateId = ((int)(inValues[0]));
            return this.BegingetState(stateId, callback, asyncState);
        }
        
        private object[] OnEndgetState(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo retVal = this.EndgetState(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetStateCompleted(object state) {
            if ((this.getStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getStateCompleted(this, new getStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getStateAsync(int stateId) {
            this.getStateAsync(stateId, null);
        }
        
        public void getStateAsync(int stateId, object userState) {
            if ((this.onBegingetStateDelegate == null)) {
                this.onBegingetStateDelegate = new BeginOperationDelegate(this.OnBegingetState);
            }
            if ((this.onEndgetStateDelegate == null)) {
                this.onEndgetStateDelegate = new EndOperationDelegate(this.OnEndgetState);
            }
            if ((this.ongetStateCompletedDelegate == null)) {
                this.ongetStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetStateCompleted);
            }
            base.InvokeAsync(this.onBegingetStateDelegate, new object[] {
                        stateId}, this.onEndgetStateDelegate, this.ongetStateCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo getEditionByCode(string code) {
            return base.Channel.getEditionByCode(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetEditionByCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetEditionByCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo EndgetEditionByCode(System.IAsyncResult result) {
            return base.Channel.EndgetEditionByCode(result);
        }
        
        private System.IAsyncResult OnBegingetEditionByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BegingetEditionByCode(code, callback, asyncState);
        }
        
        private object[] OnEndgetEditionByCode(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EditionInfo retVal = this.EndgetEditionByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetEditionByCodeCompleted(object state) {
            if ((this.getEditionByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getEditionByCodeCompleted(this, new getEditionByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getEditionByCodeAsync(string code) {
            this.getEditionByCodeAsync(code, null);
        }
        
        public void getEditionByCodeAsync(string code, object userState) {
            if ((this.onBegingetEditionByCodeDelegate == null)) {
                this.onBegingetEditionByCodeDelegate = new BeginOperationDelegate(this.OnBegingetEditionByCode);
            }
            if ((this.onEndgetEditionByCodeDelegate == null)) {
                this.onEndgetEditionByCodeDelegate = new EndOperationDelegate(this.OnEndgetEditionByCode);
            }
            if ((this.ongetEditionByCodeCompletedDelegate == null)) {
                this.ongetEditionByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetEditionByCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetEditionByCodeDelegate, new object[] {
                        code}, this.onEndgetEditionByCodeDelegate, this.ongetEditionByCodeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo> getCountriesByTarget(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target) {
            return base.Channel.getCountriesByTarget(target);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCountriesByTarget(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCountriesByTarget(target, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo> EndgetCountriesByTarget(System.IAsyncResult result) {
            return base.Channel.EndgetCountriesByTarget(result);
        }
        
        private System.IAsyncResult OnBegingetCountriesByTarget(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[0]));
            return this.BegingetCountriesByTarget(target, callback, asyncState);
        }
        
        private object[] OnEndgetCountriesByTarget(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CountryMobileInfo> retVal = this.EndgetCountriesByTarget(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCountriesByTargetCompleted(object state) {
            if ((this.getCountriesByTargetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCountriesByTargetCompleted(this, new getCountriesByTargetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCountriesByTargetAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target) {
            this.getCountriesByTargetAsync(target, null);
        }
        
        public void getCountriesByTargetAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, object userState) {
            if ((this.onBegingetCountriesByTargetDelegate == null)) {
                this.onBegingetCountriesByTargetDelegate = new BeginOperationDelegate(this.OnBegingetCountriesByTarget);
            }
            if ((this.onEndgetCountriesByTargetDelegate == null)) {
                this.onEndgetCountriesByTargetDelegate = new EndOperationDelegate(this.OnEndgetCountriesByTarget);
            }
            if ((this.ongetCountriesByTargetCompletedDelegate == null)) {
                this.ongetCountriesByTargetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCountriesByTargetCompleted);
            }
            base.InvokeAsync(this.onBegingetCountriesByTargetDelegate, new object[] {
                        target}, this.onEndgetCountriesByTargetDelegate, this.ongetCountriesByTargetCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo> getPhysicalActivitiesByCalculatorResult(int calculatorId, int resultId) {
            return base.Channel.getPhysicalActivitiesByCalculatorResult(calculatorId, resultId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetPhysicalActivitiesByCalculatorResult(int calculatorId, int resultId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPhysicalActivitiesByCalculatorResult(calculatorId, resultId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo> EndgetPhysicalActivitiesByCalculatorResult(System.IAsyncResult result) {
            return base.Channel.EndgetPhysicalActivitiesByCalculatorResult(result);
        }
        
        private System.IAsyncResult OnBegingetPhysicalActivitiesByCalculatorResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int calculatorId = ((int)(inValues[0]));
            int resultId = ((int)(inValues[1]));
            return this.BegingetPhysicalActivitiesByCalculatorResult(calculatorId, resultId, callback, asyncState);
        }
        
        private object[] OnEndgetPhysicalActivitiesByCalculatorResult(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PhysicalActivityDetailInfo> retVal = this.EndgetPhysicalActivitiesByCalculatorResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPhysicalActivitiesByCalculatorResultCompleted(object state) {
            if ((this.getPhysicalActivitiesByCalculatorResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPhysicalActivitiesByCalculatorResultCompleted(this, new getPhysicalActivitiesByCalculatorResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPhysicalActivitiesByCalculatorResultAsync(int calculatorId, int resultId) {
            this.getPhysicalActivitiesByCalculatorResultAsync(calculatorId, resultId, null);
        }
        
        public void getPhysicalActivitiesByCalculatorResultAsync(int calculatorId, int resultId, object userState) {
            if ((this.onBegingetPhysicalActivitiesByCalculatorResultDelegate == null)) {
                this.onBegingetPhysicalActivitiesByCalculatorResultDelegate = new BeginOperationDelegate(this.OnBegingetPhysicalActivitiesByCalculatorResult);
            }
            if ((this.onEndgetPhysicalActivitiesByCalculatorResultDelegate == null)) {
                this.onEndgetPhysicalActivitiesByCalculatorResultDelegate = new EndOperationDelegate(this.OnEndgetPhysicalActivitiesByCalculatorResult);
            }
            if ((this.ongetPhysicalActivitiesByCalculatorResultCompletedDelegate == null)) {
                this.ongetPhysicalActivitiesByCalculatorResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPhysicalActivitiesByCalculatorResultCompleted);
            }
            base.InvokeAsync(this.onBegingetPhysicalActivitiesByCalculatorResultDelegate, new object[] {
                        calculatorId,
                        resultId}, this.onEndgetPhysicalActivitiesByCalculatorResultDelegate, this.ongetPhysicalActivitiesByCalculatorResultCompletedDelegate, userState);
        }
        
        public string saveClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses) {
            return base.Channel.saveClientInfo(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveClientInfo(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndsaveClientInfo(System.IAsyncResult result) {
            return base.Channel.EndsaveClientInfo(result);
        }
        
        private System.IAsyncResult OnBeginsaveClientInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string slastName = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[4]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[5]));
            string specialityName = ((string)(inValues[6]));
            string professionalLicense = ((string)(inValues[7]));
            string codePrefix = ((string)(inValues[8]));
            string codeString = ((string)(inValues[9]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[10]));
            string macAddresses = ((string)(inValues[11]));
            return this.BeginsaveClientInfo(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses, callback, asyncState);
        }
        
        private object[] OnEndsaveClientInfo(System.IAsyncResult result) {
            string retVal = this.EndsaveClientInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveClientInfoCompleted(object state) {
            if ((this.saveClientInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveClientInfoCompleted(this, new saveClientInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveClientInfoAsync(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses) {
            this.saveClientInfoAsync(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses, null);
        }
        
        public void saveClientInfoAsync(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses, object userState) {
            if ((this.onBeginsaveClientInfoDelegate == null)) {
                this.onBeginsaveClientInfoDelegate = new BeginOperationDelegate(this.OnBeginsaveClientInfo);
            }
            if ((this.onEndsaveClientInfoDelegate == null)) {
                this.onEndsaveClientInfoDelegate = new EndOperationDelegate(this.OnEndsaveClientInfo);
            }
            if ((this.onsaveClientInfoCompletedDelegate == null)) {
                this.onsaveClientInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveClientInfoCompleted);
            }
            base.InvokeAsync(this.onBeginsaveClientInfoDelegate, new object[] {
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        codePrefix,
                        codeString,
                        source,
                        macAddresses}, this.onEndsaveClientInfoDelegate, this.onsaveClientInfoCompletedDelegate, userState);
        }
        
        public void updateClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses) {
            base.Channel.updateClientInfo(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateClientInfo(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateClientInfo(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateClientInfo(System.IAsyncResult result) {
            base.Channel.EndupdateClientInfo(result);
        }
        
        private System.IAsyncResult OnBeginupdateClientInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string slastName = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[4]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[5]));
            string specialityName = ((string)(inValues[6]));
            string professionalLicense = ((string)(inValues[7]));
            string codePrefix = ((string)(inValues[8]));
            string codeString = ((string)(inValues[9]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[10]));
            string macAddresses = ((string)(inValues[11]));
            return this.BeginupdateClientInfo(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses, callback, asyncState);
        }
        
        private object[] OnEndupdateClientInfo(System.IAsyncResult result) {
            this.EndupdateClientInfo(result);
            return null;
        }
        
        private void OnupdateClientInfoCompleted(object state) {
            if ((this.updateClientInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateClientInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateClientInfoAsync(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses) {
            this.updateClientInfoAsync(firstName, lastName, slastName, email, profession, speciality, specialityName, professionalLicense, codePrefix, codeString, source, macAddresses, null);
        }
        
        public void updateClientInfoAsync(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string codePrefix, string codeString, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string macAddresses, object userState) {
            if ((this.onBeginupdateClientInfoDelegate == null)) {
                this.onBeginupdateClientInfoDelegate = new BeginOperationDelegate(this.OnBeginupdateClientInfo);
            }
            if ((this.onEndupdateClientInfoDelegate == null)) {
                this.onEndupdateClientInfoDelegate = new EndOperationDelegate(this.OnEndupdateClientInfo);
            }
            if ((this.onupdateClientInfoCompletedDelegate == null)) {
                this.onupdateClientInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateClientInfoCompleted);
            }
            base.InvokeAsync(this.onBeginupdateClientInfoDelegate, new object[] {
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        codePrefix,
                        codeString,
                        source,
                        macAddresses}, this.onEndupdateClientInfoDelegate, this.onupdateClientInfoCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo saveClient(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string hwIdentifier, string licenseKey, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target) {
            return base.Channel.saveClient(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, source, hwIdentifier, licenseKey, target);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveClient(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveClient(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, source, hwIdentifier, licenseKey, target, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo EndsaveClient(System.IAsyncResult result) {
            return base.Channel.EndsaveClient(result);
        }
        
        private System.IAsyncResult OnBeginsaveClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string slastName = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[4]));
            string otherProfession = ((string)(inValues[5]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[6]));
            string specialityName = ((string)(inValues[7]));
            string professionalLicense = ((string)(inValues[8]));
            string country = ((string)(inValues[9]));
            string state = ((string)(inValues[10]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[11]));
            string hwIdentifier = ((string)(inValues[12]));
            string licenseKey = ((string)(inValues[13]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[14]));
            return this.BeginsaveClient(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, source, hwIdentifier, licenseKey, target, callback, asyncState);
        }
        
        private object[] OnEndsaveClient(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicenseDetailInfo retVal = this.EndsaveClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveClientCompleted(object state) {
            if ((this.saveClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveClientCompleted(this, new saveClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveClientAsync(string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, string hwIdentifier, string licenseKey, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target) {
            this.saveClientAsync(firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, source, hwIdentifier, licenseKey, target, null);
        }
        
        public void saveClientAsync(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string country, 
                    string state, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    string hwIdentifier, 
                    string licenseKey, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    object userState) {
            if ((this.onBeginsaveClientDelegate == null)) {
                this.onBeginsaveClientDelegate = new BeginOperationDelegate(this.OnBeginsaveClient);
            }
            if ((this.onEndsaveClientDelegate == null)) {
                this.onEndsaveClientDelegate = new EndOperationDelegate(this.OnEndsaveClient);
            }
            if ((this.onsaveClientCompletedDelegate == null)) {
                this.onsaveClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveClientCompleted);
            }
            base.InvokeAsync(this.onBeginsaveClientDelegate, new object[] {
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        country,
                        state,
                        source,
                        hwIdentifier,
                        licenseKey,
                        target}, this.onEndsaveClientDelegate, this.onsaveClientCompletedDelegate, userState);
        }
        
        public void updateClient(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state) {
            base.Channel.updateClient(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateClient(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateClient(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateClient(System.IAsyncResult result) {
            base.Channel.EndupdateClient(result);
        }
        
        private System.IAsyncResult OnBeginupdateClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            string firstName = ((string)(inValues[1]));
            string lastName = ((string)(inValues[2]));
            string slastName = ((string)(inValues[3]));
            string email = ((string)(inValues[4]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[5]));
            string otherProfession = ((string)(inValues[6]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[7]));
            string specialityName = ((string)(inValues[8]));
            string professionalLicense = ((string)(inValues[9]));
            string country = ((string)(inValues[10]));
            string state = ((string)(inValues[11]));
            return this.BeginupdateClient(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, callback, asyncState);
        }
        
        private object[] OnEndupdateClient(System.IAsyncResult result) {
            this.EndupdateClient(result);
            return null;
        }
        
        private void OnupdateClientCompleted(object state) {
            if ((this.updateClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateClientAsync(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state) {
            this.updateClientAsync(codeString, firstName, lastName, slastName, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, state, null);
        }
        
        public void updateClientAsync(string codeString, string firstName, string lastName, string slastName, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, string state, object userState) {
            if ((this.onBeginupdateClientDelegate == null)) {
                this.onBeginupdateClientDelegate = new BeginOperationDelegate(this.OnBeginupdateClient);
            }
            if ((this.onEndupdateClientDelegate == null)) {
                this.onEndupdateClientDelegate = new EndOperationDelegate(this.OnEndupdateClient);
            }
            if ((this.onupdateClientCompletedDelegate == null)) {
                this.onupdateClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateClientCompleted);
            }
            base.InvokeAsync(this.onBeginupdateClientDelegate, new object[] {
                        codeString,
                        firstName,
                        lastName,
                        slastName,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        country,
                        state}, this.onEndupdateClientDelegate, this.onupdateClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo saveDownloadClient(string firstName, string lastName, string slastName, string state, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string codePrefix) {
            return base.Channel.saveDownloadClient(firstName, lastName, slastName, state, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, source, target, codePrefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveDownloadClient(
                    string firstName, 
                    string lastName, 
                    string slastName, 
                    string state, 
                    string email, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, 
                    string otherProfession, 
                    System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, 
                    string specialityName, 
                    string professionalLicense, 
                    string country, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, 
                    PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, 
                    string codePrefix, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveDownloadClient(firstName, lastName, slastName, state, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, source, target, codePrefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo EndsaveDownloadClient(System.IAsyncResult result) {
            return base.Channel.EndsaveDownloadClient(result);
        }
        
        private System.IAsyncResult OnBeginsaveDownloadClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string slastName = ((string)(inValues[2]));
            string state = ((string)(inValues[3]));
            string email = ((string)(inValues[4]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions)(inValues[5]));
            string otherProfession = ((string)(inValues[6]));
            System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality = ((System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities>)(inValues[7]));
            string specialityName = ((string)(inValues[8]));
            string professionalLicense = ((string)(inValues[9]));
            string country = ((string)(inValues[10]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources)(inValues[11]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[12]));
            string codePrefix = ((string)(inValues[13]));
            return this.BeginsaveDownloadClient(firstName, lastName, slastName, state, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, source, target, codePrefix, callback, asyncState);
        }
        
        private object[] OnEndsaveDownloadClient(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo retVal = this.EndsaveDownloadClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveDownloadClientCompleted(object state) {
            if ((this.saveDownloadClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveDownloadClientCompleted(this, new saveDownloadClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveDownloadClientAsync(string firstName, string lastName, string slastName, string state, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string codePrefix) {
            this.saveDownloadClientAsync(firstName, lastName, slastName, state, email, profession, otherProfession, speciality, specialityName, professionalLicense, country, source, target, codePrefix, null);
        }
        
        public void saveDownloadClientAsync(string firstName, string lastName, string slastName, string state, string email, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsProfessions profession, string otherProfession, System.Nullable<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities> speciality, string specialityName, string professionalLicense, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEntrySources source, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string codePrefix, object userState) {
            if ((this.onBeginsaveDownloadClientDelegate == null)) {
                this.onBeginsaveDownloadClientDelegate = new BeginOperationDelegate(this.OnBeginsaveDownloadClient);
            }
            if ((this.onEndsaveDownloadClientDelegate == null)) {
                this.onEndsaveDownloadClientDelegate = new EndOperationDelegate(this.OnEndsaveDownloadClient);
            }
            if ((this.onsaveDownloadClientCompletedDelegate == null)) {
                this.onsaveDownloadClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveDownloadClientCompleted);
            }
            base.InvokeAsync(this.onBeginsaveDownloadClientDelegate, new object[] {
                        firstName,
                        lastName,
                        slastName,
                        state,
                        email,
                        profession,
                        otherProfession,
                        speciality,
                        specialityName,
                        professionalLicense,
                        country,
                        source,
                        target,
                        codePrefix}, this.onEndsaveDownloadClientDelegate, this.onsaveDownloadClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByIMEI(string IMEI) {
            return base.Channel.getCodeByIMEI(IMEI);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCodeByIMEI(string IMEI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCodeByIMEI(IMEI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByIMEI(System.IAsyncResult result) {
            return base.Channel.EndgetCodeByIMEI(result);
        }
        
        private System.IAsyncResult OnBegingetCodeByIMEI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string IMEI = ((string)(inValues[0]));
            return this.BegingetCodeByIMEI(IMEI, callback, asyncState);
        }
        
        private object[] OnEndgetCodeByIMEI(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCodeByIMEI(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeByIMEICompleted(object state) {
            if ((this.getCodeByIMEICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeByIMEICompleted(this, new getCodeByIMEICompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeByIMEIAsync(string IMEI) {
            this.getCodeByIMEIAsync(IMEI, null);
        }
        
        public void getCodeByIMEIAsync(string IMEI, object userState) {
            if ((this.onBegingetCodeByIMEIDelegate == null)) {
                this.onBegingetCodeByIMEIDelegate = new BeginOperationDelegate(this.OnBegingetCodeByIMEI);
            }
            if ((this.onEndgetCodeByIMEIDelegate == null)) {
                this.onEndgetCodeByIMEIDelegate = new EndOperationDelegate(this.OnEndgetCodeByIMEI);
            }
            if ((this.ongetCodeByIMEICompletedDelegate == null)) {
                this.ongetCodeByIMEICompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeByIMEICompleted);
            }
            base.InvokeAsync(this.onBegingetCodeByIMEIDelegate, new object[] {
                        IMEI}, this.onEndgetCodeByIMEIDelegate, this.ongetCodeByIMEICompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByIMEIByISBN(string IMEI, string ISBN) {
            return base.Channel.getCodeByIMEIByISBN(IMEI, ISBN);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCodeByIMEIByISBN(string IMEI, string ISBN, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCodeByIMEIByISBN(IMEI, ISBN, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByIMEIByISBN(System.IAsyncResult result) {
            return base.Channel.EndgetCodeByIMEIByISBN(result);
        }
        
        private System.IAsyncResult OnBegingetCodeByIMEIByISBN(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string IMEI = ((string)(inValues[0]));
            string ISBN = ((string)(inValues[1]));
            return this.BegingetCodeByIMEIByISBN(IMEI, ISBN, callback, asyncState);
        }
        
        private object[] OnEndgetCodeByIMEIByISBN(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCodeByIMEIByISBN(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeByIMEIByISBNCompleted(object state) {
            if ((this.getCodeByIMEIByISBNCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeByIMEIByISBNCompleted(this, new getCodeByIMEIByISBNCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeByIMEIByISBNAsync(string IMEI, string ISBN) {
            this.getCodeByIMEIByISBNAsync(IMEI, ISBN, null);
        }
        
        public void getCodeByIMEIByISBNAsync(string IMEI, string ISBN, object userState) {
            if ((this.onBegingetCodeByIMEIByISBNDelegate == null)) {
                this.onBegingetCodeByIMEIByISBNDelegate = new BeginOperationDelegate(this.OnBegingetCodeByIMEIByISBN);
            }
            if ((this.onEndgetCodeByIMEIByISBNDelegate == null)) {
                this.onEndgetCodeByIMEIByISBNDelegate = new EndOperationDelegate(this.OnEndgetCodeByIMEIByISBN);
            }
            if ((this.ongetCodeByIMEIByISBNCompletedDelegate == null)) {
                this.ongetCodeByIMEIByISBNCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeByIMEIByISBNCompleted);
            }
            base.InvokeAsync(this.onBegingetCodeByIMEIByISBNDelegate, new object[] {
                        IMEI,
                        ISBN}, this.onEndgetCodeByIMEIByISBNDelegate, this.ongetCodeByIMEIByISBNCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByIMEIByPrefix(string IMEI, string prefix) {
            return base.Channel.getCodeByIMEIByPrefix(IMEI, prefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCodeByIMEIByPrefix(string IMEI, string prefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCodeByIMEIByPrefix(IMEI, prefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByIMEIByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCodeByIMEIByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCodeByIMEIByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string IMEI = ((string)(inValues[0]));
            string prefix = ((string)(inValues[1]));
            return this.BegingetCodeByIMEIByPrefix(IMEI, prefix, callback, asyncState);
        }
        
        private object[] OnEndgetCodeByIMEIByPrefix(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCodeByIMEIByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeByIMEIByPrefixCompleted(object state) {
            if ((this.getCodeByIMEIByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeByIMEIByPrefixCompleted(this, new getCodeByIMEIByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeByIMEIByPrefixAsync(string IMEI, string prefix) {
            this.getCodeByIMEIByPrefixAsync(IMEI, prefix, null);
        }
        
        public void getCodeByIMEIByPrefixAsync(string IMEI, string prefix, object userState) {
            if ((this.onBegingetCodeByIMEIByPrefixDelegate == null)) {
                this.onBegingetCodeByIMEIByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCodeByIMEIByPrefix);
            }
            if ((this.onEndgetCodeByIMEIByPrefixDelegate == null)) {
                this.onEndgetCodeByIMEIByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCodeByIMEIByPrefix);
            }
            if ((this.ongetCodeByIMEIByPrefixCompletedDelegate == null)) {
                this.ongetCodeByIMEIByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeByIMEIByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCodeByIMEIByPrefixDelegate, new object[] {
                        IMEI,
                        prefix}, this.onEndgetCodeByIMEIByPrefixDelegate, this.ongetCodeByIMEIByPrefixCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo validCode(string codeString) {
            return base.Channel.validCode(codeString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginvalidCode(string codeString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginvalidCode(codeString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo EndvalidCode(System.IAsyncResult result) {
            return base.Channel.EndvalidCode(result);
        }
        
        private System.IAsyncResult OnBeginvalidCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            return this.BeginvalidCode(codeString, callback, asyncState);
        }
        
        private object[] OnEndvalidCode(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ValidCodeInfo retVal = this.EndvalidCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnvalidCodeCompleted(object state) {
            if ((this.validCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.validCodeCompleted(this, new validCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void validCodeAsync(string codeString) {
            this.validCodeAsync(codeString, null);
        }
        
        public void validCodeAsync(string codeString, object userState) {
            if ((this.onBeginvalidCodeDelegate == null)) {
                this.onBeginvalidCodeDelegate = new BeginOperationDelegate(this.OnBeginvalidCode);
            }
            if ((this.onEndvalidCodeDelegate == null)) {
                this.onEndvalidCodeDelegate = new EndOperationDelegate(this.OnEndvalidCode);
            }
            if ((this.onvalidCodeCompletedDelegate == null)) {
                this.onvalidCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnvalidCodeCompleted);
            }
            base.InvokeAsync(this.onBeginvalidCodeDelegate, new object[] {
                        codeString}, this.onEndvalidCodeDelegate, this.onvalidCodeCompletedDelegate, userState);
        }
        
        public void activateCode(string code) {
            base.Channel.activateCode(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginactivateCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginactivateCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndactivateCode(System.IAsyncResult result) {
            base.Channel.EndactivateCode(result);
        }
        
        private System.IAsyncResult OnBeginactivateCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BeginactivateCode(code, callback, asyncState);
        }
        
        private object[] OnEndactivateCode(System.IAsyncResult result) {
            this.EndactivateCode(result);
            return null;
        }
        
        private void OnactivateCodeCompleted(object state) {
            if ((this.activateCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.activateCodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void activateCodeAsync(string code) {
            this.activateCodeAsync(code, null);
        }
        
        public void activateCodeAsync(string code, object userState) {
            if ((this.onBeginactivateCodeDelegate == null)) {
                this.onBeginactivateCodeDelegate = new BeginOperationDelegate(this.OnBeginactivateCode);
            }
            if ((this.onEndactivateCodeDelegate == null)) {
                this.onEndactivateCodeDelegate = new EndOperationDelegate(this.OnEndactivateCode);
            }
            if ((this.onactivateCodeCompletedDelegate == null)) {
                this.onactivateCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnactivateCodeCompleted);
            }
            base.InvokeAsync(this.onBeginactivateCodeDelegate, new object[] {
                        code}, this.onEndactivateCodeDelegate, this.onactivateCodeCompletedDelegate, userState);
        }
        
        public bool checkClientCode(string code) {
            return base.Channel.checkClientCode(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincheckClientCode(string code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincheckClientCode(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndcheckClientCode(System.IAsyncResult result) {
            return base.Channel.EndcheckClientCode(result);
        }
        
        private System.IAsyncResult OnBegincheckClientCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            return this.BegincheckClientCode(code, callback, asyncState);
        }
        
        private object[] OnEndcheckClientCode(System.IAsyncResult result) {
            bool retVal = this.EndcheckClientCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OncheckClientCodeCompleted(object state) {
            if ((this.checkClientCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.checkClientCodeCompleted(this, new checkClientCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void checkClientCodeAsync(string code) {
            this.checkClientCodeAsync(code, null);
        }
        
        public void checkClientCodeAsync(string code, object userState) {
            if ((this.onBegincheckClientCodeDelegate == null)) {
                this.onBegincheckClientCodeDelegate = new BeginOperationDelegate(this.OnBegincheckClientCode);
            }
            if ((this.onEndcheckClientCodeDelegate == null)) {
                this.onEndcheckClientCodeDelegate = new EndOperationDelegate(this.OnEndcheckClientCode);
            }
            if ((this.oncheckClientCodeCompletedDelegate == null)) {
                this.oncheckClientCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncheckClientCodeCompleted);
            }
            base.InvokeAsync(this.onBegincheckClientCodeDelegate, new object[] {
                        code}, this.onEndcheckClientCodeDelegate, this.oncheckClientCodeCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByEmailByPrefix(string email, string prefix) {
            return base.Channel.getCodeByEmailByPrefix(email, prefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCodeByEmailByPrefix(string email, string prefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCodeByEmailByPrefix(email, prefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByEmailByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCodeByEmailByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCodeByEmailByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string prefix = ((string)(inValues[1]));
            return this.BegingetCodeByEmailByPrefix(email, prefix, callback, asyncState);
        }
        
        private object[] OnEndgetCodeByEmailByPrefix(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCodeByEmailByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeByEmailByPrefixCompleted(object state) {
            if ((this.getCodeByEmailByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeByEmailByPrefixCompleted(this, new getCodeByEmailByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeByEmailByPrefixAsync(string email, string prefix) {
            this.getCodeByEmailByPrefixAsync(email, prefix, null);
        }
        
        public void getCodeByEmailByPrefixAsync(string email, string prefix, object userState) {
            if ((this.onBegingetCodeByEmailByPrefixDelegate == null)) {
                this.onBegingetCodeByEmailByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCodeByEmailByPrefix);
            }
            if ((this.onEndgetCodeByEmailByPrefixDelegate == null)) {
                this.onEndgetCodeByEmailByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCodeByEmailByPrefix);
            }
            if ((this.ongetCodeByEmailByPrefixCompletedDelegate == null)) {
                this.ongetCodeByEmailByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeByEmailByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCodeByEmailByPrefixDelegate, new object[] {
                        email,
                        prefix}, this.onEndgetCodeByEmailByPrefixDelegate, this.ongetCodeByEmailByPrefixCompletedDelegate, userState);
        }
        
        public int insertComment(byte commentTypeId, byte branchId, byte businessUnitId, int distributionId, int prefixId, byte targetId, string content) {
            return base.Channel.insertComment(commentTypeId, branchId, businessUnitId, distributionId, prefixId, targetId, content);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegininsertComment(byte commentTypeId, byte branchId, byte businessUnitId, int distributionId, int prefixId, byte targetId, string content, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegininsertComment(commentTypeId, branchId, businessUnitId, distributionId, prefixId, targetId, content, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndinsertComment(System.IAsyncResult result) {
            return base.Channel.EndinsertComment(result);
        }
        
        private System.IAsyncResult OnBegininsertComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte commentTypeId = ((byte)(inValues[0]));
            byte branchId = ((byte)(inValues[1]));
            byte businessUnitId = ((byte)(inValues[2]));
            int distributionId = ((int)(inValues[3]));
            int prefixId = ((int)(inValues[4]));
            byte targetId = ((byte)(inValues[5]));
            string content = ((string)(inValues[6]));
            return this.BegininsertComment(commentTypeId, branchId, businessUnitId, distributionId, prefixId, targetId, content, callback, asyncState);
        }
        
        private object[] OnEndinsertComment(System.IAsyncResult result) {
            int retVal = this.EndinsertComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OninsertCommentCompleted(object state) {
            if ((this.insertCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.insertCommentCompleted(this, new insertCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void insertCommentAsync(byte commentTypeId, byte branchId, byte businessUnitId, int distributionId, int prefixId, byte targetId, string content) {
            this.insertCommentAsync(commentTypeId, branchId, businessUnitId, distributionId, prefixId, targetId, content, null);
        }
        
        public void insertCommentAsync(byte commentTypeId, byte branchId, byte businessUnitId, int distributionId, int prefixId, byte targetId, string content, object userState) {
            if ((this.onBegininsertCommentDelegate == null)) {
                this.onBegininsertCommentDelegate = new BeginOperationDelegate(this.OnBegininsertComment);
            }
            if ((this.onEndinsertCommentDelegate == null)) {
                this.onEndinsertCommentDelegate = new EndOperationDelegate(this.OnEndinsertComment);
            }
            if ((this.oninsertCommentCompletedDelegate == null)) {
                this.oninsertCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OninsertCommentCompleted);
            }
            base.InvokeAsync(this.onBegininsertCommentDelegate, new object[] {
                        commentTypeId,
                        branchId,
                        businessUnitId,
                        distributionId,
                        prefixId,
                        targetId,
                        content}, this.onEndinsertCommentDelegate, this.oninsertCommentCompletedDelegate, userState);
        }
        
        public void updateComment(int commentId, System.Nullable<System.DateTime> sentDate) {
            base.Channel.updateComment(commentId, sentDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateComment(int commentId, System.Nullable<System.DateTime> sentDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateComment(commentId, sentDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateComment(System.IAsyncResult result) {
            base.Channel.EndupdateComment(result);
        }
        
        private System.IAsyncResult OnBeginupdateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int commentId = ((int)(inValues[0]));
            System.Nullable<System.DateTime> sentDate = ((System.Nullable<System.DateTime>)(inValues[1]));
            return this.BeginupdateComment(commentId, sentDate, callback, asyncState);
        }
        
        private object[] OnEndupdateComment(System.IAsyncResult result) {
            this.EndupdateComment(result);
            return null;
        }
        
        private void OnupdateCommentCompleted(object state) {
            if ((this.updateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateCommentAsync(int commentId, System.Nullable<System.DateTime> sentDate) {
            this.updateCommentAsync(commentId, sentDate, null);
        }
        
        public void updateCommentAsync(int commentId, System.Nullable<System.DateTime> sentDate, object userState) {
            if ((this.onBeginupdateCommentDelegate == null)) {
                this.onBeginupdateCommentDelegate = new BeginOperationDelegate(this.OnBeginupdateComment);
            }
            if ((this.onEndupdateCommentDelegate == null)) {
                this.onEndupdateCommentDelegate = new EndOperationDelegate(this.OnEndupdateComment);
            }
            if ((this.onupdateCommentCompletedDelegate == null)) {
                this.onupdateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginupdateCommentDelegate, new object[] {
                        commentId,
                        sentDate}, this.onEndupdateCommentDelegate, this.onupdateCommentCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo getComment(int commentId) {
            return base.Channel.getComment(commentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetComment(int commentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetComment(commentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo EndgetComment(System.IAsyncResult result) {
            return base.Channel.EndgetComment(result);
        }
        
        private System.IAsyncResult OnBegingetComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int commentId = ((int)(inValues[0]));
            return this.BegingetComment(commentId, callback, asyncState);
        }
        
        private object[] OnEndgetComment(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentsInfo retVal = this.EndgetComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCommentCompleted(object state) {
            if ((this.getCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCommentCompleted(this, new getCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCommentAsync(int commentId) {
            this.getCommentAsync(commentId, null);
        }
        
        public void getCommentAsync(int commentId, object userState) {
            if ((this.onBegingetCommentDelegate == null)) {
                this.onBegingetCommentDelegate = new BeginOperationDelegate(this.OnBegingetComment);
            }
            if ((this.onEndgetCommentDelegate == null)) {
                this.onEndgetCommentDelegate = new EndOperationDelegate(this.OnEndgetComment);
            }
            if ((this.ongetCommentCompletedDelegate == null)) {
                this.ongetCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCommentCompleted);
            }
            base.InvokeAsync(this.onBegingetCommentDelegate, new object[] {
                        commentId}, this.onEndgetCommentDelegate, this.ongetCommentCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo> getCommentTypesByPrefix(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string prefix) {
            return base.Channel.getCommentTypesByPrefix(target, prefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCommentTypesByPrefix(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string prefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCommentTypesByPrefix(target, prefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo> EndgetCommentTypesByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCommentTypesByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCommentTypesByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[0]));
            string prefix = ((string)(inValues[1]));
            return this.BegingetCommentTypesByPrefix(target, prefix, callback, asyncState);
        }
        
        private object[] OnEndgetCommentTypesByPrefix(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CommentTypeDetailInfo> retVal = this.EndgetCommentTypesByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCommentTypesByPrefixCompleted(object state) {
            if ((this.getCommentTypesByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCommentTypesByPrefixCompleted(this, new getCommentTypesByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCommentTypesByPrefixAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string prefix) {
            this.getCommentTypesByPrefixAsync(target, prefix, null);
        }
        
        public void getCommentTypesByPrefixAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string prefix, object userState) {
            if ((this.onBegingetCommentTypesByPrefixDelegate == null)) {
                this.onBegingetCommentTypesByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCommentTypesByPrefix);
            }
            if ((this.onEndgetCommentTypesByPrefixDelegate == null)) {
                this.onEndgetCommentTypesByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCommentTypesByPrefix);
            }
            if ((this.ongetCommentTypesByPrefixCompletedDelegate == null)) {
                this.ongetCommentTypesByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCommentTypesByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCommentTypesByPrefixDelegate, new object[] {
                        target,
                        prefix}, this.onEndgetCommentTypesByPrefixDelegate, this.ongetCommentTypesByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo> getToolsByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId) {
            return base.Channel.getToolsByCode(codeString, country, targetId, toolTypeId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetToolsByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetToolsByCode(codeString, country, targetId, toolTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo> EndgetToolsByCode(System.IAsyncResult result) {
            return base.Channel.EndgetToolsByCode(result);
        }
        
        private System.IAsyncResult OnBegingetToolsByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            string country = ((string)(inValues[1]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[2]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes)(inValues[3]));
            return this.BegingetToolsByCode(codeString, country, targetId, toolTypeId, callback, asyncState);
        }
        
        private object[] OnEndgetToolsByCode(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ToolsByTargetInfo> retVal = this.EndgetToolsByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetToolsByCodeCompleted(object state) {
            if ((this.getToolsByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getToolsByCodeCompleted(this, new getToolsByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getToolsByCodeAsync(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId) {
            this.getToolsByCodeAsync(codeString, country, targetId, toolTypeId, null);
        }
        
        public void getToolsByCodeAsync(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicToolTypes toolTypeId, object userState) {
            if ((this.onBegingetToolsByCodeDelegate == null)) {
                this.onBegingetToolsByCodeDelegate = new BeginOperationDelegate(this.OnBegingetToolsByCode);
            }
            if ((this.onEndgetToolsByCodeDelegate == null)) {
                this.onEndgetToolsByCodeDelegate = new EndOperationDelegate(this.OnEndgetToolsByCode);
            }
            if ((this.ongetToolsByCodeCompletedDelegate == null)) {
                this.ongetToolsByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetToolsByCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetToolsByCodeDelegate, new object[] {
                        codeString,
                        country,
                        targetId,
                        toolTypeId}, this.onEndgetToolsByCodeDelegate, this.ongetToolsByCodeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo> getBannersByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId) {
            return base.Channel.getBannersByCode(codeString, country, targetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetBannersByCode(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetBannersByCode(codeString, country, targetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo> EndgetBannersByCode(System.IAsyncResult result) {
            return base.Channel.EndgetBannersByCode(result);
        }
        
        private System.IAsyncResult OnBegingetBannersByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            string country = ((string)(inValues[1]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[2]));
            return this.BegingetBannersByCode(codeString, country, targetId, callback, asyncState);
        }
        
        private object[] OnEndgetBannersByCode(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BannersByTargetInfo> retVal = this.EndgetBannersByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetBannersByCodeCompleted(object state) {
            if ((this.getBannersByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getBannersByCodeCompleted(this, new getBannersByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getBannersByCodeAsync(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId) {
            this.getBannersByCodeAsync(codeString, country, targetId, null);
        }
        
        public void getBannersByCodeAsync(string codeString, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, object userState) {
            if ((this.onBegingetBannersByCodeDelegate == null)) {
                this.onBegingetBannersByCodeDelegate = new BeginOperationDelegate(this.OnBegingetBannersByCode);
            }
            if ((this.onEndgetBannersByCodeDelegate == null)) {
                this.onEndgetBannersByCodeDelegate = new EndOperationDelegate(this.OnEndgetBannersByCode);
            }
            if ((this.ongetBannersByCodeCompletedDelegate == null)) {
                this.ongetBannersByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetBannersByCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetBannersByCodeDelegate, new object[] {
                        codeString,
                        country,
                        targetId}, this.onEndgetBannersByCodeDelegate, this.ongetBannersByCodeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByType(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType, string country) {
            return base.Channel.getInformationByType(informationType, country);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInformationByType(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType, string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInformationByType(informationType, country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByType(System.IAsyncResult result) {
            return base.Channel.EndgetInformationByType(result);
        }
        
        private System.IAsyncResult OnBegingetInformationByType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes)(inValues[0]));
            string country = ((string)(inValues[1]));
            return this.BegingetInformationByType(informationType, country, callback, asyncState);
        }
        
        private object[] OnEndgetInformationByType(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> retVal = this.EndgetInformationByType(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInformationByTypeCompleted(object state) {
            if ((this.getInformationByTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInformationByTypeCompleted(this, new getInformationByTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInformationByTypeAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType, string country) {
            this.getInformationByTypeAsync(informationType, country, null);
        }
        
        public void getInformationByTypeAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationType, string country, object userState) {
            if ((this.onBegingetInformationByTypeDelegate == null)) {
                this.onBegingetInformationByTypeDelegate = new BeginOperationDelegate(this.OnBegingetInformationByType);
            }
            if ((this.onEndgetInformationByTypeDelegate == null)) {
                this.onEndgetInformationByTypeDelegate = new EndOperationDelegate(this.OnEndgetInformationByType);
            }
            if ((this.ongetInformationByTypeCompletedDelegate == null)) {
                this.ongetInformationByTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInformationByTypeCompleted);
            }
            base.InvokeAsync(this.onBegingetInformationByTypeDelegate, new object[] {
                        informationType,
                        country}, this.onEndgetInformationByTypeDelegate, this.ongetInformationByTypeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefix(string prefix, string country) {
            return base.Channel.getInformationByPrefix(prefix, country);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInformationByPrefix(string prefix, string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInformationByPrefix(prefix, country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetInformationByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetInformationByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            string country = ((string)(inValues[1]));
            return this.BegingetInformationByPrefix(prefix, country, callback, asyncState);
        }
        
        private object[] OnEndgetInformationByPrefix(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> retVal = this.EndgetInformationByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInformationByPrefixCompleted(object state) {
            if ((this.getInformationByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInformationByPrefixCompleted(this, new getInformationByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInformationByPrefixAsync(string prefix, string country) {
            this.getInformationByPrefixAsync(prefix, country, null);
        }
        
        public void getInformationByPrefixAsync(string prefix, string country, object userState) {
            if ((this.onBegingetInformationByPrefixDelegate == null)) {
                this.onBegingetInformationByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetInformationByPrefix);
            }
            if ((this.onEndgetInformationByPrefixDelegate == null)) {
                this.onEndgetInformationByPrefixDelegate = new EndOperationDelegate(this.OnEndgetInformationByPrefix);
            }
            if ((this.ongetInformationByPrefixCompletedDelegate == null)) {
                this.ongetInformationByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInformationByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetInformationByPrefixDelegate, new object[] {
                        prefix,
                        country}, this.onEndgetInformationByPrefixDelegate, this.ongetInformationByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefixByTarget(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, string country) {
            return base.Channel.getInformationByPrefixByTarget(prefix, targetId, country);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInformationByPrefixByTarget(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInformationByPrefixByTarget(prefix, targetId, country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefixByTarget(System.IAsyncResult result) {
            return base.Channel.EndgetInformationByPrefixByTarget(result);
        }
        
        private System.IAsyncResult OnBegingetInformationByPrefixByTarget(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[1]));
            string country = ((string)(inValues[2]));
            return this.BegingetInformationByPrefixByTarget(prefix, targetId, country, callback, asyncState);
        }
        
        private object[] OnEndgetInformationByPrefixByTarget(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> retVal = this.EndgetInformationByPrefixByTarget(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInformationByPrefixByTargetCompleted(object state) {
            if ((this.getInformationByPrefixByTargetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInformationByPrefixByTargetCompleted(this, new getInformationByPrefixByTargetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInformationByPrefixByTargetAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, string country) {
            this.getInformationByPrefixByTargetAsync(prefix, targetId, country, null);
        }
        
        public void getInformationByPrefixByTargetAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, string country, object userState) {
            if ((this.onBegingetInformationByPrefixByTargetDelegate == null)) {
                this.onBegingetInformationByPrefixByTargetDelegate = new BeginOperationDelegate(this.OnBegingetInformationByPrefixByTarget);
            }
            if ((this.onEndgetInformationByPrefixByTargetDelegate == null)) {
                this.onEndgetInformationByPrefixByTargetDelegate = new EndOperationDelegate(this.OnEndgetInformationByPrefixByTarget);
            }
            if ((this.ongetInformationByPrefixByTargetCompletedDelegate == null)) {
                this.ongetInformationByPrefixByTargetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInformationByPrefixByTargetCompleted);
            }
            base.InvokeAsync(this.onBegingetInformationByPrefixByTargetDelegate, new object[] {
                        prefix,
                        targetId,
                        country}, this.onEndgetInformationByPrefixByTargetDelegate, this.ongetInformationByPrefixByTargetCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefixByType(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country) {
            return base.Channel.getInformationByPrefixByType(prefix, targetId, informationTypeId, country);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInformationByPrefixByType(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInformationByPrefixByType(prefix, targetId, informationTypeId, country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefixByType(System.IAsyncResult result) {
            return base.Channel.EndgetInformationByPrefixByType(result);
        }
        
        private System.IAsyncResult OnBegingetInformationByPrefixByType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[1]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes)(inValues[2]));
            string country = ((string)(inValues[3]));
            return this.BegingetInformationByPrefixByType(prefix, targetId, informationTypeId, country, callback, asyncState);
        }
        
        private object[] OnEndgetInformationByPrefixByType(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> retVal = this.EndgetInformationByPrefixByType(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInformationByPrefixByTypeCompleted(object state) {
            if ((this.getInformationByPrefixByTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInformationByPrefixByTypeCompleted(this, new getInformationByPrefixByTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInformationByPrefixByTypeAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country) {
            this.getInformationByPrefixByTypeAsync(prefix, targetId, informationTypeId, country, null);
        }
        
        public void getInformationByPrefixByTypeAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, object userState) {
            if ((this.onBegingetInformationByPrefixByTypeDelegate == null)) {
                this.onBegingetInformationByPrefixByTypeDelegate = new BeginOperationDelegate(this.OnBegingetInformationByPrefixByType);
            }
            if ((this.onEndgetInformationByPrefixByTypeDelegate == null)) {
                this.onEndgetInformationByPrefixByTypeDelegate = new EndOperationDelegate(this.OnEndgetInformationByPrefixByType);
            }
            if ((this.ongetInformationByPrefixByTypeCompletedDelegate == null)) {
                this.ongetInformationByPrefixByTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInformationByPrefixByTypeCompleted);
            }
            base.InvokeAsync(this.onBegingetInformationByPrefixByTypeDelegate, new object[] {
                        prefix,
                        targetId,
                        informationTypeId,
                        country}, this.onEndgetInformationByPrefixByTypeDelegate, this.ongetInformationByPrefixByTypeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationBySection(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section, string resolutionKey) {
            return base.Channel.getInformationBySection(prefix, target, country, section, resolutionKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInformationBySection(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section, string resolutionKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInformationBySection(prefix, target, country, section, resolutionKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationBySection(System.IAsyncResult result) {
            return base.Channel.EndgetInformationBySection(result);
        }
        
        private System.IAsyncResult OnBegingetInformationBySection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[1]));
            string country = ((string)(inValues[2]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections)(inValues[3]));
            string resolutionKey = ((string)(inValues[4]));
            return this.BegingetInformationBySection(prefix, target, country, section, resolutionKey, callback, asyncState);
        }
        
        private object[] OnEndgetInformationBySection(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> retVal = this.EndgetInformationBySection(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInformationBySectionCompleted(object state) {
            if ((this.getInformationBySectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInformationBySectionCompleted(this, new getInformationBySectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInformationBySectionAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section, string resolutionKey) {
            this.getInformationBySectionAsync(prefix, target, country, section, resolutionKey, null);
        }
        
        public void getInformationBySectionAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, string country, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSections section, string resolutionKey, object userState) {
            if ((this.onBegingetInformationBySectionDelegate == null)) {
                this.onBegingetInformationBySectionDelegate = new BeginOperationDelegate(this.OnBegingetInformationBySection);
            }
            if ((this.onEndgetInformationBySectionDelegate == null)) {
                this.onEndgetInformationBySectionDelegate = new EndOperationDelegate(this.OnEndgetInformationBySection);
            }
            if ((this.ongetInformationBySectionCompletedDelegate == null)) {
                this.ongetInformationBySectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInformationBySectionCompleted);
            }
            base.InvokeAsync(this.onBegingetInformationBySectionDelegate, new object[] {
                        prefix,
                        target,
                        country,
                        section,
                        resolutionKey}, this.onEndgetInformationBySectionDelegate, this.ongetInformationBySectionCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> getInformationByPrefixByTypeBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, int specialityId) {
            return base.Channel.getInformationByPrefixByTypeBySpeciality(prefix, targetId, informationTypeId, country, specialityId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInformationByPrefixByTypeBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, int specialityId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInformationByPrefixByTypeBySpeciality(prefix, targetId, informationTypeId, country, specialityId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> EndgetInformationByPrefixByTypeBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetInformationByPrefixByTypeBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetInformationByPrefixByTypeBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[1]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes)(inValues[2]));
            string country = ((string)(inValues[3]));
            int specialityId = ((int)(inValues[4]));
            return this.BegingetInformationByPrefixByTypeBySpeciality(prefix, targetId, informationTypeId, country, specialityId, callback, asyncState);
        }
        
        private object[] OnEndgetInformationByPrefixByTypeBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ElectronicInformationByTargetInfo> retVal = this.EndgetInformationByPrefixByTypeBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInformationByPrefixByTypeBySpecialityCompleted(object state) {
            if ((this.getInformationByPrefixByTypeBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInformationByPrefixByTypeBySpecialityCompleted(this, new getInformationByPrefixByTypeBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInformationByPrefixByTypeBySpecialityAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, int specialityId) {
            this.getInformationByPrefixByTypeBySpecialityAsync(prefix, targetId, informationTypeId, country, specialityId, null);
        }
        
        public void getInformationByPrefixByTypeBySpecialityAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs targetId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsElectronicInformationTypes informationTypeId, string country, int specialityId, object userState) {
            if ((this.onBegingetInformationByPrefixByTypeBySpecialityDelegate == null)) {
                this.onBegingetInformationByPrefixByTypeBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetInformationByPrefixByTypeBySpeciality);
            }
            if ((this.onEndgetInformationByPrefixByTypeBySpecialityDelegate == null)) {
                this.onEndgetInformationByPrefixByTypeBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetInformationByPrefixByTypeBySpeciality);
            }
            if ((this.ongetInformationByPrefixByTypeBySpecialityCompletedDelegate == null)) {
                this.ongetInformationByPrefixByTypeBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInformationByPrefixByTypeBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetInformationByPrefixByTypeBySpecialityDelegate, new object[] {
                        prefix,
                        targetId,
                        informationTypeId,
                        country,
                        specialityId}, this.onEndgetInformationByPrefixByTypeBySpecialityDelegate, this.ongetInformationByPrefixByTypeBySpecialityCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> getEventsByTypeBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId) {
            return base.Channel.getEventsByTypeBySpeciality(typeId, specialityId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetEventsByTypeBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetEventsByTypeBySpeciality(typeId, specialityId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> EndgetEventsByTypeBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetEventsByTypeBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetEventsByTypeBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities)(inValues[1]));
            return this.BegingetEventsByTypeBySpeciality(typeId, specialityId, callback, asyncState);
        }
        
        private object[] OnEndgetEventsByTypeBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventsDetailInfo> retVal = this.EndgetEventsByTypeBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetEventsByTypeBySpecialityCompleted(object state) {
            if ((this.getEventsByTypeBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getEventsByTypeBySpecialityCompleted(this, new getEventsByTypeBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getEventsByTypeBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId) {
            this.getEventsByTypeBySpecialityAsync(typeId, specialityId, null);
        }
        
        public void getEventsByTypeBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsEventTypes typeId, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities specialityId, object userState) {
            if ((this.onBegingetEventsByTypeBySpecialityDelegate == null)) {
                this.onBegingetEventsByTypeBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetEventsByTypeBySpeciality);
            }
            if ((this.onEndgetEventsByTypeBySpecialityDelegate == null)) {
                this.onEndgetEventsByTypeBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetEventsByTypeBySpeciality);
            }
            if ((this.ongetEventsByTypeBySpecialityCompletedDelegate == null)) {
                this.ongetEventsByTypeBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetEventsByTypeBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetEventsByTypeBySpecialityDelegate, new object[] {
                        typeId,
                        specialityId}, this.onEndgetEventsByTypeBySpecialityDelegate, this.ongetEventsByTypeBySpecialityCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo> getEventCategoriesByState(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, string latitude, string longitude) {
            return base.Channel.getEventCategoriesByState(prefix, target, stateId, latitude, longitude);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetEventCategoriesByState(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, string latitude, string longitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetEventCategoriesByState(prefix, target, stateId, latitude, longitude, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo> EndgetEventCategoriesByState(System.IAsyncResult result) {
            return base.Channel.EndgetEventCategoriesByState(result);
        }
        
        private System.IAsyncResult OnBegingetEventCategoriesByState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[1]));
            int stateId = ((int)(inValues[2]));
            string latitude = ((string)(inValues[3]));
            string longitude = ((string)(inValues[4]));
            return this.BegingetEventCategoriesByState(prefix, target, stateId, latitude, longitude, callback, asyncState);
        }
        
        private object[] OnEndgetEventCategoriesByState(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.EventCategoryDetailInfo> retVal = this.EndgetEventCategoriesByState(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetEventCategoriesByStateCompleted(object state) {
            if ((this.getEventCategoriesByStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getEventCategoriesByStateCompleted(this, new getEventCategoriesByStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getEventCategoriesByStateAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, string latitude, string longitude) {
            this.getEventCategoriesByStateAsync(prefix, target, stateId, latitude, longitude, null);
        }
        
        public void getEventCategoriesByStateAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, string latitude, string longitude, object userState) {
            if ((this.onBegingetEventCategoriesByStateDelegate == null)) {
                this.onBegingetEventCategoriesByStateDelegate = new BeginOperationDelegate(this.OnBegingetEventCategoriesByState);
            }
            if ((this.onEndgetEventCategoriesByStateDelegate == null)) {
                this.onEndgetEventCategoriesByStateDelegate = new EndOperationDelegate(this.OnEndgetEventCategoriesByState);
            }
            if ((this.ongetEventCategoriesByStateCompletedDelegate == null)) {
                this.ongetEventCategoriesByStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetEventCategoriesByStateCompleted);
            }
            base.InvokeAsync(this.onBegingetEventCategoriesByStateDelegate, new object[] {
                        prefix,
                        target,
                        stateId,
                        latitude,
                        longitude}, this.onEndgetEventCategoriesByStateDelegate, this.ongetEventCategoriesByStateCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> getOtherEventStates(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId) {
            return base.Channel.getOtherEventStates(prefix, target, stateId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetOtherEventStates(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetOtherEventStates(prefix, target, stateId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> EndgetOtherEventStates(System.IAsyncResult result) {
            return base.Channel.EndgetOtherEventStates(result);
        }
        
        private System.IAsyncResult OnBegingetOtherEventStates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs)(inValues[1]));
            int stateId = ((int)(inValues[2]));
            return this.BegingetOtherEventStates(prefix, target, stateId, callback, asyncState);
        }
        
        private object[] OnEndgetOtherEventStates(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.StateInfo> retVal = this.EndgetOtherEventStates(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetOtherEventStatesCompleted(object state) {
            if ((this.getOtherEventStatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getOtherEventStatesCompleted(this, new getOtherEventStatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getOtherEventStatesAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId) {
            this.getOtherEventStatesAsync(prefix, target, stateId, null);
        }
        
        public void getOtherEventStatesAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsTargetOutputs target, int stateId, object userState) {
            if ((this.onBegingetOtherEventStatesDelegate == null)) {
                this.onBegingetOtherEventStatesDelegate = new BeginOperationDelegate(this.OnBegingetOtherEventStates);
            }
            if ((this.onEndgetOtherEventStatesDelegate == null)) {
                this.onEndgetOtherEventStatesDelegate = new EndOperationDelegate(this.OnEndgetOtherEventStates);
            }
            if ((this.ongetOtherEventStatesCompletedDelegate == null)) {
                this.ongetOtherEventStatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetOtherEventStatesCompleted);
            }
            base.InvokeAsync(this.onBegingetOtherEventStatesDelegate, new object[] {
                        prefix,
                        target,
                        stateId}, this.onEndgetOtherEventStatesDelegate, this.ongetOtherEventStatesCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo getLicense(int licenseId) {
            return base.Channel.getLicense(licenseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetLicense(int licenseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLicense(licenseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo EndgetLicense(System.IAsyncResult result) {
            return base.Channel.EndgetLicense(result);
        }
        
        private System.IAsyncResult OnBegingetLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int licenseId = ((int)(inValues[0]));
            return this.BegingetLicense(licenseId, callback, asyncState);
        }
        
        private object[] OnEndgetLicense(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo retVal = this.EndgetLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLicenseCompleted(object state) {
            if ((this.getLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLicenseCompleted(this, new getLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLicenseAsync(int licenseId) {
            this.getLicenseAsync(licenseId, null);
        }
        
        public void getLicenseAsync(int licenseId, object userState) {
            if ((this.onBegingetLicenseDelegate == null)) {
                this.onBegingetLicenseDelegate = new BeginOperationDelegate(this.OnBegingetLicense);
            }
            if ((this.onEndgetLicenseDelegate == null)) {
                this.onEndgetLicenseDelegate = new EndOperationDelegate(this.OnEndgetLicense);
            }
            if ((this.ongetLicenseCompletedDelegate == null)) {
                this.ongetLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLicenseCompleted);
            }
            base.InvokeAsync(this.onBegingetLicenseDelegate, new object[] {
                        licenseId}, this.onEndgetLicenseDelegate, this.ongetLicenseCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo getLicenseByKey(string licenseKey) {
            return base.Channel.getLicenseByKey(licenseKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetLicenseByKey(string licenseKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLicenseByKey(licenseKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo EndgetLicenseByKey(System.IAsyncResult result) {
            return base.Channel.EndgetLicenseByKey(result);
        }
        
        private System.IAsyncResult OnBegingetLicenseByKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string licenseKey = ((string)(inValues[0]));
            return this.BegingetLicenseByKey(licenseKey, callback, asyncState);
        }
        
        private object[] OnEndgetLicenseByKey(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.LicensesInfo retVal = this.EndgetLicenseByKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLicenseByKeyCompleted(object state) {
            if ((this.getLicenseByKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLicenseByKeyCompleted(this, new getLicenseByKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLicenseByKeyAsync(string licenseKey) {
            this.getLicenseByKeyAsync(licenseKey, null);
        }
        
        public void getLicenseByKeyAsync(string licenseKey, object userState) {
            if ((this.onBegingetLicenseByKeyDelegate == null)) {
                this.onBegingetLicenseByKeyDelegate = new BeginOperationDelegate(this.OnBegingetLicenseByKey);
            }
            if ((this.onEndgetLicenseByKeyDelegate == null)) {
                this.onEndgetLicenseByKeyDelegate = new EndOperationDelegate(this.OnEndgetLicenseByKey);
            }
            if ((this.ongetLicenseByKeyCompletedDelegate == null)) {
                this.ongetLicenseByKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLicenseByKeyCompleted);
            }
            base.InvokeAsync(this.onBegingetLicenseByKeyDelegate, new object[] {
                        licenseKey}, this.onEndgetLicenseByKeyDelegate, this.ongetLicenseByKeyCompletedDelegate, userState);
        }
        
        public string getUrlVersion(string codeString) {
            return base.Channel.getUrlVersion(codeString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUrlVersion(string codeString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUrlVersion(codeString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetUrlVersion(System.IAsyncResult result) {
            return base.Channel.EndgetUrlVersion(result);
        }
        
        private System.IAsyncResult OnBegingetUrlVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            return this.BegingetUrlVersion(codeString, callback, asyncState);
        }
        
        private object[] OnEndgetUrlVersion(System.IAsyncResult result) {
            string retVal = this.EndgetUrlVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetUrlVersionCompleted(object state) {
            if ((this.getUrlVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUrlVersionCompleted(this, new getUrlVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUrlVersionAsync(string codeString) {
            this.getUrlVersionAsync(codeString, null);
        }
        
        public void getUrlVersionAsync(string codeString, object userState) {
            if ((this.onBegingetUrlVersionDelegate == null)) {
                this.onBegingetUrlVersionDelegate = new BeginOperationDelegate(this.OnBegingetUrlVersion);
            }
            if ((this.onEndgetUrlVersionDelegate == null)) {
                this.onEndgetUrlVersionDelegate = new EndOperationDelegate(this.OnEndgetUrlVersion);
            }
            if ((this.ongetUrlVersionCompletedDelegate == null)) {
                this.ongetUrlVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUrlVersionCompleted);
            }
            base.InvokeAsync(this.onBegingetUrlVersionDelegate, new object[] {
                        codeString}, this.onEndgetUrlVersionDelegate, this.ongetUrlVersionCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> getCalculatorsByPrefix(string prefix) {
            return base.Channel.getCalculatorsByPrefix(prefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCalculatorsByPrefix(string prefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCalculatorsByPrefix(prefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> EndgetCalculatorsByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCalculatorsByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCalculatorsByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            return this.BegingetCalculatorsByPrefix(prefix, callback, asyncState);
        }
        
        private object[] OnEndgetCalculatorsByPrefix(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> retVal = this.EndgetCalculatorsByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCalculatorsByPrefixCompleted(object state) {
            if ((this.getCalculatorsByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCalculatorsByPrefixCompleted(this, new getCalculatorsByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCalculatorsByPrefixAsync(string prefix) {
            this.getCalculatorsByPrefixAsync(prefix, null);
        }
        
        public void getCalculatorsByPrefixAsync(string prefix, object userState) {
            if ((this.onBegingetCalculatorsByPrefixDelegate == null)) {
                this.onBegingetCalculatorsByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCalculatorsByPrefix);
            }
            if ((this.onEndgetCalculatorsByPrefixDelegate == null)) {
                this.onEndgetCalculatorsByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCalculatorsByPrefix);
            }
            if ((this.ongetCalculatorsByPrefixCompletedDelegate == null)) {
                this.ongetCalculatorsByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCalculatorsByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCalculatorsByPrefixDelegate, new object[] {
                        prefix}, this.onEndgetCalculatorsByPrefixDelegate, this.ongetCalculatorsByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> getCalculatorsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            return base.Channel.getCalculatorsBySpeciality(speciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCalculatorsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCalculatorsBySpeciality(speciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> EndgetCalculatorsBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetCalculatorsBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetCalculatorsBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities)(inValues[0]));
            return this.BegingetCalculatorsBySpeciality(speciality, callback, asyncState);
        }
        
        private object[] OnEndgetCalculatorsBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> retVal = this.EndgetCalculatorsBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCalculatorsBySpecialityCompleted(object state) {
            if ((this.getCalculatorsBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCalculatorsBySpecialityCompleted(this, new getCalculatorsBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCalculatorsBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            this.getCalculatorsBySpecialityAsync(speciality, null);
        }
        
        public void getCalculatorsBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, object userState) {
            if ((this.onBegingetCalculatorsBySpecialityDelegate == null)) {
                this.onBegingetCalculatorsBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetCalculatorsBySpeciality);
            }
            if ((this.onEndgetCalculatorsBySpecialityDelegate == null)) {
                this.onEndgetCalculatorsBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetCalculatorsBySpeciality);
            }
            if ((this.ongetCalculatorsBySpecialityCompletedDelegate == null)) {
                this.ongetCalculatorsBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCalculatorsBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetCalculatorsBySpecialityDelegate, new object[] {
                        speciality}, this.onEndgetCalculatorsBySpecialityDelegate, this.ongetCalculatorsBySpecialityCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> getCalculatorsByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            return base.Channel.getCalculatorsByPrefixBySpeciality(prefix, speciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCalculatorsByPrefixBySpeciality(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCalculatorsByPrefixBySpeciality(prefix, speciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> EndgetCalculatorsByPrefixBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetCalculatorsByPrefixBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetCalculatorsByPrefixBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string prefix = ((string)(inValues[0]));
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities)(inValues[1]));
            return this.BegingetCalculatorsByPrefixBySpeciality(prefix, speciality, callback, asyncState);
        }
        
        private object[] OnEndgetCalculatorsByPrefixBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MedicalCalculatorsInfo> retVal = this.EndgetCalculatorsByPrefixBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCalculatorsByPrefixBySpecialityCompleted(object state) {
            if ((this.getCalculatorsByPrefixBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCalculatorsByPrefixBySpecialityCompleted(this, new getCalculatorsByPrefixBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCalculatorsByPrefixBySpecialityAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            this.getCalculatorsByPrefixBySpecialityAsync(prefix, speciality, null);
        }
        
        public void getCalculatorsByPrefixBySpecialityAsync(string prefix, PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, object userState) {
            if ((this.onBegingetCalculatorsByPrefixBySpecialityDelegate == null)) {
                this.onBegingetCalculatorsByPrefixBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetCalculatorsByPrefixBySpeciality);
            }
            if ((this.onEndgetCalculatorsByPrefixBySpecialityDelegate == null)) {
                this.onEndgetCalculatorsByPrefixBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetCalculatorsByPrefixBySpeciality);
            }
            if ((this.ongetCalculatorsByPrefixBySpecialityCompletedDelegate == null)) {
                this.ongetCalculatorsByPrefixBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCalculatorsByPrefixBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetCalculatorsByPrefixBySpecialityDelegate, new object[] {
                        prefix,
                        speciality}, this.onEndgetCalculatorsByPrefixBySpecialityDelegate, this.ongetCalculatorsByPrefixBySpecialityCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo getAgent(int agentId) {
            return base.Channel.getAgent(agentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAgent(int agentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAgent(agentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo EndgetAgent(System.IAsyncResult result) {
            return base.Channel.EndgetAgent(result);
        }
        
        private System.IAsyncResult OnBegingetAgent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int agentId = ((int)(inValues[0]));
            return this.BegingetAgent(agentId, callback, asyncState);
        }
        
        private object[] OnEndgetAgent(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo retVal = this.EndgetAgent(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAgentCompleted(object state) {
            if ((this.getAgentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAgentCompleted(this, new getAgentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAgentAsync(int agentId) {
            this.getAgentAsync(agentId, null);
        }
        
        public void getAgentAsync(int agentId, object userState) {
            if ((this.onBegingetAgentDelegate == null)) {
                this.onBegingetAgentDelegate = new BeginOperationDelegate(this.OnBegingetAgent);
            }
            if ((this.onEndgetAgentDelegate == null)) {
                this.onEndgetAgentDelegate = new EndOperationDelegate(this.OnEndgetAgent);
            }
            if ((this.ongetAgentCompletedDelegate == null)) {
                this.ongetAgentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAgentCompleted);
            }
            base.InvokeAsync(this.onBegingetAgentDelegate, new object[] {
                        agentId}, this.onEndgetAgentDelegate, this.ongetAgentCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo> getAgentsByBranch(int branchId) {
            return base.Channel.getAgentsByBranch(branchId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAgentsByBranch(int branchId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAgentsByBranch(branchId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo> EndgetAgentsByBranch(System.IAsyncResult result) {
            return base.Channel.EndgetAgentsByBranch(result);
        }
        
        private System.IAsyncResult OnBegingetAgentsByBranch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int branchId = ((int)(inValues[0]));
            return this.BegingetAgentsByBranch(branchId, callback, asyncState);
        }
        
        private object[] OnEndgetAgentsByBranch(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo> retVal = this.EndgetAgentsByBranch(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAgentsByBranchCompleted(object state) {
            if ((this.getAgentsByBranchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAgentsByBranchCompleted(this, new getAgentsByBranchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAgentsByBranchAsync(int branchId) {
            this.getAgentsByBranchAsync(branchId, null);
        }
        
        public void getAgentsByBranchAsync(int branchId, object userState) {
            if ((this.onBegingetAgentsByBranchDelegate == null)) {
                this.onBegingetAgentsByBranchDelegate = new BeginOperationDelegate(this.OnBegingetAgentsByBranch);
            }
            if ((this.onEndgetAgentsByBranchDelegate == null)) {
                this.onEndgetAgentsByBranchDelegate = new EndOperationDelegate(this.OnEndgetAgentsByBranch);
            }
            if ((this.ongetAgentsByBranchCompletedDelegate == null)) {
                this.ongetAgentsByBranchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAgentsByBranchCompleted);
            }
            base.InvokeAsync(this.onBegingetAgentsByBranchDelegate, new object[] {
                        branchId}, this.onEndgetAgentsByBranchDelegate, this.ongetAgentsByBranchCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo getAgentByZone(byte zoneId) {
            return base.Channel.getAgentByZone(zoneId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAgentByZone(byte zoneId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAgentByZone(zoneId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo EndgetAgentByZone(System.IAsyncResult result) {
            return base.Channel.EndgetAgentByZone(result);
        }
        
        private System.IAsyncResult OnBegingetAgentByZone(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte zoneId = ((byte)(inValues[0]));
            return this.BegingetAgentByZone(zoneId, callback, asyncState);
        }
        
        private object[] OnEndgetAgentByZone(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentsInfo retVal = this.EndgetAgentByZone(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAgentByZoneCompleted(object state) {
            if ((this.getAgentByZoneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAgentByZoneCompleted(this, new getAgentByZoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAgentByZoneAsync(byte zoneId) {
            this.getAgentByZoneAsync(zoneId, null);
        }
        
        public void getAgentByZoneAsync(byte zoneId, object userState) {
            if ((this.onBegingetAgentByZoneDelegate == null)) {
                this.onBegingetAgentByZoneDelegate = new BeginOperationDelegate(this.OnBegingetAgentByZone);
            }
            if ((this.onEndgetAgentByZoneDelegate == null)) {
                this.onEndgetAgentByZoneDelegate = new EndOperationDelegate(this.OnEndgetAgentByZone);
            }
            if ((this.ongetAgentByZoneCompletedDelegate == null)) {
                this.ongetAgentByZoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAgentByZoneCompleted);
            }
            base.InvokeAsync(this.onBegingetAgentByZoneDelegate, new object[] {
                        zoneId}, this.onEndgetAgentByZoneDelegate, this.ongetAgentByZoneCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo getAgentDetailByZone(byte zoneId) {
            return base.Channel.getAgentDetailByZone(zoneId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAgentDetailByZone(byte zoneId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAgentDetailByZone(zoneId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo EndgetAgentDetailByZone(System.IAsyncResult result) {
            return base.Channel.EndgetAgentDetailByZone(result);
        }
        
        private System.IAsyncResult OnBegingetAgentDetailByZone(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte zoneId = ((byte)(inValues[0]));
            return this.BegingetAgentDetailByZone(zoneId, callback, asyncState);
        }
        
        private object[] OnEndgetAgentDetailByZone(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.AgentDetailInfo retVal = this.EndgetAgentDetailByZone(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAgentDetailByZoneCompleted(object state) {
            if ((this.getAgentDetailByZoneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAgentDetailByZoneCompleted(this, new getAgentDetailByZoneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAgentDetailByZoneAsync(byte zoneId) {
            this.getAgentDetailByZoneAsync(zoneId, null);
        }
        
        public void getAgentDetailByZoneAsync(byte zoneId, object userState) {
            if ((this.onBegingetAgentDetailByZoneDelegate == null)) {
                this.onBegingetAgentDetailByZoneDelegate = new BeginOperationDelegate(this.OnBegingetAgentDetailByZone);
            }
            if ((this.onEndgetAgentDetailByZoneDelegate == null)) {
                this.onEndgetAgentDetailByZoneDelegate = new EndOperationDelegate(this.OnEndgetAgentDetailByZone);
            }
            if ((this.ongetAgentDetailByZoneCompletedDelegate == null)) {
                this.ongetAgentDetailByZoneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAgentDetailByZoneCompleted);
            }
            base.InvokeAsync(this.onBegingetAgentDetailByZoneDelegate, new object[] {
                        zoneId}, this.onEndgetAgentDetailByZoneDelegate, this.ongetAgentDetailByZoneCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo> getCompanyClientsByPrefix(string codePrefix) {
            return base.Channel.getCompanyClientsByPrefix(codePrefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCompanyClientsByPrefix(string codePrefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCompanyClientsByPrefix(codePrefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo> EndgetCompanyClientsByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCompanyClientsByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCompanyClientsByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codePrefix = ((string)(inValues[0]));
            return this.BegingetCompanyClientsByPrefix(codePrefix, callback, asyncState);
        }
        
        private object[] OnEndgetCompanyClientsByPrefix(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CompanyClientsInfo> retVal = this.EndgetCompanyClientsByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCompanyClientsByPrefixCompleted(object state) {
            if ((this.getCompanyClientsByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCompanyClientsByPrefixCompleted(this, new getCompanyClientsByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCompanyClientsByPrefixAsync(string codePrefix) {
            this.getCompanyClientsByPrefixAsync(codePrefix, null);
        }
        
        public void getCompanyClientsByPrefixAsync(string codePrefix, object userState) {
            if ((this.onBegingetCompanyClientsByPrefixDelegate == null)) {
                this.onBegingetCompanyClientsByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCompanyClientsByPrefix);
            }
            if ((this.onEndgetCompanyClientsByPrefixDelegate == null)) {
                this.onEndgetCompanyClientsByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCompanyClientsByPrefix);
            }
            if ((this.ongetCompanyClientsByPrefixCompletedDelegate == null)) {
                this.ongetCompanyClientsByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCompanyClientsByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCompanyClientsByPrefixDelegate, new object[] {
                        codePrefix}, this.onEndgetCompanyClientsByPrefixDelegate, this.ongetCompanyClientsByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> getCloseBranches(string clientLatitude, string clientLongitude) {
            return base.Channel.getCloseBranches(clientLatitude, clientLongitude);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCloseBranches(string clientLatitude, string clientLongitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCloseBranches(clientLatitude, clientLongitude, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> EndgetCloseBranches(System.IAsyncResult result) {
            return base.Channel.EndgetCloseBranches(result);
        }
        
        private System.IAsyncResult OnBegingetCloseBranches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string clientLatitude = ((string)(inValues[0]));
            string clientLongitude = ((string)(inValues[1]));
            return this.BegingetCloseBranches(clientLatitude, clientLongitude, callback, asyncState);
        }
        
        private object[] OnEndgetCloseBranches(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> retVal = this.EndgetCloseBranches(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCloseBranchesCompleted(object state) {
            if ((this.getCloseBranchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCloseBranchesCompleted(this, new getCloseBranchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCloseBranchesAsync(string clientLatitude, string clientLongitude) {
            this.getCloseBranchesAsync(clientLatitude, clientLongitude, null);
        }
        
        public void getCloseBranchesAsync(string clientLatitude, string clientLongitude, object userState) {
            if ((this.onBegingetCloseBranchesDelegate == null)) {
                this.onBegingetCloseBranchesDelegate = new BeginOperationDelegate(this.OnBegingetCloseBranches);
            }
            if ((this.onEndgetCloseBranchesDelegate == null)) {
                this.onEndgetCloseBranchesDelegate = new EndOperationDelegate(this.OnEndgetCloseBranches);
            }
            if ((this.ongetCloseBranchesCompletedDelegate == null)) {
                this.ongetCloseBranchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCloseBranchesCompleted);
            }
            base.InvokeAsync(this.onBegingetCloseBranchesDelegate, new object[] {
                        clientLatitude,
                        clientLongitude}, this.onEndgetCloseBranchesDelegate, this.ongetCloseBranchesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> getCloseBranchesByPrefix(string codePrefix, string clientLatitude, string clientLongitude) {
            return base.Channel.getCloseBranchesByPrefix(codePrefix, clientLatitude, clientLongitude);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCloseBranchesByPrefix(string codePrefix, string clientLatitude, string clientLongitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCloseBranchesByPrefix(codePrefix, clientLatitude, clientLongitude, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> EndgetCloseBranchesByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCloseBranchesByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCloseBranchesByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codePrefix = ((string)(inValues[0]));
            string clientLatitude = ((string)(inValues[1]));
            string clientLongitude = ((string)(inValues[2]));
            return this.BegingetCloseBranchesByPrefix(codePrefix, clientLatitude, clientLongitude, callback, asyncState);
        }
        
        private object[] OnEndgetCloseBranchesByPrefix(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> retVal = this.EndgetCloseBranchesByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCloseBranchesByPrefixCompleted(object state) {
            if ((this.getCloseBranchesByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCloseBranchesByPrefixCompleted(this, new getCloseBranchesByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCloseBranchesByPrefixAsync(string codePrefix, string clientLatitude, string clientLongitude) {
            this.getCloseBranchesByPrefixAsync(codePrefix, clientLatitude, clientLongitude, null);
        }
        
        public void getCloseBranchesByPrefixAsync(string codePrefix, string clientLatitude, string clientLongitude, object userState) {
            if ((this.onBegingetCloseBranchesByPrefixDelegate == null)) {
                this.onBegingetCloseBranchesByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCloseBranchesByPrefix);
            }
            if ((this.onEndgetCloseBranchesByPrefixDelegate == null)) {
                this.onEndgetCloseBranchesByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCloseBranchesByPrefix);
            }
            if ((this.ongetCloseBranchesByPrefixCompletedDelegate == null)) {
                this.ongetCloseBranchesByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCloseBranchesByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCloseBranchesByPrefixDelegate, new object[] {
                        codePrefix,
                        clientLatitude,
                        clientLongitude}, this.onEndgetCloseBranchesByPrefixDelegate, this.ongetCloseBranchesByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> getBranchesByPrefixByText(string codePrefix, System.Nullable<int> stateId, string companyClients, string searchText) {
            return base.Channel.getBranchesByPrefixByText(codePrefix, stateId, companyClients, searchText);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetBranchesByPrefixByText(string codePrefix, System.Nullable<int> stateId, string companyClients, string searchText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetBranchesByPrefixByText(codePrefix, stateId, companyClients, searchText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> EndgetBranchesByPrefixByText(System.IAsyncResult result) {
            return base.Channel.EndgetBranchesByPrefixByText(result);
        }
        
        private System.IAsyncResult OnBegingetBranchesByPrefixByText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codePrefix = ((string)(inValues[0]));
            System.Nullable<int> stateId = ((System.Nullable<int>)(inValues[1]));
            string companyClients = ((string)(inValues[2]));
            string searchText = ((string)(inValues[3]));
            return this.BegingetBranchesByPrefixByText(codePrefix, stateId, companyClients, searchText, callback, asyncState);
        }
        
        private object[] OnEndgetBranchesByPrefixByText(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo> retVal = this.EndgetBranchesByPrefixByText(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetBranchesByPrefixByTextCompleted(object state) {
            if ((this.getBranchesByPrefixByTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getBranchesByPrefixByTextCompleted(this, new getBranchesByPrefixByTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getBranchesByPrefixByTextAsync(string codePrefix, System.Nullable<int> stateId, string companyClients, string searchText) {
            this.getBranchesByPrefixByTextAsync(codePrefix, stateId, companyClients, searchText, null);
        }
        
        public void getBranchesByPrefixByTextAsync(string codePrefix, System.Nullable<int> stateId, string companyClients, string searchText, object userState) {
            if ((this.onBegingetBranchesByPrefixByTextDelegate == null)) {
                this.onBegingetBranchesByPrefixByTextDelegate = new BeginOperationDelegate(this.OnBegingetBranchesByPrefixByText);
            }
            if ((this.onEndgetBranchesByPrefixByTextDelegate == null)) {
                this.onEndgetBranchesByPrefixByTextDelegate = new EndOperationDelegate(this.OnEndgetBranchesByPrefixByText);
            }
            if ((this.ongetBranchesByPrefixByTextCompletedDelegate == null)) {
                this.ongetBranchesByPrefixByTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetBranchesByPrefixByTextCompleted);
            }
            base.InvokeAsync(this.onBegingetBranchesByPrefixByTextDelegate, new object[] {
                        codePrefix,
                        stateId,
                        companyClients,
                        searchText}, this.onEndgetBranchesByPrefixByTextDelegate, this.ongetBranchesByPrefixByTextCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo getBranch(int branchId) {
            return base.Channel.getBranch(branchId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetBranch(int branchId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetBranch(branchId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo EndgetBranch(System.IAsyncResult result) {
            return base.Channel.EndgetBranch(result);
        }
        
        private System.IAsyncResult OnBegingetBranch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int branchId = ((int)(inValues[0]));
            return this.BegingetBranch(branchId, callback, asyncState);
        }
        
        private object[] OnEndgetBranch(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.BranchDetailInfo retVal = this.EndgetBranch(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetBranchCompleted(object state) {
            if ((this.getBranchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getBranchCompleted(this, new getBranchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getBranchAsync(int branchId) {
            this.getBranchAsync(branchId, null);
        }
        
        public void getBranchAsync(int branchId, object userState) {
            if ((this.onBegingetBranchDelegate == null)) {
                this.onBegingetBranchDelegate = new BeginOperationDelegate(this.OnBegingetBranch);
            }
            if ((this.onEndgetBranchDelegate == null)) {
                this.onEndgetBranchDelegate = new EndOperationDelegate(this.OnEndgetBranch);
            }
            if ((this.ongetBranchCompletedDelegate == null)) {
                this.ongetBranchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetBranchCompleted);
            }
            base.InvokeAsync(this.onBegingetBranchDelegate, new object[] {
                        branchId}, this.onEndgetBranchDelegate, this.ongetBranchCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> getProductsByCompanyByText(int companyClientId, string textSearch) {
            return base.Channel.getProductsByCompanyByText(companyClientId, textSearch);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProductsByCompanyByText(int companyClientId, string textSearch, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProductsByCompanyByText(companyClientId, textSearch, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> EndgetProductsByCompanyByText(System.IAsyncResult result) {
            return base.Channel.EndgetProductsByCompanyByText(result);
        }
        
        private System.IAsyncResult OnBegingetProductsByCompanyByText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int companyClientId = ((int)(inValues[0]));
            string textSearch = ((string)(inValues[1]));
            return this.BegingetProductsByCompanyByText(companyClientId, textSearch, callback, asyncState);
        }
        
        private object[] OnEndgetProductsByCompanyByText(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> retVal = this.EndgetProductsByCompanyByText(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProductsByCompanyByTextCompleted(object state) {
            if ((this.getProductsByCompanyByTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProductsByCompanyByTextCompleted(this, new getProductsByCompanyByTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProductsByCompanyByTextAsync(int companyClientId, string textSearch) {
            this.getProductsByCompanyByTextAsync(companyClientId, textSearch, null);
        }
        
        public void getProductsByCompanyByTextAsync(int companyClientId, string textSearch, object userState) {
            if ((this.onBegingetProductsByCompanyByTextDelegate == null)) {
                this.onBegingetProductsByCompanyByTextDelegate = new BeginOperationDelegate(this.OnBegingetProductsByCompanyByText);
            }
            if ((this.onEndgetProductsByCompanyByTextDelegate == null)) {
                this.onEndgetProductsByCompanyByTextDelegate = new EndOperationDelegate(this.OnEndgetProductsByCompanyByText);
            }
            if ((this.ongetProductsByCompanyByTextCompletedDelegate == null)) {
                this.ongetProductsByCompanyByTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProductsByCompanyByTextCompleted);
            }
            base.InvokeAsync(this.onBegingetProductsByCompanyByTextDelegate, new object[] {
                        companyClientId,
                        textSearch}, this.onEndgetProductsByCompanyByTextDelegate, this.ongetProductsByCompanyByTextCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> getProductsByBranch(int branchId) {
            return base.Channel.getProductsByBranch(branchId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProductsByBranch(int branchId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProductsByBranch(branchId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> EndgetProductsByBranch(System.IAsyncResult result) {
            return base.Channel.EndgetProductsByBranch(result);
        }
        
        private System.IAsyncResult OnBegingetProductsByBranch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int branchId = ((int)(inValues[0]));
            return this.BegingetProductsByBranch(branchId, callback, asyncState);
        }
        
        private object[] OnEndgetProductsByBranch(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.PharmacyProductsInfo> retVal = this.EndgetProductsByBranch(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProductsByBranchCompleted(object state) {
            if ((this.getProductsByBranchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProductsByBranchCompleted(this, new getProductsByBranchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProductsByBranchAsync(int branchId) {
            this.getProductsByBranchAsync(branchId, null);
        }
        
        public void getProductsByBranchAsync(int branchId, object userState) {
            if ((this.onBegingetProductsByBranchDelegate == null)) {
                this.onBegingetProductsByBranchDelegate = new BeginOperationDelegate(this.OnBegingetProductsByBranch);
            }
            if ((this.onEndgetProductsByBranchDelegate == null)) {
                this.onEndgetProductsByBranchDelegate = new EndOperationDelegate(this.OnEndgetProductsByBranch);
            }
            if ((this.ongetProductsByBranchCompletedDelegate == null)) {
                this.ongetProductsByBranchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProductsByBranchCompleted);
            }
            base.InvokeAsync(this.onBegingetProductsByBranchDelegate, new object[] {
                        branchId}, this.onEndgetProductsByBranchDelegate, this.ongetProductsByBranchCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo getClient(int clientId) {
            return base.Channel.getClient(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClient(int clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClient(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo EndgetClient(System.IAsyncResult result) {
            return base.Channel.EndgetClient(result);
        }
        
        private System.IAsyncResult OnBegingetClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientId = ((int)(inValues[0]));
            return this.BegingetClient(clientId, callback, asyncState);
        }
        
        private object[] OnEndgetClient(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo retVal = this.EndgetClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientCompleted(object state) {
            if ((this.getClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientCompleted(this, new getClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientAsync(int clientId) {
            this.getClientAsync(clientId, null);
        }
        
        public void getClientAsync(int clientId, object userState) {
            if ((this.onBegingetClientDelegate == null)) {
                this.onBegingetClientDelegate = new BeginOperationDelegate(this.OnBegingetClient);
            }
            if ((this.onEndgetClientDelegate == null)) {
                this.onEndgetClientDelegate = new EndOperationDelegate(this.OnEndgetClient);
            }
            if ((this.ongetClientCompletedDelegate == null)) {
                this.ongetClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientCompleted);
            }
            base.InvokeAsync(this.onBegingetClientDelegate, new object[] {
                        clientId}, this.onEndgetClientDelegate, this.ongetClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo getClientByCompleteName(string completeName) {
            return base.Channel.getClientByCompleteName(completeName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientByCompleteName(string completeName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientByCompleteName(completeName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo EndgetClientByCompleteName(System.IAsyncResult result) {
            return base.Channel.EndgetClientByCompleteName(result);
        }
        
        private System.IAsyncResult OnBegingetClientByCompleteName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string completeName = ((string)(inValues[0]));
            return this.BegingetClientByCompleteName(completeName, callback, asyncState);
        }
        
        private object[] OnEndgetClientByCompleteName(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo retVal = this.EndgetClientByCompleteName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientByCompleteNameCompleted(object state) {
            if ((this.getClientByCompleteNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientByCompleteNameCompleted(this, new getClientByCompleteNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientByCompleteNameAsync(string completeName) {
            this.getClientByCompleteNameAsync(completeName, null);
        }
        
        public void getClientByCompleteNameAsync(string completeName, object userState) {
            if ((this.onBegingetClientByCompleteNameDelegate == null)) {
                this.onBegingetClientByCompleteNameDelegate = new BeginOperationDelegate(this.OnBegingetClientByCompleteName);
            }
            if ((this.onEndgetClientByCompleteNameDelegate == null)) {
                this.onEndgetClientByCompleteNameDelegate = new EndOperationDelegate(this.OnEndgetClientByCompleteName);
            }
            if ((this.ongetClientByCompleteNameCompletedDelegate == null)) {
                this.ongetClientByCompleteNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientByCompleteNameCompleted);
            }
            base.InvokeAsync(this.onBegingetClientByCompleteNameDelegate, new object[] {
                        completeName}, this.onEndgetClientByCompleteNameDelegate, this.ongetClientByCompleteNameCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo getClientByCode(string codeString) {
            return base.Channel.getClientByCode(codeString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientByCode(string codeString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientByCode(codeString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo EndgetClientByCode(System.IAsyncResult result) {
            return base.Channel.EndgetClientByCode(result);
        }
        
        private System.IAsyncResult OnBegingetClientByCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            return this.BegingetClientByCode(codeString, callback, asyncState);
        }
        
        private object[] OnEndgetClientByCode(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo retVal = this.EndgetClientByCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientByCodeCompleted(object state) {
            if ((this.getClientByCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientByCodeCompleted(this, new getClientByCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientByCodeAsync(string codeString) {
            this.getClientByCodeAsync(codeString, null);
        }
        
        public void getClientByCodeAsync(string codeString, object userState) {
            if ((this.onBegingetClientByCodeDelegate == null)) {
                this.onBegingetClientByCodeDelegate = new BeginOperationDelegate(this.OnBegingetClientByCode);
            }
            if ((this.onEndgetClientByCodeDelegate == null)) {
                this.onEndgetClientByCodeDelegate = new EndOperationDelegate(this.OnEndgetClientByCode);
            }
            if ((this.ongetClientByCodeCompletedDelegate == null)) {
                this.ongetClientByCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientByCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetClientByCodeDelegate, new object[] {
                        codeString}, this.onEndgetClientByCodeDelegate, this.ongetClientByCodeCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo getClientByEmail(string email) {
            return base.Channel.getClientByEmail(email);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientByEmail(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientByEmail(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo EndgetClientByEmail(System.IAsyncResult result) {
            return base.Channel.EndgetClientByEmail(result);
        }
        
        private System.IAsyncResult OnBegingetClientByEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return this.BegingetClientByEmail(email, callback, asyncState);
        }
        
        private object[] OnEndgetClientByEmail(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientInfo retVal = this.EndgetClientByEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientByEmailCompleted(object state) {
            if ((this.getClientByEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientByEmailCompleted(this, new getClientByEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientByEmailAsync(string email) {
            this.getClientByEmailAsync(email, null);
        }
        
        public void getClientByEmailAsync(string email, object userState) {
            if ((this.onBegingetClientByEmailDelegate == null)) {
                this.onBegingetClientByEmailDelegate = new BeginOperationDelegate(this.OnBegingetClientByEmail);
            }
            if ((this.onEndgetClientByEmailDelegate == null)) {
                this.onEndgetClientByEmailDelegate = new EndOperationDelegate(this.OnEndgetClientByEmail);
            }
            if ((this.ongetClientByEmailCompletedDelegate == null)) {
                this.ongetClientByEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientByEmailCompleted);
            }
            base.InvokeAsync(this.onBegingetClientByEmailDelegate, new object[] {
                        email}, this.onEndgetClientByEmailDelegate, this.ongetClientByEmailCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo getClientByIMEI(string IMEI) {
            return base.Channel.getClientByIMEI(IMEI);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientByIMEI(string IMEI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientByIMEI(IMEI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo EndgetClientByIMEI(System.IAsyncResult result) {
            return base.Channel.EndgetClientByIMEI(result);
        }
        
        private System.IAsyncResult OnBegingetClientByIMEI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string IMEI = ((string)(inValues[0]));
            return this.BegingetClientByIMEI(IMEI, callback, asyncState);
        }
        
        private object[] OnEndgetClientByIMEI(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo retVal = this.EndgetClientByIMEI(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientByIMEICompleted(object state) {
            if ((this.getClientByIMEICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientByIMEICompleted(this, new getClientByIMEICompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientByIMEIAsync(string IMEI) {
            this.getClientByIMEIAsync(IMEI, null);
        }
        
        public void getClientByIMEIAsync(string IMEI, object userState) {
            if ((this.onBegingetClientByIMEIDelegate == null)) {
                this.onBegingetClientByIMEIDelegate = new BeginOperationDelegate(this.OnBegingetClientByIMEI);
            }
            if ((this.onEndgetClientByIMEIDelegate == null)) {
                this.onEndgetClientByIMEIDelegate = new EndOperationDelegate(this.OnEndgetClientByIMEI);
            }
            if ((this.ongetClientByIMEICompletedDelegate == null)) {
                this.ongetClientByIMEICompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientByIMEICompleted);
            }
            base.InvokeAsync(this.onBegingetClientByIMEIDelegate, new object[] {
                        IMEI}, this.onEndgetClientByIMEIDelegate, this.ongetClientByIMEICompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo getClientByIMEIByPrefix(string IMEI, string prefix) {
            return base.Channel.getClientByIMEIByPrefix(IMEI, prefix);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientByIMEIByPrefix(string IMEI, string prefix, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientByIMEIByPrefix(IMEI, prefix, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo EndgetClientByIMEIByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetClientByIMEIByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetClientByIMEIByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string IMEI = ((string)(inValues[0]));
            string prefix = ((string)(inValues[1]));
            return this.BegingetClientByIMEIByPrefix(IMEI, prefix, callback, asyncState);
        }
        
        private object[] OnEndgetClientByIMEIByPrefix(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.MobileClientInfo retVal = this.EndgetClientByIMEIByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientByIMEIByPrefixCompleted(object state) {
            if ((this.getClientByIMEIByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientByIMEIByPrefixCompleted(this, new getClientByIMEIByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientByIMEIByPrefixAsync(string IMEI, string prefix) {
            this.getClientByIMEIByPrefixAsync(IMEI, prefix, null);
        }
        
        public void getClientByIMEIByPrefixAsync(string IMEI, string prefix, object userState) {
            if ((this.onBegingetClientByIMEIByPrefixDelegate == null)) {
                this.onBegingetClientByIMEIByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetClientByIMEIByPrefix);
            }
            if ((this.onEndgetClientByIMEIByPrefixDelegate == null)) {
                this.onEndgetClientByIMEIByPrefixDelegate = new EndOperationDelegate(this.OnEndgetClientByIMEIByPrefix);
            }
            if ((this.ongetClientByIMEIByPrefixCompletedDelegate == null)) {
                this.ongetClientByIMEIByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientByIMEIByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetClientByIMEIByPrefixDelegate, new object[] {
                        IMEI,
                        prefix}, this.onEndgetClientByIMEIByPrefixDelegate, this.ongetClientByIMEIByPrefixCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo> getProfessions() {
            return base.Channel.getProfessions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProfessions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProfessions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo> EndgetProfessions(System.IAsyncResult result) {
            return base.Channel.EndgetProfessions(result);
        }
        
        private System.IAsyncResult OnBegingetProfessions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProfessions(callback, asyncState);
        }
        
        private object[] OnEndgetProfessions(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo> retVal = this.EndgetProfessions(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProfessionsCompleted(object state) {
            if ((this.getProfessionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProfessionsCompleted(this, new getProfessionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProfessionsAsync() {
            this.getProfessionsAsync(null);
        }
        
        public void getProfessionsAsync(object userState) {
            if ((this.onBegingetProfessionsDelegate == null)) {
                this.onBegingetProfessionsDelegate = new BeginOperationDelegate(this.OnBegingetProfessions);
            }
            if ((this.onEndgetProfessionsDelegate == null)) {
                this.onEndgetProfessionsDelegate = new EndOperationDelegate(this.OnEndgetProfessions);
            }
            if ((this.ongetProfessionsCompletedDelegate == null)) {
                this.ongetProfessionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProfessionsCompleted);
            }
            base.InvokeAsync(this.onBegingetProfessionsDelegate, null, this.onEndgetProfessionsDelegate, this.ongetProfessionsCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo getProfession(int professionId) {
            return base.Channel.getProfession(professionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProfession(int professionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProfession(professionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo EndgetProfession(System.IAsyncResult result) {
            return base.Channel.EndgetProfession(result);
        }
        
        private System.IAsyncResult OnBegingetProfession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int professionId = ((int)(inValues[0]));
            return this.BegingetProfession(professionId, callback, asyncState);
        }
        
        private object[] OnEndgetProfession(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionInfo retVal = this.EndgetProfession(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProfessionCompleted(object state) {
            if ((this.getProfessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProfessionCompleted(this, new getProfessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProfessionAsync(int professionId) {
            this.getProfessionAsync(professionId, null);
        }
        
        public void getProfessionAsync(int professionId, object userState) {
            if ((this.onBegingetProfessionDelegate == null)) {
                this.onBegingetProfessionDelegate = new BeginOperationDelegate(this.OnBegingetProfession);
            }
            if ((this.onEndgetProfessionDelegate == null)) {
                this.onEndgetProfessionDelegate = new EndOperationDelegate(this.OnEndgetProfession);
            }
            if ((this.ongetProfessionCompletedDelegate == null)) {
                this.ongetProfessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProfessionCompleted);
            }
            base.InvokeAsync(this.onBegingetProfessionDelegate, new object[] {
                        professionId}, this.onEndgetProfessionDelegate, this.ongetProfessionCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo> getSpecialities(short professionId) {
            return base.Channel.getSpecialities(professionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSpecialities(short professionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSpecialities(professionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo> EndgetSpecialities(System.IAsyncResult result) {
            return base.Channel.EndgetSpecialities(result);
        }
        
        private System.IAsyncResult OnBegingetSpecialities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            short professionId = ((short)(inValues[0]));
            return this.BegingetSpecialities(professionId, callback, asyncState);
        }
        
        private object[] OnEndgetSpecialities(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityInfo> retVal = this.EndgetSpecialities(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSpecialitiesCompleted(object state) {
            if ((this.getSpecialitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSpecialitiesCompleted(this, new getSpecialitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSpecialitiesAsync(short professionId) {
            this.getSpecialitiesAsync(professionId, null);
        }
        
        public void getSpecialitiesAsync(short professionId, object userState) {
            if ((this.onBegingetSpecialitiesDelegate == null)) {
                this.onBegingetSpecialitiesDelegate = new BeginOperationDelegate(this.OnBegingetSpecialities);
            }
            if ((this.onEndgetSpecialitiesDelegate == null)) {
                this.onEndgetSpecialitiesDelegate = new EndOperationDelegate(this.OnEndgetSpecialities);
            }
            if ((this.ongetSpecialitiesCompletedDelegate == null)) {
                this.ongetSpecialitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSpecialitiesCompleted);
            }
            base.InvokeAsync(this.onBegingetSpecialitiesDelegate, new object[] {
                        professionId}, this.onEndgetSpecialitiesDelegate, this.ongetSpecialitiesCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo getProfessionByClient(int clientId) {
            return base.Channel.getProfessionByClient(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProfessionByClient(int clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProfessionByClient(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo EndgetProfessionByClient(System.IAsyncResult result) {
            return base.Channel.EndgetProfessionByClient(result);
        }
        
        private System.IAsyncResult OnBegingetProfessionByClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientId = ((int)(inValues[0]));
            return this.BegingetProfessionByClient(clientId, callback, asyncState);
        }
        
        private object[] OnEndgetProfessionByClient(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ProfessionClientInfo retVal = this.EndgetProfessionByClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProfessionByClientCompleted(object state) {
            if ((this.getProfessionByClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProfessionByClientCompleted(this, new getProfessionByClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProfessionByClientAsync(int clientId) {
            this.getProfessionByClientAsync(clientId, null);
        }
        
        public void getProfessionByClientAsync(int clientId, object userState) {
            if ((this.onBegingetProfessionByClientDelegate == null)) {
                this.onBegingetProfessionByClientDelegate = new BeginOperationDelegate(this.OnBegingetProfessionByClient);
            }
            if ((this.onEndgetProfessionByClientDelegate == null)) {
                this.onEndgetProfessionByClientDelegate = new EndOperationDelegate(this.OnEndgetProfessionByClient);
            }
            if ((this.ongetProfessionByClientCompletedDelegate == null)) {
                this.ongetProfessionByClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProfessionByClientCompleted);
            }
            base.InvokeAsync(this.onBegingetProfessionByClientDelegate, new object[] {
                        clientId}, this.onEndgetProfessionByClientDelegate, this.ongetProfessionByClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo getSpecialityByClient(int clientId) {
            return base.Channel.getSpecialityByClient(clientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSpecialityByClient(int clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSpecialityByClient(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo EndgetSpecialityByClient(System.IAsyncResult result) {
            return base.Channel.EndgetSpecialityByClient(result);
        }
        
        private System.IAsyncResult OnBegingetSpecialityByClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientId = ((int)(inValues[0]));
            return this.BegingetSpecialityByClient(clientId, callback, asyncState);
        }
        
        private object[] OnEndgetSpecialityByClient(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.SpecialityClientInfo retVal = this.EndgetSpecialityByClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSpecialityByClientCompleted(object state) {
            if ((this.getSpecialityByClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSpecialityByClientCompleted(this, new getSpecialityByClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSpecialityByClientAsync(int clientId) {
            this.getSpecialityByClientAsync(clientId, null);
        }
        
        public void getSpecialityByClientAsync(int clientId, object userState) {
            if ((this.onBegingetSpecialityByClientDelegate == null)) {
                this.onBegingetSpecialityByClientDelegate = new BeginOperationDelegate(this.OnBegingetSpecialityByClient);
            }
            if ((this.onEndgetSpecialityByClientDelegate == null)) {
                this.onEndgetSpecialityByClientDelegate = new EndOperationDelegate(this.OnEndgetSpecialityByClient);
            }
            if ((this.ongetSpecialityByClientCompletedDelegate == null)) {
                this.ongetSpecialityByClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSpecialityByClientCompleted);
            }
            base.InvokeAsync(this.onBegingetSpecialityByClientDelegate, new object[] {
                        clientId}, this.onEndgetSpecialityByClientDelegate, this.ongetSpecialityByClientCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo getClientByEmailByPassword(string email, string password) {
            return base.Channel.getClientByEmailByPassword(email, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientByEmailByPassword(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientByEmailByPassword(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo EndgetClientByEmailByPassword(System.IAsyncResult result) {
            return base.Channel.EndgetClientByEmailByPassword(result);
        }
        
        private System.IAsyncResult OnBegingetClientByEmailByPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BegingetClientByEmailByPassword(email, password, callback, asyncState);
        }
        
        private object[] OnEndgetClientByEmailByPassword(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.WebClientInfo retVal = this.EndgetClientByEmailByPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientByEmailByPasswordCompleted(object state) {
            if ((this.getClientByEmailByPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientByEmailByPasswordCompleted(this, new getClientByEmailByPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientByEmailByPasswordAsync(string email, string password) {
            this.getClientByEmailByPasswordAsync(email, password, null);
        }
        
        public void getClientByEmailByPasswordAsync(string email, string password, object userState) {
            if ((this.onBegingetClientByEmailByPasswordDelegate == null)) {
                this.onBegingetClientByEmailByPasswordDelegate = new BeginOperationDelegate(this.OnBegingetClientByEmailByPassword);
            }
            if ((this.onEndgetClientByEmailByPasswordDelegate == null)) {
                this.onEndgetClientByEmailByPasswordDelegate = new EndOperationDelegate(this.OnEndgetClientByEmailByPassword);
            }
            if ((this.ongetClientByEmailByPasswordCompletedDelegate == null)) {
                this.ongetClientByEmailByPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientByEmailByPasswordCompleted);
            }
            base.InvokeAsync(this.onBegingetClientByEmailByPasswordDelegate, new object[] {
                        email,
                        password}, this.onEndgetClientByEmailByPasswordDelegate, this.ongetClientByEmailByPasswordCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo> getResidenceLevelsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            return base.Channel.getResidenceLevelsBySpeciality(speciality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetResidenceLevelsBySpeciality(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetResidenceLevelsBySpeciality(speciality, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo> EndgetResidenceLevelsBySpeciality(System.IAsyncResult result) {
            return base.Channel.EndgetResidenceLevelsBySpeciality(result);
        }
        
        private System.IAsyncResult OnBegingetResidenceLevelsBySpeciality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality = ((PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities)(inValues[0]));
            return this.BegingetResidenceLevelsBySpeciality(speciality, callback, asyncState);
        }
        
        private object[] OnEndgetResidenceLevelsBySpeciality(System.IAsyncResult result) {
            System.Collections.Generic.List<PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ResidenceLevelsInfo> retVal = this.EndgetResidenceLevelsBySpeciality(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetResidenceLevelsBySpecialityCompleted(object state) {
            if ((this.getResidenceLevelsBySpecialityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getResidenceLevelsBySpecialityCompleted(this, new getResidenceLevelsBySpecialityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getResidenceLevelsBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality) {
            this.getResidenceLevelsBySpecialityAsync(speciality, null);
        }
        
        public void getResidenceLevelsBySpecialityAsync(PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CatalogsSpecialities speciality, object userState) {
            if ((this.onBegingetResidenceLevelsBySpecialityDelegate == null)) {
                this.onBegingetResidenceLevelsBySpecialityDelegate = new BeginOperationDelegate(this.OnBegingetResidenceLevelsBySpeciality);
            }
            if ((this.onEndgetResidenceLevelsBySpecialityDelegate == null)) {
                this.onEndgetResidenceLevelsBySpecialityDelegate = new EndOperationDelegate(this.OnEndgetResidenceLevelsBySpeciality);
            }
            if ((this.ongetResidenceLevelsBySpecialityCompletedDelegate == null)) {
                this.ongetResidenceLevelsBySpecialityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetResidenceLevelsBySpecialityCompleted);
            }
            base.InvokeAsync(this.onBegingetResidenceLevelsBySpecialityDelegate, new object[] {
                        speciality}, this.onEndgetResidenceLevelsBySpecialityDelegate, this.ongetResidenceLevelsBySpecialityCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo getClientDetailByEmail(string email) {
            return base.Channel.getClientDetailByEmail(email);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientDetailByEmail(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientDetailByEmail(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo EndgetClientDetailByEmail(System.IAsyncResult result) {
            return base.Channel.EndgetClientDetailByEmail(result);
        }
        
        private System.IAsyncResult OnBegingetClientDetailByEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return this.BegingetClientDetailByEmail(email, callback, asyncState);
        }
        
        private object[] OnEndgetClientDetailByEmail(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.ClientDetailInfo retVal = this.EndgetClientDetailByEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClientDetailByEmailCompleted(object state) {
            if ((this.getClientDetailByEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientDetailByEmailCompleted(this, new getClientDetailByEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientDetailByEmailAsync(string email) {
            this.getClientDetailByEmailAsync(email, null);
        }
        
        public void getClientDetailByEmailAsync(string email, object userState) {
            if ((this.onBegingetClientDetailByEmailDelegate == null)) {
                this.onBegingetClientDetailByEmailDelegate = new BeginOperationDelegate(this.OnBegingetClientDetailByEmail);
            }
            if ((this.onEndgetClientDetailByEmailDelegate == null)) {
                this.onEndgetClientDetailByEmailDelegate = new EndOperationDelegate(this.OnEndgetClientDetailByEmail);
            }
            if ((this.ongetClientDetailByEmailCompletedDelegate == null)) {
                this.ongetClientDetailByEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientDetailByEmailCompleted);
            }
            base.InvokeAsync(this.onBegingetClientDetailByEmailDelegate, new object[] {
                        email}, this.onEndgetClientDetailByEmailDelegate, this.ongetClientDetailByEmailCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCode(int codeId) {
            return base.Channel.getCode(codeId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCode(int codeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCode(codeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCode(System.IAsyncResult result) {
            return base.Channel.EndgetCode(result);
        }
        
        private System.IAsyncResult OnBegingetCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int codeId = ((int)(inValues[0]));
            return this.BegingetCode(codeId, callback, asyncState);
        }
        
        private object[] OnEndgetCode(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeCompleted(object state) {
            if ((this.getCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeCompleted(this, new getCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeAsync(int codeId) {
            this.getCodeAsync(codeId, null);
        }
        
        public void getCodeAsync(int codeId, object userState) {
            if ((this.onBegingetCodeDelegate == null)) {
                this.onBegingetCodeDelegate = new BeginOperationDelegate(this.OnBegingetCode);
            }
            if ((this.onEndgetCodeDelegate == null)) {
                this.onEndgetCodeDelegate = new EndOperationDelegate(this.OnEndgetCode);
            }
            if ((this.ongetCodeCompletedDelegate == null)) {
                this.ongetCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetCodeDelegate, new object[] {
                        codeId}, this.onEndgetCodeDelegate, this.ongetCodeCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByCodeString(string codeString) {
            return base.Channel.getCodeByCodeString(codeString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCodeByCodeString(string codeString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCodeByCodeString(codeString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByCodeString(System.IAsyncResult result) {
            return base.Channel.EndgetCodeByCodeString(result);
        }
        
        private System.IAsyncResult OnBegingetCodeByCodeString(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string codeString = ((string)(inValues[0]));
            return this.BegingetCodeByCodeString(codeString, callback, asyncState);
        }
        
        private object[] OnEndgetCodeByCodeString(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCodeByCodeString(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeByCodeStringCompleted(object state) {
            if ((this.getCodeByCodeStringCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeByCodeStringCompleted(this, new getCodeByCodeStringCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeByCodeStringAsync(string codeString) {
            this.getCodeByCodeStringAsync(codeString, null);
        }
        
        public void getCodeByCodeStringAsync(string codeString, object userState) {
            if ((this.onBegingetCodeByCodeStringDelegate == null)) {
                this.onBegingetCodeByCodeStringDelegate = new BeginOperationDelegate(this.OnBegingetCodeByCodeString);
            }
            if ((this.onEndgetCodeByCodeStringDelegate == null)) {
                this.onEndgetCodeByCodeStringDelegate = new EndOperationDelegate(this.OnEndgetCodeByCodeString);
            }
            if ((this.ongetCodeByCodeStringCompletedDelegate == null)) {
                this.ongetCodeByCodeStringCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeByCodeStringCompleted);
            }
            base.InvokeAsync(this.onBegingetCodeByCodeStringDelegate, new object[] {
                        codeString}, this.onEndgetCodeByCodeStringDelegate, this.ongetCodeByCodeStringCompletedDelegate, userState);
        }
        
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo getCodeByPrefix(int prefixId) {
            return base.Channel.getCodeByPrefix(prefixId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCodeByPrefix(int prefixId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCodeByPrefix(prefixId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo EndgetCodeByPrefix(System.IAsyncResult result) {
            return base.Channel.EndgetCodeByPrefix(result);
        }
        
        private System.IAsyncResult OnBegingetCodeByPrefix(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int prefixId = ((int)(inValues[0]));
            return this.BegingetCodeByPrefix(prefixId, callback, asyncState);
        }
        
        private object[] OnEndgetCodeByPrefix(System.IAsyncResult result) {
            PruebaCronnerBusinessLogicComponent.PLMClientsEngine.CodeInfo retVal = this.EndgetCodeByPrefix(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCodeByPrefixCompleted(object state) {
            if ((this.getCodeByPrefixCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCodeByPrefixCompleted(this, new getCodeByPrefixCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCodeByPrefixAsync(int prefixId) {
            this.getCodeByPrefixAsync(prefixId, null);
        }
        
        public void getCodeByPrefixAsync(int prefixId, object userState) {
            if ((this.onBegingetCodeByPrefixDelegate == null)) {
                this.onBegingetCodeByPrefixDelegate = new BeginOperationDelegate(this.OnBegingetCodeByPrefix);
            }
            if ((this.onEndgetCodeByPrefixDelegate == null)) {
                this.onEndgetCodeByPrefixDelegate = new EndOperationDelegate(this.OnEndgetCodeByPrefix);
            }
            if ((this.ongetCodeByPrefixCompletedDelegate == null)) {
                this.ongetCodeByPrefixCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCodeByPrefixCompleted);
            }
            base.InvokeAsync(this.onBegingetCodeByPrefixDelegate, new object[] {
                        prefixId}, this.onEndgetCodeByPrefixDelegate, this.ongetCodeByPrefixCompletedDelegate, userState);
        }
    }
}
